<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

	<!-- generator="WordPress/5.3.11" created="2022-01-22 04:32" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>LIOBIO</title>
	<link>http://blog.liobio.cn</link>
	<description>他只是一个枯燥的人</description>
	<pubDate>Sat, 22 Jan 2022 04:32:29 +0000</pubDate>
	<language>zh-CN</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://blog.liobio.cn</wp:base_site_url>
	<wp:base_blog_url>http://blog.liobio.cn</wp:base_blog_url>

		<wp:author><wp:author_id>1</wp:author_id><wp:author_login><![CDATA[liobio]]></wp:author_login><wp:author_email><![CDATA[582437980@qq.com]]></wp:author_email><wp:author_display_name><![CDATA[liobio]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>

		<wp:category>
		<wp:term_id>8</wp:term_id>
		<wp:category_nicename><![CDATA[java]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Java]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>14</wp:term_id>
		<wp:category_nicename><![CDATA[javaweb]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Javaweb]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>9</wp:term_id>
		<wp:category_nicename><![CDATA[leetcode]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Leetcode]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>4</wp:term_id>
		<wp:category_nicename><![CDATA[python]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[python]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>15</wp:term_id>
		<wp:category_nicename><![CDATA[spring]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Spring]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>1</wp:term_id>
		<wp:category_nicename><![CDATA[unity]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[unity]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>6</wp:term_id>
		<wp:category_nicename><![CDATA[cs]]></wp:category_nicename>
		<wp:category_parent><![CDATA[unity]]></wp:category_parent>
		<wp:cat_name><![CDATA[cs]]></wp:cat_name>
<wp:category_description><![CDATA[unity脚本代码]]></wp:category_description>
	</wp:category>
			<wp:tag>
		<wp:term_id>10</wp:term_id>
		<wp:tag_slug><![CDATA[lc-appleetcode-cn-id1-langjava-1-%e4%b8%a4%e6%95%b0%e4%b9%8b%e5%92%8c-lc-codestart-class-solution-public-int-twosumint-nums]]></wp:tag_slug>
		<wp:tag_name><![CDATA[/* * @lc app=leetcode.cn id=1 lang=java * * [1] 两数之和 */ // @lc code=start class Solution { public int[] twoSum(int[] nums]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>13</wp:term_id>
		<wp:tag_slug><![CDATA[int-i]]></wp:tag_slug>
		<wp:tag_name><![CDATA[int i]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>11</wp:term_id>
		<wp:tag_slug><![CDATA[int-target-int-out-new-int2-%e5%8a%a8%e6%80%81%e6%95%b0%e7%bb%84%e7%9a%84%e6%a0%87%e5%87%86%e5%88%86%e9%85%8d]]></wp:tag_slug>
		<wp:tag_name><![CDATA[int target) { int[] out = new int[2];//动态数组的标准分配]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>12</wp:term_id>
		<wp:tag_slug><![CDATA[j]]></wp:tag_slug>
		<wp:tag_name><![CDATA[j;]]></wp:tag_name>
	</wp:tag>
			<wp:term>
		<wp:term_id><![CDATA[10]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[lc-appleetcode-cn-id1-langjava-1-%e4%b8%a4%e6%95%b0%e4%b9%8b%e5%92%8c-lc-codestart-class-solution-public-int-twosumint-nums]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[/* * @lc app=leetcode.cn id=1 lang=java * * [1] 两数之和 */ // @lc code=start class Solution { public int[] twoSum(int[] nums]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[13]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[int-i]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[int i]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[11]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[int-target-int-out-new-int2-%e5%8a%a8%e6%80%81%e6%95%b0%e7%bb%84%e7%9a%84%e6%a0%87%e5%87%86%e5%88%86%e9%85%8d]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[int target) { int[] out = new int[2];//动态数组的标准分配]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[12]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[j]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[j;]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[8]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[java]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Java]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[14]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[javaweb]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Javaweb]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[9]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[leetcode]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Leetcode]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[4]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[python]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[python]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[15]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[spring]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Spring]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[1]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[unity]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[unity]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[2]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[nav_menu]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e4%b8%bb]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[主]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[6]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[cs]]></wp:term_slug>
		<wp:term_parent><![CDATA[unity]]></wp:term_parent>
		<wp:term_name><![CDATA[cs]]></wp:term_name>
		<wp:term_description><![CDATA[unity脚本代码]]></wp:term_description>
	</wp:term>
			<wp:term><wp:term_id>2</wp:term_id><wp:term_taxonomy>nav_menu</wp:term_taxonomy><wp:term_slug><![CDATA[%e4%b8%bb]]></wp:term_slug><wp:term_name><![CDATA[主]]></wp:term_name>
</wp:term>

	<generator>https://wordpress.org/?v=5.3.11</generator>

<image>
	<url>http://blog.liobio.cn/wp-content/uploads/2021/03/cropped-error_img-32x32.png</url>
	<title>LIOBIO</title>
	<link>http://blog.liobio.cn</link>
	<width>32</width>
	<height>32</height>
</image> 

		<item>
		<title>test</title>
		<link>http://blog.liobio.cn/test/</link>
		<pubDate>Tue, 30 Mar 2021 05:08:17 +0000</pubDate>
		<dc:creator><![CDATA[liobio]]></dc:creator>
		<guid isPermaLink="false">http://blog.liobio.cn/wp-content/uploads/2021/03/test.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>11</wp:post_id>
		<wp:post_date><![CDATA[2021-03-30 13:08:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-03-30 05:08:17]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[test]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://blog.liobio.cn/wp-content/uploads/2021/03/test.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/03/test.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1080;s:6:"height";i:1080;s:4:"file";s:16:"2021/03/test.jpg";s:5:"sizes";a:4:{s:6:"medium";a:4:{s:4:"file";s:16:"test-300x300.jpg";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:18:"test-1024x1024.jpg";s:5:"width";i:1024;s:6:"height";i:1024;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:16:"test-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:16:"test-768x768.jpg";s:5:"width";i:768;s:6:"height";i:768;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>error_img</title>
		<link>http://blog.liobio.cn/error_img/</link>
		<pubDate>Tue, 30 Mar 2021 05:09:39 +0000</pubDate>
		<dc:creator><![CDATA[liobio]]></dc:creator>
		<guid isPermaLink="false">http://blog.liobio.cn/wp-content/uploads/2021/03/error_img.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>12</wp:post_id>
		<wp:post_date><![CDATA[2021-03-30 13:09:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-03-30 05:09:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[error_img]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://blog.liobio.cn/wp-content/uploads/2021/03/error_img.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/03/error_img.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:980;s:6:"height";i:814;s:4:"file";s:21:"2021/03/error_img.png";s:5:"sizes";a:3:{s:6:"medium";a:4:{s:4:"file";s:21:"error_img-300x249.png";s:5:"width";i:300;s:6:"height";i:249;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:21:"error_img-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:21:"error_img-768x638.png";s:5:"width";i:768;s:6:"height";i:638;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>cropped-error_img.png</title>
		<link>http://blog.liobio.cn/cropped-error_img-png/</link>
		<pubDate>Tue, 30 Mar 2021 05:10:05 +0000</pubDate>
		<dc:creator><![CDATA[liobio]]></dc:creator>
		<guid isPermaLink="false">http://blog.liobio.cn/wp-content/uploads/2021/03/cropped-error_img.png</guid>
		<description></description>
		<content:encoded><![CDATA[http://blog.liobio.cn/wp-content/uploads/2021/03/cropped-error_img.png]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>13</wp:post_id>
		<wp:post_date><![CDATA[2021-03-30 13:10:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-03-30 05:10:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cropped-error_img-png]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://blog.liobio.cn/wp-content/uploads/2021/03/cropped-error_img.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/03/cropped-error_img.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_context]]></wp:meta_key>
		<wp:meta_value><![CDATA[site-icon]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:512;s:6:"height";i:512;s:4:"file";s:29:"2021/03/cropped-error_img.png";s:5:"sizes";a:6:{s:6:"medium";a:4:{s:4:"file";s:29:"cropped-error_img-300x300.png";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:29:"cropped-error_img-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:13:"site_icon-270";a:4:{s:4:"file";s:29:"cropped-error_img-270x270.png";s:5:"width";i:270;s:6:"height";i:270;s:9:"mime-type";s:9:"image/png";}s:13:"site_icon-192";a:4:{s:4:"file";s:29:"cropped-error_img-192x192.png";s:5:"width";i:192;s:6:"height";i:192;s:9:"mime-type";s:9:"image/png";}s:13:"site_icon-180";a:4:{s:4:"file";s:29:"cropped-error_img-180x180.png";s:5:"width";i:180;s:6:"height";i:180;s:9:"mime-type";s:9:"image/png";}s:12:"site_icon-32";a:4:{s:4:"file";s:27:"cropped-error_img-32x32.png";s:5:"width";i:32;s:6:"height";i:32;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>preview</title>
		<link>http://blog.liobio.cn/preview/</link>
		<pubDate>Tue, 30 Mar 2021 05:33:17 +0000</pubDate>
		<dc:creator><![CDATA[liobio]]></dc:creator>
		<guid isPermaLink="false">http://blog.liobio.cn/wp-content/uploads/2021/03/preview.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>14</wp:post_id>
		<wp:post_date><![CDATA[2021-03-30 13:33:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-03-30 05:33:17]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[preview]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://blog.liobio.cn/wp-content/uploads/2021/03/preview.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/03/preview.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1003;s:6:"height";i:1003;s:4:"file";s:19:"2021/03/preview.jpg";s:5:"sizes";a:3:{s:6:"medium";a:4:{s:4:"file";s:19:"preview-300x300.jpg";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:19:"preview-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:19:"preview-768x768.jpg";s:5:"width";i:768;s:6:"height";i:768;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>preview</title>
		<link>http://blog.liobio.cn/preview-2/</link>
		<pubDate>Tue, 30 Mar 2021 05:33:33 +0000</pubDate>
		<dc:creator><![CDATA[liobio]]></dc:creator>
		<guid isPermaLink="false">http://blog.liobio.cn/wp-content/uploads/2021/03/preview-1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>15</wp:post_id>
		<wp:post_date><![CDATA[2021-03-30 13:33:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-03-30 05:33:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[preview-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://blog.liobio.cn/wp-content/uploads/2021/03/preview-1.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/03/preview-1.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:476;s:6:"height";i:476;s:4:"file";s:21:"2021/03/preview-1.jpg";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:21:"preview-1-300x300.jpg";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:21:"preview-1-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>preview</title>
		<link>http://blog.liobio.cn/preview-3/</link>
		<pubDate>Tue, 30 Mar 2021 05:33:59 +0000</pubDate>
		<dc:creator><![CDATA[liobio]]></dc:creator>
		<guid isPermaLink="false">http://blog.liobio.cn/wp-content/uploads/2021/03/preview-2.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>16</wp:post_id>
		<wp:post_date><![CDATA[2021-03-30 13:33:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-03-30 05:33:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[preview-3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://blog.liobio.cn/wp-content/uploads/2021/03/preview-2.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/03/preview-2.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:302;s:6:"height";i:302;s:4:"file";s:21:"2021/03/preview-2.jpg";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:21:"preview-2-300x300.jpg";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:21:"preview-2-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>preview</title>
		<link>http://blog.liobio.cn/preview-4/</link>
		<pubDate>Tue, 30 Mar 2021 05:35:57 +0000</pubDate>
		<dc:creator><![CDATA[liobio]]></dc:creator>
		<guid isPermaLink="false">http://blog.liobio.cn/wp-content/uploads/2021/03/preview-3.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>18</wp:post_id>
		<wp:post_date><![CDATA[2021-03-30 13:35:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-03-30 05:35:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[preview-4]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://blog.liobio.cn/wp-content/uploads/2021/03/preview-3.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/03/preview-3.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1080;s:6:"height";i:1080;s:4:"file";s:21:"2021/03/preview-3.jpg";s:5:"sizes";a:4:{s:6:"medium";a:4:{s:4:"file";s:21:"preview-3-300x300.jpg";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:23:"preview-3-1024x1024.jpg";s:5:"width";i:1024;s:6:"height";i:1024;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:21:"preview-3-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:21:"preview-3-768x768.jpg";s:5:"width";i:768;s:6:"height";i:768;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_is_custom_background]]></wp:meta_key>
		<wp:meta_value><![CDATA[twentytwenty]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Chiru (Saisei no Uta)</title>
		<link>http://blog.liobio.cn/chiru-saisei-no-uta/</link>
		<pubDate>Tue, 30 Mar 2021 05:38:43 +0000</pubDate>
		<dc:creator><![CDATA[liobio]]></dc:creator>
		<guid isPermaLink="false">http://blog.liobio.cn/wp-content/uploads/2021/03/Robert-de-Boron-Chiru-Saisei-no-Uta.mp3</guid>
		<description></description>
		<content:encoded><![CDATA[《Chiru (Saisei no Uta)》，来自Robert de Boron的Mellow Candle。 发行于：2012。 曲目7。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>19</wp:post_id>
		<wp:post_date><![CDATA[2021-03-30 13:38:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-03-30 05:38:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[chiru-saisei-no-uta]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://blog.liobio.cn/wp-content/uploads/2021/03/Robert-de-Boron-Chiru-Saisei-no-Uta.mp3]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/03/Robert-de-Boron-Chiru-Saisei-no-Uta.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:23:{s:10:"dataformat";s:3:"mp3";s:8:"channels";i:2;s:11:"sample_rate";i:44100;s:7:"bitrate";d:128012.99979600163;s:11:"channelmode";s:6:"stereo";s:12:"bitrate_mode";s:3:"vbr";s:8:"lossless";b:0;s:15:"encoder_options";s:3:"VBR";s:17:"compression_ratio";d:0.09071215971938891;s:10:"fileformat";s:3:"mp3";s:8:"filesize";i:4995253;s:9:"mime_type";s:10:"audio/mpeg";s:6:"length";i:256;s:16:"length_formatted";s:4:"4:16";s:16:"encoder_settings";s:12:"Lavf56.4.101";s:7:"comment";s:558:"163 key(Don't modify):L64FU3W4YxX3ZFTmbZ+8/SKQ9x6fx743LDUn084wxojpXSFHXRwToMAFbN1rxWwpENByOlSwB4fEzhFZ2zeYL3ddv0XdOICo0K+MqnOyRu8jggW6a6QheWKeVaws1OtlhNTvLRhesK/E6hKCVUMK03jcH1KW8b+PLCWuqu/KTW2x9FIypUybWjvYnfxh6eUxjDLQJdwTL53PdR4tORVgeEc6uLC6B9ZEKX2dA8abFqUqAXX1zDC/wmHE/x10flwbBIU1fgHLIdhs9jvRIZmqJ4qOPTVje20Ms33ZBWNQtmoauNk2uK0N0cNpU2Z9nK5a0QubgbqcunvkIBNLf8fEq2ugvIqNZ0HAFOgJGJF3qCLL30YUn0RLsvPD7T9lo5FZwQf+YL3vSm8LkF7sFn+yh9t1vp7vICUW8y79CWUyDR3PUYvTAapq1YAqPhMTSxGfsaY5uHSrK6Hp1JI7a5slIMt3CYgmsaGXs0lsB0+/j7bHUtM4Q9k+tby0BcJgbTtR6YURAByiRHQ6CI5tvtxzQg==";s:5:"album";s:13:"Mellow Candle";s:5:"title";s:21:"Chiru (Saisei no Uta)";s:6:"artist";s:15:"Robert de Boron";s:13:"part_of_a_set";s:1:"1";s:12:"track_number";s:1:"7";s:4:"year";s:4:"2012";s:5:"image";a:3:{s:4:"mime";s:9:"image/png";s:5:"width";i:640;s:6:"height";i:640;}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>20210301214418</title>
		<link>http://blog.liobio.cn/index.php/%e5%85%a8%e6%96%b0umoma%e5%bc%80%e9%97%a8%e8%bf%8e%e5%ae%a2-2/attachment/20210301214418/</link>
		<pubDate>Tue, 30 Mar 2021 05:51:56 +0000</pubDate>
		<dc:creator><![CDATA[liobio]]></dc:creator>
		<guid isPermaLink="false">http://blog.liobio.cn/wp-content/uploads/2021/03/20210301214418.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>35</wp:post_id>
		<wp:post_date><![CDATA[2021-03-30 13:51:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-03-30 05:51:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[20210301214418]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>6</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://blog.liobio.cn/wp-content/uploads/2021/03/20210301214418.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/03/20210301214418.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:712;s:6:"height";i:592;s:4:"file";s:26:"2021/03/20210301214418.png";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:26:"20210301214418-300x249.png";s:5:"width";i:300;s:6:"height";i:249;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:26:"20210301214418-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>on</title>
		<link>http://blog.liobio.cn/on/</link>
		<pubDate>Tue, 30 Mar 2021 09:19:39 +0000</pubDate>
		<dc:creator><![CDATA[liobio]]></dc:creator>
		<guid isPermaLink="false">http://blog.liobio.cn/wp-content/uploads/2021/03/on.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>60</wp:post_id>
		<wp:post_date><![CDATA[2021-03-30 17:19:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-03-30 09:19:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[on]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://blog.liobio.cn/wp-content/uploads/2021/03/on.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/03/on.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:86;s:6:"height";i:80;s:4:"file";s:14:"2021/03/on.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>in</title>
		<link>http://blog.liobio.cn/in/</link>
		<pubDate>Tue, 30 Mar 2021 09:19:43 +0000</pubDate>
		<dc:creator><![CDATA[liobio]]></dc:creator>
		<guid isPermaLink="false">http://blog.liobio.cn/wp-content/uploads/2021/03/in.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>61</wp:post_id>
		<wp:post_date><![CDATA[2021-03-30 17:19:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-03-30 09:19:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[in]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://blog.liobio.cn/wp-content/uploads/2021/03/in.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/03/in.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:49;s:6:"height";i:50;s:4:"file";s:14:"2021/03/in.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>高-压-锅-说-唱-1.《后撤步7777》Av801863827P1</title>
		<link>http://blog.liobio.cn/index.php/%e5%85%a8%e6%96%b0umoma%e5%bc%80%e9%97%a8%e8%bf%8e%e5%ae%a2-2/%e9%ab%98-%e5%8e%8b-%e9%94%85-%e8%af%b4-%e5%94%b1-1-%e3%80%8a%e5%90%8e%e6%92%a4%e6%ad%a57777%e3%80%8bav801863827p1/</link>
		<pubDate>Tue, 30 Mar 2021 15:03:39 +0000</pubDate>
		<dc:creator><![CDATA[liobio]]></dc:creator>
		<guid isPermaLink="false">http://blog.liobio.cn/wp-content/uploads/2021/03/高-压-锅-说-唱-1.《后撤步7777》Av801863827P1.mp3</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>65</wp:post_id>
		<wp:post_date><![CDATA[2021-03-30 23:03:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-03-30 15:03:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e9%ab%98-%e5%8e%8b-%e9%94%85-%e8%af%b4-%e5%94%b1-1-%e3%80%8a%e5%90%8e%e6%92%a4%e6%ad%a57777%e3%80%8bav801863827p1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>6</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://blog.liobio.cn/wp-content/uploads/2021/03/高-压-锅-说-唱-1.《后撤步7777》Av801863827P1.mp3]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/03/高-压-锅-说-唱-1.《后撤步7777》Av801863827P1.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"mp3";s:8:"channels";i:2;s:11:"sample_rate";i:44100;s:7:"bitrate";d:128012.56054764728;s:11:"channelmode";s:6:"stereo";s:12:"bitrate_mode";s:3:"vbr";s:8:"lossless";b:0;s:15:"encoder_options";s:3:"VBR";s:17:"compression_ratio";d:0.090711848460634417;s:10:"fileformat";s:3:"mp3";s:8:"filesize";i:2114721;s:9:"mime_type";s:10:"audio/mpeg";s:6:"length";i:132;s:16:"length_formatted";s:4:"2:12";s:4:"text";s:40:"Bilibili VXCode Swarm Transcoder v0.3.65";s:16:"encoder_settings";s:13:"Lavf58.20.100";}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>닉쿤-尼坤-Let-It-Rain-clip</title>
		<link>http://blog.liobio.cn/index.php/%e5%85%a8%e6%96%b0umoma%e5%bc%80%e9%97%a8%e8%bf%8e%e5%ae%a2-2/%eb%8b%89%ec%bf%a4-%e5%b0%bc%e5%9d%a4-let-it-rain-clip/</link>
		<pubDate>Tue, 30 Mar 2021 15:29:09 +0000</pubDate>
		<dc:creator><![CDATA[liobio]]></dc:creator>
		<guid isPermaLink="false">http://blog.liobio.cn/wp-content/uploads/2021/03/닉쿤-尼坤-Let-It-Rain-clip.mp3</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>67</wp:post_id>
		<wp:post_date><![CDATA[2021-03-30 23:29:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-03-30 15:29:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%eb%8b%89%ec%bf%a4-%e5%b0%bc%e5%9d%a4-let-it-rain-clip]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>6</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://blog.liobio.cn/wp-content/uploads/2021/03/닉쿤-尼坤-Let-It-Rain-clip.mp3]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/03/닉쿤-尼坤-Let-It-Rain-clip.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:22:{s:10:"dataformat";s:3:"mp3";s:8:"channels";i:2;s:11:"sample_rate";i:44100;s:7:"bitrate";d:206012.77717391303;s:11:"channelmode";s:12:"joint stereo";s:12:"bitrate_mode";s:3:"vbr";s:5:"codec";s:4:"LAME";s:7:"encoder";s:9:"LAME3.99r";s:8:"lossless";b:0;s:15:"encoder_options";s:43:"--preset fast standard -b32 --lowpass 18500";s:17:"compression_ratio";d:0.14598411080917872;s:10:"fileformat";s:3:"mp3";s:8:"filesize";i:774922;s:9:"mime_type";s:10:"audio/mpeg";s:6:"length";i:30;s:16:"length_formatted";s:4:"0:30";s:5:"album";s:33:"2PM 3rd Album Grown_Grand Edition";s:6:"artist";s:15:"닉쿤 (尼坤)";s:5:"genre";s:5:"Blues";s:4:"text";s:14:"48854804885480";s:5:"title";s:11:"Let It Rain";s:12:"track_number";s:1:"5";}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>1.More-Than-A-Feeling-BostonAv15930620P1</title>
		<link>http://blog.liobio.cn/index.php/%e5%85%a8%e6%96%b0umoma%e5%bc%80%e9%97%a8%e8%bf%8e%e5%ae%a2-2/1-more-than-a-feeling-bostonav15930620p1/</link>
		<pubDate>Sun, 25 Apr 2021 04:55:44 +0000</pubDate>
		<dc:creator><![CDATA[liobio]]></dc:creator>
		<guid isPermaLink="false">http://blog.liobio.cn/wp-content/uploads/2021/04/1.More-Than-A-Feeling-BostonAv15930620P1.mp3</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>74</wp:post_id>
		<wp:post_date><![CDATA[2021-04-25 12:55:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-04-25 04:55:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[1-more-than-a-feeling-bostonav15930620p1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>6</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://blog.liobio.cn/wp-content/uploads/2021/04/1.More-Than-A-Feeling-BostonAv15930620P1.mp3]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/04/1.More-Than-A-Feeling-BostonAv15930620P1.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"mp3";s:8:"channels";i:2;s:11:"sample_rate";i:44100;s:7:"bitrate";d:128007.85297927461;s:11:"channelmode";s:6:"stereo";s:12:"bitrate_mode";s:3:"vbr";s:8:"lossless";b:0;s:15:"encoder_options";s:3:"VBR";s:17:"compression_ratio";d:0.090708512598692323;s:10:"fileformat";s:3:"mp3";s:8:"filesize";i:3388664;s:9:"mime_type";s:10:"audio/mpeg";s:6:"length";i:212;s:16:"length_formatted";s:4:"3:32";s:4:"text";s:40:"Bilibili VXCode Swarm Transcoder v0.3.39";s:16:"encoder_settings";s:13:"Lavf58.20.100";}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>微信图片_20210507213347</title>
		<link>http://blog.liobio.cn/%e5%be%ae%e4%bf%a1%e5%9b%be%e7%89%87_20210507213347-2/</link>
		<pubDate>Fri, 07 May 2021 13:35:43 +0000</pubDate>
		<dc:creator><![CDATA[liobio]]></dc:creator>
		<guid isPermaLink="false">http://blog.liobio.cn/wp-content/uploads/2021/05/微信图片_20210507213347-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>79</wp:post_id>
		<wp:post_date><![CDATA[2021-05-07 21:35:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-05-07 13:35:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%be%ae%e4%bf%a1%e5%9b%be%e7%89%87_20210507213347-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://blog.liobio.cn/wp-content/uploads/2021/05/微信图片_20210507213347-1-e1620394612735.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/05/微信图片_20210507213347-1-e1620394612735.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:543;s:6:"height";i:550;s:4:"file";s:56:"2021/05/微信图片_20210507213347-1-e1620394612735.png";s:5:"sizes";a:3:{s:6:"medium";a:4:{s:4:"file";s:56:"微信图片_20210507213347-1-e1620394612735-296x300.png";s:5:"width";i:296;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:42:"微信图片_20210507213347-1-576x1024.png";s:5:"width";i:576;s:6:"height";i:1024;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:56:"微信图片_20210507213347-1-e1620394612735-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_backup_sizes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:4:{s:9:"full-orig";a:3:{s:5:"width";i:750;s:6:"height";i:1334;s:4:"file";s:33:"微信图片_20210507213347-1.png";}s:14:"thumbnail-orig";a:4:{s:4:"file";s:41:"微信图片_20210507213347-1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:11:"medium-orig";a:4:{s:4:"file";s:41:"微信图片_20210507213347-1-169x300.png";s:5:"width";i:169;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:10:"large-orig";a:4:{s:4:"file";s:42:"微信图片_20210507213347-1-576x1024.png";s:5:"width";i:576;s:6:"height";i:1024;s:9:"mime-type";s:9:"image/png";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>QQ截图20210507213954</title>
		<link>http://blog.liobio.cn/index.php/%e8%81%94%e7%b3%bb/qq%e6%88%aa%e5%9b%be20210507213954/</link>
		<pubDate>Fri, 07 May 2021 13:40:01 +0000</pubDate>
		<dc:creator><![CDATA[liobio]]></dc:creator>
		<guid isPermaLink="false">http://blog.liobio.cn/wp-content/uploads/2021/05/QQ截图20210507213954.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>80</wp:post_id>
		<wp:post_date><![CDATA[2021-05-07 21:40:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-05-07 13:40:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[qq%e6%88%aa%e5%9b%be20210507213954]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>8</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://blog.liobio.cn/wp-content/uploads/2021/05/QQ截图20210507213954.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/05/QQ截图20210507213954.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:282;s:6:"height";i:283;s:4:"file";s:34:"2021/05/QQ截图20210507213954.jpg";s:5:"sizes";a:1:{s:9:"thumbnail";a:4:{s:4:"file";s:34:"QQ截图20210507213954-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>QQ截图20210507213954-1</title>
		<link>http://blog.liobio.cn/index.php/%e8%81%94%e7%b3%bb/qq%e6%88%aa%e5%9b%be20210507213954-1/</link>
		<pubDate>Fri, 07 May 2021 13:41:33 +0000</pubDate>
		<dc:creator><![CDATA[liobio]]></dc:creator>
		<guid isPermaLink="false">http://blog.liobio.cn/wp-content/uploads/2021/05/QQ截图20210507213954-1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>81</wp:post_id>
		<wp:post_date><![CDATA[2021-05-07 21:41:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-05-07 13:41:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[qq%e6%88%aa%e5%9b%be20210507213954-1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>8</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://blog.liobio.cn/wp-content/uploads/2021/05/QQ截图20210507213954-1.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/05/QQ截图20210507213954-1.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:282;s:6:"height";i:283;s:4:"file";s:36:"2021/05/QQ截图20210507213954-1.jpg";s:5:"sizes";a:1:{s:9:"thumbnail";a:4:{s:4:"file";s:36:"QQ截图20210507213954-1-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>QQ截图20210507213954-2</title>
		<link>http://blog.liobio.cn/index.php/%e8%81%94%e7%b3%bb/qq%e6%88%aa%e5%9b%be20210507213954-2/</link>
		<pubDate>Fri, 07 May 2021 13:42:35 +0000</pubDate>
		<dc:creator><![CDATA[liobio]]></dc:creator>
		<guid isPermaLink="false">http://blog.liobio.cn/wp-content/uploads/2021/05/QQ截图20210507213954-2.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>82</wp:post_id>
		<wp:post_date><![CDATA[2021-05-07 21:42:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-05-07 13:42:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[qq%e6%88%aa%e5%9b%be20210507213954-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>8</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://blog.liobio.cn/wp-content/uploads/2021/05/QQ截图20210507213954-2.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/05/QQ截图20210507213954-2.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:282;s:6:"height";i:283;s:4:"file";s:36:"2021/05/QQ截图20210507213954-2.jpg";s:5:"sizes";a:1:{s:9:"thumbnail";a:4:{s:4:"file";s:36:"QQ截图20210507213954-2-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>in</title>
		<link>http://blog.liobio.cn/index.php/%e8%81%94%e7%b3%bb/in-2/</link>
		<pubDate>Fri, 07 May 2021 13:45:11 +0000</pubDate>
		<dc:creator><![CDATA[liobio]]></dc:creator>
		<guid isPermaLink="false">http://blog.liobio.cn/wp-content/uploads/2021/05/in.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>83</wp:post_id>
		<wp:post_date><![CDATA[2021-05-07 21:45:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-05-07 13:45:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[in-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>8</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://blog.liobio.cn/wp-content/uploads/2021/05/in.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/05/in.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:49;s:6:"height";i:50;s:4:"file";s:14:"2021/05/in.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>QQ截图20210507220001</title>
		<link>http://blog.liobio.cn/index.php/%e8%81%94%e7%b3%bb/qq%e6%88%aa%e5%9b%be20210507220001/</link>
		<pubDate>Fri, 07 May 2021 14:00:08 +0000</pubDate>
		<dc:creator><![CDATA[liobio]]></dc:creator>
		<guid isPermaLink="false">http://blog.liobio.cn/wp-content/uploads/2021/05/QQ截图20210507220001.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>84</wp:post_id>
		<wp:post_date><![CDATA[2021-05-07 22:00:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-05-07 14:00:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[qq%e6%88%aa%e5%9b%be20210507220001]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>8</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://blog.liobio.cn/wp-content/uploads/2021/05/QQ截图20210507220001.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/05/QQ截图20210507220001.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:117;s:6:"height";i:23;s:4:"file";s:34:"2021/05/QQ截图20210507220001.jpg";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>首页</title>
		<link>http://blog.liobio.cn/index.php/2021/03/30/%e9%a6%96%e9%a1%b5/</link>
		<pubDate>Tue, 30 Mar 2021 05:41:52 +0000</pubDate>
		<dc:creator><![CDATA[liobio]]></dc:creator>
		<guid isPermaLink="false">http://blog.liobio.cn/index.php/2021/03/30/%e9%a6%96%e9%a1%b5/</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>25</wp:post_id>
		<wp:post_date><![CDATA[2021-03-30 13:41:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-03-30 05:41:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e9%a6%96%e9%a1%b5]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="nav_menu" nicename="%e4%b8%bb"><![CDATA[主]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[25]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
		<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[http://blog.liobio.cn/]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title></title>
		<link>http://blog.liobio.cn/index.php/2021/03/30/26/</link>
		<pubDate>Tue, 30 Mar 2021 05:41:52 +0000</pubDate>
		<dc:creator><![CDATA[liobio]]></dc:creator>
		<guid isPermaLink="false">http://blog.liobio.cn/index.php/2021/03/30/26/</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>26</wp:post_id>
		<wp:post_date><![CDATA[2021-03-30 13:41:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-03-30 05:41:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[26]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>13</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="nav_menu" nicename="%e4%b8%bb"><![CDATA[主]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[post_type]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[7]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
		<wp:meta_value><![CDATA[page]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title></title>
		<link>http://blog.liobio.cn/index.php/2021/03/30/27/</link>
		<pubDate>Tue, 30 Mar 2021 05:41:52 +0000</pubDate>
		<dc:creator><![CDATA[liobio]]></dc:creator>
		<guid isPermaLink="false">http://blog.liobio.cn/index.php/2021/03/30/27/</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>27</wp:post_id>
		<wp:post_date><![CDATA[2021-03-30 13:41:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-03-30 05:41:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[27]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="nav_menu" nicename="%e4%b8%bb"><![CDATA[主]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[post_type]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[9]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
		<wp:meta_value><![CDATA[page]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title></title>
		<link>http://blog.liobio.cn/index.php/2021/03/30/28/</link>
		<pubDate>Tue, 30 Mar 2021 05:41:52 +0000</pubDate>
		<dc:creator><![CDATA[liobio]]></dc:creator>
		<guid isPermaLink="false">http://blog.liobio.cn/index.php/2021/03/30/28/</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>28</wp:post_id>
		<wp:post_date><![CDATA[2021-03-30 13:41:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-03-30 05:41:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[28]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>12</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="nav_menu" nicename="%e4%b8%bb"><![CDATA[主]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[post_type]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[8]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
		<wp:meta_value><![CDATA[page]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>异次元世界</title>
		<link>http://blog.liobio.cn/index.php/2021/03/30/%e5%bc%82%e6%ac%a1%e5%85%83%e4%b8%96%e7%95%8c/</link>
		<pubDate>Tue, 30 Mar 2021 06:01:34 +0000</pubDate>
		<dc:creator><![CDATA[liobio]]></dc:creator>
		<guid isPermaLink="false">http://blog.liobio.cn/index.php/2021/03/30/%e5%bc%82%e6%ac%a1%e5%85%83%e4%b8%96%e7%95%8c/</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>38</wp:post_id>
		<wp:post_date><![CDATA[2021-03-30 14:01:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-03-30 06:01:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%bc%82%e6%ac%a1%e5%85%83%e4%b8%96%e7%95%8c]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>9</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="nav_menu" nicename="%e4%b8%bb"><![CDATA[主]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[38]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
		<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>程序猿摸鱼专属栏目</title>
		<link>http://blog.liobio.cn/index.php/2021/03/30/%e7%a8%8b%e5%ba%8f%e7%8c%bf%e6%91%b8%e9%b1%bc%e4%b8%93%e5%b1%9e%e6%a0%8f%e7%9b%ae/</link>
		<pubDate>Tue, 30 Mar 2021 06:01:34 +0000</pubDate>
		<dc:creator><![CDATA[liobio]]></dc:creator>
		<guid isPermaLink="false">http://blog.liobio.cn/index.php/2021/03/30/%e7%a8%8b%e5%ba%8f%e7%8c%bf%e6%91%b8%e9%b1%bc%e4%b8%93%e5%b1%9e%e6%a0%8f%e7%9b%ae/</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>39</wp:post_id>
		<wp:post_date><![CDATA[2021-03-30 14:01:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-03-30 06:01:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%a8%8b%e5%ba%8f%e7%8c%bf%e6%91%b8%e9%b1%bc%e4%b8%93%e5%b1%9e%e6%a0%8f%e7%9b%ae]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>10</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="nav_menu" nicename="%e4%b8%bb"><![CDATA[主]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[38]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[39]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
		<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://www.csdn.net/]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>大帅哥的B站主页</title>
		<link>http://blog.liobio.cn/index.php/2021/03/30/%e5%a4%a7%e5%b8%85%e5%93%a5%e7%9a%84b%e7%ab%99%e4%b8%bb%e9%a1%b5/</link>
		<pubDate>Tue, 30 Mar 2021 06:01:35 +0000</pubDate>
		<dc:creator><![CDATA[liobio]]></dc:creator>
		<guid isPermaLink="false">http://blog.liobio.cn/index.php/2021/03/30/%e5%a4%a7%e5%b8%85%e5%93%a5%e7%9a%84b%e7%ab%99%e4%b8%bb%e9%a1%b5/</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>40</wp:post_id>
		<wp:post_date><![CDATA[2021-03-30 14:01:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-03-30 06:01:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%a4%a7%e5%b8%85%e5%93%a5%e7%9a%84b%e7%ab%99%e4%b8%bb%e9%a1%b5]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>11</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="nav_menu" nicename="%e4%b8%bb"><![CDATA[主]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[38]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[40]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
		<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://space.bilibili.com/17236901]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title></title>
		<link>http://blog.liobio.cn/index.php/2021/03/30/46/</link>
		<pubDate>Tue, 30 Mar 2021 06:28:35 +0000</pubDate>
		<dc:creator><![CDATA[liobio]]></dc:creator>
		<guid isPermaLink="false">http://blog.liobio.cn/index.php/2021/03/30/46/</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>46</wp:post_id>
		<wp:post_date><![CDATA[2021-03-30 14:28:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-03-30 06:28:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[46]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>6</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="nav_menu" nicename="%e4%b8%bb"><![CDATA[主]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[taxonomy]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[27]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
		<wp:meta_value><![CDATA[category]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title></title>
		<link>http://blog.liobio.cn/index.php/2021/03/30/50/</link>
		<pubDate>Tue, 30 Mar 2021 06:28:36 +0000</pubDate>
		<dc:creator><![CDATA[liobio]]></dc:creator>
		<guid isPermaLink="false">http://blog.liobio.cn/index.php/2021/03/30/50/</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>50</wp:post_id>
		<wp:post_date><![CDATA[2021-03-30 14:28:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-03-30 06:28:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[50]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>1</wp:post_parent>
		<wp:menu_order>7</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="nav_menu" nicename="%e4%b8%bb"><![CDATA[主]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[taxonomy]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[46]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[6]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
		<wp:meta_value><![CDATA[category]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>是男人就坚持!</title>
		<link>http://blog.liobio.cn/index.php/2021/04/01/%e6%98%af%e7%94%b7%e4%ba%ba%e5%b0%b1%e5%9d%9a%e6%8c%81/</link>
		<pubDate>Thu, 01 Apr 2021 03:41:13 +0000</pubDate>
		<dc:creator><![CDATA[liobio]]></dc:creator>
		<guid isPermaLink="false">http://blog.liobio.cn/index.php/2021/04/01/%e6%98%af%e7%94%b7%e4%ba%ba%e5%b0%b1%e5%9d%9a%e6%8c%81/</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>72</wp:post_id>
		<wp:post_date><![CDATA[2021-04-01 11:41:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-04-01 03:41:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%98%af%e7%94%b7%e4%ba%ba%e5%b0%b1%e5%9d%9a%e6%8c%81]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>14</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="nav_menu" nicename="%e4%b8%bb"><![CDATA[主]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[71]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[72]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
		<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[http://test.liobio.cn/]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title></title>
		<link>http://blog.liobio.cn/index.php/2021/06/18/108/</link>
		<pubDate>Fri, 18 Jun 2021 11:52:07 +0000</pubDate>
		<dc:creator><![CDATA[liobio]]></dc:creator>
		<guid isPermaLink="false">http://blog.liobio.cn/?p=108</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>108</wp:post_id>
		<wp:post_date><![CDATA[2021-06-18 19:52:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-06-18 11:52:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[108]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>5</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="nav_menu" nicename="%e4%b8%bb"><![CDATA[主]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[taxonomy]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[27]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
		<wp:meta_value><![CDATA[category]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>image</title>
		<link>http://blog.liobio.cn/index.php/2021/06/29/html%e6%80%bb%e7%bb%93%ef%bc%88%e4%ba%8c%ef%bc%89/image/</link>
		<pubDate>Tue, 29 Jun 2021 09:27:41 +0000</pubDate>
		<dc:creator><![CDATA[liobio]]></dc:creator>
		<guid isPermaLink="false">http://blog.liobio.cn/wp-content/uploads/2021/06/image.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>167</wp:post_id>
		<wp:post_date><![CDATA[2021-06-29 17:27:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-06-29 09:27:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>163</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://blog.liobio.cn/wp-content/uploads/2021/06/image.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/06/image.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:186;s:6:"height";i:58;s:4:"file";s:17:"2021/06/image.png";s:5:"sizes";a:1:{s:9:"thumbnail";a:4:{s:4:"file";s:16:"image-150x58.png";s:5:"width";i:150;s:6:"height";i:58;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>image-1</title>
		<link>http://blog.liobio.cn/index.php/2021/06/29/html%e6%80%bb%e7%bb%93%ef%bc%88%e4%ba%8c%ef%bc%89/image-1/</link>
		<pubDate>Tue, 29 Jun 2021 09:29:11 +0000</pubDate>
		<dc:creator><![CDATA[liobio]]></dc:creator>
		<guid isPermaLink="false">http://blog.liobio.cn/wp-content/uploads/2021/06/image-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>168</wp:post_id>
		<wp:post_date><![CDATA[2021-06-29 17:29:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-06-29 09:29:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image-1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>163</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://blog.liobio.cn/wp-content/uploads/2021/06/image-1.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/06/image-1.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:213;s:6:"height";i:73;s:4:"file";s:19:"2021/06/image-1.png";s:5:"sizes";a:1:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"image-1-150x73.png";s:5:"width";i:150;s:6:"height";i:73;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>image-2</title>
		<link>http://blog.liobio.cn/index.php/2021/06/29/html%e6%80%bb%e7%bb%93%ef%bc%88%e4%ba%8c%ef%bc%89/image-2/</link>
		<pubDate>Tue, 29 Jun 2021 09:30:12 +0000</pubDate>
		<dc:creator><![CDATA[liobio]]></dc:creator>
		<guid isPermaLink="false">http://blog.liobio.cn/wp-content/uploads/2021/06/image-2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>169</wp:post_id>
		<wp:post_date><![CDATA[2021-06-29 17:30:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-06-29 09:30:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>163</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://blog.liobio.cn/wp-content/uploads/2021/06/image-2.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/06/image-2.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:354;s:6:"height";i:361;s:4:"file";s:19:"2021/06/image-2.png";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:19:"image-2-294x300.png";s:5:"width";i:294;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:19:"image-2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>image-3</title>
		<link>http://blog.liobio.cn/index.php/2021/06/29/html%e6%80%bb%e7%bb%93%ef%bc%88%e4%ba%8c%ef%bc%89/image-3/</link>
		<pubDate>Tue, 29 Jun 2021 09:30:56 +0000</pubDate>
		<dc:creator><![CDATA[liobio]]></dc:creator>
		<guid isPermaLink="false">http://blog.liobio.cn/wp-content/uploads/2021/06/image-3.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>170</wp:post_id>
		<wp:post_date><![CDATA[2021-06-29 17:30:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-06-29 09:30:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image-3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>163</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://blog.liobio.cn/wp-content/uploads/2021/06/image-3.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/06/image-3.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:177;s:6:"height";i:53;s:4:"file";s:19:"2021/06/image-3.png";s:5:"sizes";a:1:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"image-3-150x53.png";s:5:"width";i:150;s:6:"height";i:53;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>image-4</title>
		<link>http://blog.liobio.cn/index.php/2021/06/29/html%e6%80%bb%e7%bb%93%ef%bc%88%e4%ba%8c%ef%bc%89/image-4/</link>
		<pubDate>Tue, 29 Jun 2021 10:59:22 +0000</pubDate>
		<dc:creator><![CDATA[liobio]]></dc:creator>
		<guid isPermaLink="false">http://blog.liobio.cn/wp-content/uploads/2021/06/image-4.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>171</wp:post_id>
		<wp:post_date><![CDATA[2021-06-29 18:59:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-06-29 10:59:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image-4]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>163</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://blog.liobio.cn/wp-content/uploads/2021/06/image-4.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/06/image-4.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:500;s:6:"height";i:500;s:4:"file";s:19:"2021/06/image-4.png";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:19:"image-4-300x300.png";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:19:"image-4-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>image</title>
		<link>http://blog.liobio.cn/index.php/2021/07/23/spring%ef%bc%88%e4%b8%80%ef%bc%89/image-5/</link>
		<pubDate>Fri, 23 Jul 2021 09:08:19 +0000</pubDate>
		<dc:creator><![CDATA[liobio]]></dc:creator>
		<guid isPermaLink="false">http://blog.liobio.cn/wp-content/uploads/2021/07/image.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>203</wp:post_id>
		<wp:post_date><![CDATA[2021-07-23 17:08:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-07-23 09:08:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image-5]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>202</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://blog.liobio.cn/wp-content/uploads/2021/07/image.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/07/image.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1370;s:6:"height";i:408;s:4:"file";s:17:"2021/07/image.png";s:5:"sizes";a:5:{s:6:"medium";a:4:{s:4:"file";s:16:"image-300x89.png";s:5:"width";i:300;s:6:"height";i:89;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:18:"image-1024x305.png";s:5:"width";i:1024;s:6:"height";i:305;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:17:"image-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:17:"image-768x229.png";s:5:"width";i:768;s:6:"height";i:229;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:18:"image-1200x357.png";s:5:"width";i:1200;s:6:"height";i:357;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>image</title>
		<link>http://blog.liobio.cn/index.php/2021/10/22/java%e9%9b%86%e5%90%88%e9%9d%a2%e8%af%95%e9%a2%98/image-6/</link>
		<pubDate>Thu, 21 Oct 2021 17:12:53 +0000</pubDate>
		<dc:creator><![CDATA[liobio]]></dc:creator>
		<guid isPermaLink="false">http://blog.liobio.cn/wp-content/uploads/2021/10/image.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>247</wp:post_id>
		<wp:post_date><![CDATA[2021-10-22 01:12:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-10-21 17:12:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image-6]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>245</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://blog.liobio.cn/wp-content/uploads/2021/10/image.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/10/image.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:547;s:6:"height";i:189;s:4:"file";s:17:"2021/10/image.png";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:17:"image-300x104.png";s:5:"width";i:300;s:6:"height";i:104;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:17:"image-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>image-1</title>
		<link>http://blog.liobio.cn/index.php/2021/10/22/java%e9%9b%86%e5%90%88%e9%9d%a2%e8%af%95%e9%a2%98/image-1-2/</link>
		<pubDate>Thu, 21 Oct 2021 17:13:01 +0000</pubDate>
		<dc:creator><![CDATA[liobio]]></dc:creator>
		<guid isPermaLink="false">http://blog.liobio.cn/wp-content/uploads/2021/10/image-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>248</wp:post_id>
		<wp:post_date><![CDATA[2021-10-22 01:13:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-10-21 17:13:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image-1-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>245</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://blog.liobio.cn/wp-content/uploads/2021/10/image-1.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/10/image-1.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:534;s:6:"height";i:336;s:4:"file";s:19:"2021/10/image-1.png";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:19:"image-1-300x189.png";s:5:"width";i:300;s:6:"height";i:189;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:19:"image-1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>image-2</title>
		<link>http://blog.liobio.cn/index.php/2021/10/22/java%e9%9b%86%e5%90%88%e9%9d%a2%e8%af%95%e9%a2%98/image-2-2/</link>
		<pubDate>Thu, 21 Oct 2021 17:39:22 +0000</pubDate>
		<dc:creator><![CDATA[liobio]]></dc:creator>
		<guid isPermaLink="false">http://blog.liobio.cn/wp-content/uploads/2021/10/image-2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>250</wp:post_id>
		<wp:post_date><![CDATA[2021-10-22 01:39:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-10-21 17:39:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image-2-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>245</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://blog.liobio.cn/wp-content/uploads/2021/10/image-2.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/10/image-2.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:975;s:6:"height";i:583;s:4:"file";s:19:"2021/10/image-2.png";s:5:"sizes";a:3:{s:6:"medium";a:4:{s:4:"file";s:19:"image-2-300x179.png";s:5:"width";i:300;s:6:"height";i:179;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:19:"image-2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:19:"image-2-768x459.png";s:5:"width";i:768;s:6:"height";i:459;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>[python]简单的获取网页图片</title>
		<link>http://blog.liobio.cn/index.php/2021/03/30/get-web-picture/</link>
		<pubDate>Tue, 30 Mar 2021 05:06:54 +0000</pubDate>
		<dc:creator><![CDATA[liobio]]></dc:creator>
		<guid isPermaLink="false">http://blog.liobio.cn/?p=1</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:html -->
[cc lang="python"]
import os
import re
import requests

def get_href(url_text):
#获取下一页的url,通过网页布局的规律寻找
    href=re.findall(r' href="(.*?)"><span><i class="fa fa-arrow-right',url_text)
    return href[0]

def dowmloadPicture_list(url_text):
    
    title= re.findall(r'text-white">(.*?)</h4>',url_text)
    pic_url = re.findall(r'<img src="(.*?)" width="', url_text)  
    child_path=str(title[0])
    child_path=child_path.replace(" ","")
    child_path=child_path.replace(":","")
    child_path=child_path.replace("?","")
    path = 'C:\\Users\\LIOBIO\\Desktop\\test\\'+child_path
   
    
    if not os.path.exists(path):
        os.makedirs(path)
    else:
        print("文件夹已存在")
        return
    
    try:
        numPicture=len(pic_url)
    except BaseException:
        print("网站不见啦")
        return
    print('找到:' + title[0] + '的'+str(numPicture)+'图片，即将开始下载图片...')
    
    num=1
    for each in pic_url:
        
        print('正在下载第' + str(num) + '张图片，图片地址:' + str(each))
        try:
            if each is not None:
                pic = requests.get(each, timeout=7)
            else:
                continue
        except BaseException:
            print('错误，当前图片无法下载')
            continue
        if num <= int(len(pic_url)):
            string =path+'\\'+child_path+str(num) + '.jpg'
            fp = open(string,'wb')
            fp.write(pic.content)
            fp.close()
            num += 1
        else:
            
            return
      

        

if __name__ == '__main__':
    
    r = requests.get('http://blog.liobio.cn/')   #起始页面
    text=r.text    
    total=100                                           #设置下载资源的数量
    
    while total>0:
        dowmloadPicture_list(text)
        next_url='http://blog.liobio.cn/'+get_href(text)       #获取下一页的url
        fp = open('C:\\Users\\LIOBIO\\Desktop\\小福利\\url.txt','w', encoding='utf-8')
        fp.write(str(next_url))
        fp.close()   
        text=requests.get(next_url).text                #获取下一页的html文本
        total-=1
        
    print("下载结束")
[/cc]
<!-- /wp:html -->]]></content:encoded>
		<excerpt:encoded><![CDATA[简单的获取网页图片详细代码]]></excerpt:encoded>
		<wp:post_id>1</wp:post_id>
		<wp:post_date><![CDATA[2021-03-30 13:06:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-03-30 05:06:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[get-web-picture]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="python"><![CDATA[python]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[hello-world]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[13]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>示例页面</title>
		<link>http://blog.liobio.cn/index.php/sample-page/</link>
		<pubDate>Tue, 30 Mar 2021 05:06:54 +0000</pubDate>
		<dc:creator><![CDATA[liobio]]></dc:creator>
		<guid isPermaLink="false">http://blog.liobio.cn/?page_id=2</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>这是示范页面。页面和博客文章不同，它的位置是固定的，通常会在站点导航栏显示。很多用户都创建一个“关于”页面，向访客介绍自己。例如：</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>欢迎！我白天是个邮递员，晚上就是个有抱负的演员。这是我的网站。我住在天朝的帝都，有条叫做Jack的狗。</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>……或这个：</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>XYZ Doohickey公司成立于1971年，自从建立以来，我们一直向社会贡献着优秀doohickies。我们的公司总部位于天朝魔都，有着超过两千名员工，对魔都政府税收有着巨大贡献。</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>而您，作为一个WordPress用户，我们建议您访问<a href="http://blog.liobio.cn/wp-admin/">控制板</a>，删除本页面，然后添加您自己的页面。祝您使用愉快！</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2</wp:post_id>
		<wp:post_date><![CDATA[2021-03-30 13:06:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-03-30 05:06:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[sample-page]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>隐私政策</title>
		<link>http://blog.liobio.cn/?page_id=3</link>
		<pubDate>Tue, 30 Mar 2021 05:06:54 +0000</pubDate>
		<dc:creator><![CDATA[liobio]]></dc:creator>
		<guid isPermaLink="false">http://blog.liobio.cn/?page_id=3</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading --><h2>我们是谁</h2><!-- /wp:heading --><!-- wp:paragraph --><p>我们的站点地址是：http://blog.liobio.cn。</p><!-- /wp:paragraph --><!-- wp:heading --><h2>我们收集何种及为何收集个人数据</h2><!-- /wp:heading --><!-- wp:heading {"level":3} --><h3>评论</h3><!-- /wp:heading --><!-- wp:paragraph --><p>当访客留下评论时，我们会收集评论表单所显示的数据，和访客的IP地址及浏览器的user agent字符串来帮助检查垃圾评论。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>由您的电子邮件地址所生成的匿名化字符串（又称为哈希）可能会被提供给Gravatar服务确认您是否有使用该服务。Gravatar服务的隐私政策在此：https://automattic.com/privacy/。在您的评论获批准后，您的资料图片将在您的评论旁公开展示。</p><!-- /wp:paragraph --><!-- wp:heading {"level":3} --><h3>媒体</h3><!-- /wp:heading --><!-- wp:paragraph --><p>如果您向此网站上传图片，您应当避免上传那些有嵌入地理位置信息（EXIF GPS）的图片。此网站的访客将可以下载并提取此网站的图片中的位置信息。</p><!-- /wp:paragraph --><!-- wp:heading {"level":3} --><h3>联系表单</h3><!-- /wp:heading --><!-- wp:heading {"level":3} --><h3>Cookies</h3><!-- /wp:heading --><!-- wp:paragraph --><p>如果您在我们的站点上留下评论，您可以选择用cookies保存您的姓名、电子邮件地址和网站。这是通过让您可以不用在评论时再次填写相关内容而向您提供方便。这些cookies会保留一年。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>如果您访问我们的登录页，我们会设置一个临时的cookie来确认您的浏览器是否接受cookies。此cookie不包含个人数据，且会在您关闭浏览器时被丢弃。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>当您登录时，我们也会设置多个cookies来保存您的登录信息及屏幕显示选项。登录cookies会保留两天，而屏幕显示选项cookies会保留一年。如果您选择了“记住我”，您的登录会保留两周。如果您注销，登录cookies将被移除。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>如果您编辑或发布文章，我们会在您的浏览器中保存一个额外的cookie。这个cookie不包含个人数据而只记录了您刚才编辑的文章的ID。这个小甜饼会保留一天。</p><!-- /wp:paragraph --><!-- wp:heading {"level":3} --><h3>其他站点的嵌入内容</h3><!-- /wp:heading --><!-- wp:paragraph --><p>此站点上的文章可能会包含嵌入的内容（如视频、图像、文章等）。来自其他站点的嵌入内容的行为和您直接访问这些其他站点没有区别。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>这些站点可能会收集关于您的数据、使用cookies、嵌入额外的第三方跟踪程序及监视您与这些嵌入内容的交互，包括在您有这些站点的账户并登录了这些站点时，跟踪您与嵌入内容的交互。</p><!-- /wp:paragraph --><!-- wp:heading {"level":3} --><h3>统计</h3><!-- /wp:heading --><!-- wp:heading --><h2>我们与谁共享您的信息</h2><!-- /wp:heading --><!-- wp:heading --><h2>我们保留多久您的信息</h2><!-- /wp:heading --><!-- wp:paragraph --><p>如果您留下评论，评论和其元数据将被无限期保存。我们这样做以便能识别并自动批准任何后续评论，而不用将这些后续评论加入待审队列。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>对于本网站的注册用户，我们也会保存用户在个人资料中提供的个人信息。所有用户可以在任何时候查看、编辑或删除他们的个人信息（除了不能变更用户名外）、站点管理员也可以查看及编辑那些信息。</p><!-- /wp:paragraph --><!-- wp:heading --><h2>您对您的信息有什么权利</h2><!-- /wp:heading --><!-- wp:paragraph --><p>如果您有此站点的账户，或曾经留下评论，您可以请求我们提供我们所拥有的您的个人数据的导出文件，这也包括了所有您提供给我们的数据。您也可以要求我们抹除所有关于您的个人数据。这不包括我们因管理、法规或安全需要而必须保留的数据。</p><!-- /wp:paragraph --><!-- wp:heading --><h2>我们将您的信息发送到哪</h2><!-- /wp:heading --><!-- wp:paragraph --><p>访客评论可能会被自动垃圾评论监测服务检查。</p><!-- /wp:paragraph --><!-- wp:heading --><h2>您的联系信息</h2><!-- /wp:heading --><!-- wp:heading --><h2>其他信息</h2><!-- /wp:heading --><!-- wp:heading {"level":3} --><h3>我们如何保护您的数据</h3><!-- /wp:heading --><!-- wp:heading {"level":3} --><h3>我们有何种数据泄露处理流程</h3><!-- /wp:heading --><!-- wp:heading {"level":3} --><h3>我们从哪些第三方接收数据</h3><!-- /wp:heading --><!-- wp:heading {"level":3} --><h3>我们通过用户数据进行何种自动决策及/或归纳</h3><!-- /wp:heading --><!-- wp:heading {"level":3} --><h3>行业监管披露要求</h3><!-- /wp:heading -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3</wp:post_id>
		<wp:post_date><![CDATA[2021-03-30 13:06:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-03-30 05:06:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[privacy-policy]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Welcome to LIOBIO   world</title>
		<link>http://blog.liobio.cn/</link>
		<pubDate>Tue, 30 Mar 2021 05:41:52 +0000</pubDate>
		<dc:creator><![CDATA[liobio]]></dc:creator>
		<guid isPermaLink="false">http://blog.liobio.cn/?page_id=6</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:group {"align":"wide"} -->
<div class="wp-block-group alignwide"><div class="wp-block-group__inner-container"><!-- wp:audio {"id":74} -->
<figure class="wp-block-audio"><audio controls src="http://blog.liobio.cn/wp-content/uploads/2021/04/1.More-Than-A-Feeling-BostonAv15930620P1.mp3"></audio><figcaption>More Than A Feeling-Boston</figcaption></figure>
<!-- /wp:audio --></div></div>
<!-- /wp:group -->

<!-- wp:heading {"align":"center","level":3,"textColor":"primary"} -->
<h3 class="has-primary-color has-text-color has-text-align-center">简单的记录点点滴滴</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6</wp:post_id>
		<wp:post_date><![CDATA[2021-03-30 13:41:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-03-30 05:41:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%85%a8%e6%96%b0umoma%e5%bc%80%e9%97%a8%e8%bf%8e%e5%ae%a2-2]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_customize_changeset_uuid]]></wp:meta_key>
		<wp:meta_value><![CDATA[e7b752e2-1cae-4e0a-a38f-4c780683c275]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[10027]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>关于</title>
		<link>http://blog.liobio.cn/index.php/%e5%85%b3%e4%ba%8e/</link>
		<pubDate>Tue, 30 Mar 2021 05:41:52 +0000</pubDate>
		<dc:creator><![CDATA[liobio]]></dc:creator>
		<guid isPermaLink="false">http://blog.liobio.cn/?page_id=7</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph {"align":"left"} -->
<p class="has-text-align-left">    这个网站仅仅用来学习...</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>7</wp:post_id>
		<wp:post_date><![CDATA[2021-03-30 13:41:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-03-30 05:41:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%85%b3%e4%ba%8e]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_customize_changeset_uuid]]></wp:meta_key>
		<wp:meta_value><![CDATA[e7b752e2-1cae-4e0a-a38f-4c780683c275]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[64]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>联系我</title>
		<link>http://blog.liobio.cn/index.php/%e8%81%94%e7%b3%bb/</link>
		<pubDate>Tue, 30 Mar 2021 05:41:52 +0000</pubDate>
		<dc:creator><![CDATA[liobio]]></dc:creator>
		<guid isPermaLink="false">http://blog.liobio.cn/?page_id=8</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:columns {"verticalAlignment":null} -->
<div class="wp-block-columns"><!-- wp:column {"verticalAlignment":"center","width":0} -->
<div class="wp-block-column is-vertically-aligned-center" style="flex-basis:0%"></div>
<!-- /wp:column -->

<!-- wp:column {"verticalAlignment":"center","width":100} -->
<div class="wp-block-column is-vertically-aligned-center" style="flex-basis:100%"><!-- wp:image {"align":"center","id":84,"width":175,"height":34,"sizeSlug":"large","className":"is-style-default"} -->
<div class="wp-block-image is-style-default"><figure class="aligncenter size-large is-resized"><img src="http://blog.liobio.cn/wp-content/uploads/2021/05/QQ截图20210507220001.jpg" alt="" class="wp-image-84" width="175" height="34"/></figure></div>
<!-- /wp:image -->

<!-- wp:button {"backgroundColor":"background","textColor":"accent","borderRadius":50,"align":"center","className":"is-style-outline"} -->
<div class="wp-block-button aligncenter is-style-outline"><a class="wp-block-button__link has-text-color has-accent-color has-background has-background-background-color" href="https://github.com/liobio" style="border-radius:50px" target="_blank" rel="noreferrer noopener">点击进入</a></div>
<!-- /wp:button -->

<!-- wp:paragraph {"align":"center","fontSize":"large"} -->
<p class="has-text-align-center has-large-font-size"><strong>github</strong></p>
<!-- /wp:paragraph --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>8</wp:post_id>
		<wp:post_date><![CDATA[2021-03-30 13:41:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-03-30 05:41:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%81%94%e7%b3%bb]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_customize_changeset_uuid]]></wp:meta_key>
		<wp:meta_value><![CDATA[e7b752e2-1cae-4e0a-a38f-4c780683c275]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[83]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>博客</title>
		<link>http://blog.liobio.cn/index.php/%e5%8d%9a%e5%ae%a2/</link>
		<pubDate>Tue, 30 Mar 2021 05:41:52 +0000</pubDate>
		<dc:creator><![CDATA[liobio]]></dc:creator>
		<guid isPermaLink="false">http://blog.liobio.cn/?page_id=9</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>9</wp:post_id>
		<wp:post_date><![CDATA[2021-03-30 13:41:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-03-30 05:41:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%8d%9a%e5%ae%a2]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_customize_changeset_uuid]]></wp:meta_key>
		<wp:meta_value><![CDATA[e7b752e2-1cae-4e0a-a38f-4c780683c275]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>[java]学生信息管理系统</title>
		<link>http://blog.liobio.cn/index.php/2021/06/18/sims-java/</link>
		<pubDate>Fri, 18 Jun 2021 07:37:40 +0000</pubDate>
		<dc:creator><![CDATA[liobio]]></dc:creator>
		<guid isPermaLink="false">http://blog.liobio.cn/?p=93</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>登陆选择界面</h2>
<!-- /wp:heading -->

<!-- wp:html -->
[cc lang="java"]
package main;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;

public class jframe_1  extends JFrame
{	
	private static final long serialVersionUID = -9222320634452053839L;	
	public jframe_1() 
	{ 
		setTitle("登录");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		this.setSize(300,550);
		this.setLocation(600,120);
		JPanel A=new JPanel() 
		{	
			private static final long serialVersionUID = 1L;
			public void paintComponent(Graphics g) 
			{
				super.paintComponent(g);
				ImageIcon im =new ImageIcon("C:\\Users\\asus\\Pictures\\家.png");
				g.drawImage(im.getImage(), 0, 0, getWidth(), getHeight(), im.getImageObserver());
			}	
		};
		this.add(A);
		A.setLayout(null);
    
		JLabel j1=new JLabel("选择身份登陆");
		j1.setBounds(78, 23, 138,39);
		j1.setFont(new Font("黑体", Font.PLAIN, 23));
		A.add(j1);
		JButton x=new JButton("学生");
		x.setBounds(114, 150, 60, 23);
		A.add(x);
		JButton g=new JButton("管理员");
		g.setBounds(108, 200, 75, 23);
		A.add(g);

		x.addActionListener(new ActionListener()    //监听学生按钮
		{
			public void actionPerformed(ActionEvent e)
			{
              new s_login(); 
			}
		});
 
		g.addActionListener(new ActionListener()   //监听管理员按钮
    	{
			public void actionPerformed(ActionEvent e)
			{
              new t_login(); 
			}
    	});
    
	}
	
	public static void main(String[] args)
	{		
		new jframe_1().setVisible(true);
	}	
}
[/cc]
<!-- /wp:html -->

<!-- wp:heading -->
<h2>学生登陆界面</h2>
<!-- /wp:heading -->

<!-- wp:html -->
[cc lang="java"]
package main;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Connection;
import javax.swing.*;

public class s_login extends JFrame {

	private static final long serialVersionUID = 1L;
	static JTextField user;
	JPasswordField pass;
	JButton ok,register;

	public s_login()
	{
		super("学生登陆");			
		setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		this.setSize(430,620);	
		this.setLocationRelativeTo(null);
		setVisible(true);			
		
	
		JPanel frame=new JPanel() 
		{	
			private static final long serialVersionUID = 1L;
			public void paintComponent(Graphics g)
			{
				super.paintComponent(g);
				ImageIcon im =new ImageIcon("C:\\Users\\asus\\Pictures\\好！.png");
				g.drawImage(im.getImage(), 0, 0, getWidth(), getHeight(), im.getImageObserver());
			}
		};      
	   
	    this.add(frame);
		
		JLabel login_user = new JLabel("账号");
		login_user.setBounds(85, 142, 53, 23);
		login_user.setFont(new Font("黑体",Font.PLAIN,25));
		JLabel password = new JLabel("密码");
		password.setBounds(87, 211, 53, 23);
		password.setFont(new Font("黑体",Font.PLAIN,25));
	  	
		user=new JTextField();//输入账号框
		pass=new JPasswordField();//输入密码框
		
		ok=new JButton("登录");
		ok.setHorizontalAlignment(SwingConstants.CENTER);//居中
		
		user.setBounds(150, 139, 150, 30);
		pass.setBounds(150, 208, 150, 30);		
		ok.setBounds(186, 295, 70, 30);	
		
		frame.setLayout(null);
		frame.add(login_user);
		frame.add(password);
		frame.add(user);
		frame.add(pass);
		frame.add(ok);		   	   
		
		ok.addActionListener(
		new ActionListener()    //监听登录按钮
		{
			public void actionPerformed(ActionEvent e)
			{
				String jusername=user.getText();
				char s[]=pass.getPassword();
				String jpassword=new String(s);	   			
				try 
				{
					String driverClassName = "com.mysql.jdbc.Driver";	//启动驱动
					String url = "jdbc:mysql://127.0.0.1:3306/sims?useSSL=false";	//设置连接路径
					String username = "root";	//数据库用户名
					String password = "123456";	//数据库连接密码
					Connection con = null;		//连接
					Statement stmt = null;	//使用预编译语句
					
					Class.forName(driverClassName); //执行驱动
					con = DriverManager.getConnection(url, username, password); //获取连接	
												
					System.out.println(con);
					stmt = con.createStatement();
		
					String  strSQL="(Select * from s_user where userid='"+jusername+"' And password='"+jpassword+"')";
					ResultSet rs=stmt.executeQuery(strSQL);
																	
					if(rs.next())
					{							 				    					
						new stu();	
			    		closeThis();			    
					}	
					
					else 
					{
						JOptionPane.showMessageDialog(null,"用户名不存在或密码错误","错误!",JOptionPane.ERROR_MESSAGE);	
					} 			
					con.close();//关闭数据库连接
				}						
				catch (ClassNotFoundException ex) 
				{
					System.out.println("没有找到对应的数据库驱动类");
				}	
				catch (SQLException ex) 
				{
					System.out.println("数据库连接或者是数据库操作失败");
				}  				
			}
		});
	}
		
	public  void closeThis()//关闭当前界面
	{
		this.dispose();
	}
		
}			
[/cc]
<!-- /wp:html -->

<!-- wp:heading -->
<h2>管理员登陆界面</h2>
<!-- /wp:heading -->

<!-- wp:html -->
[cc lang="java"]
package main;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Connection;
import javax.swing.*;

public class t_login extends JFrame {

	private static final long serialVersionUID = 1L;
	static JTextField user;
	JPasswordField pass;
	JButton ok,register;

	public t_login()
	{
		super("管理员登陆");			
		setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		this.setSize(430,620);	
		this.setLocationRelativeTo(null);
		setVisible(true);			
		
	
		JPanel frame=new JPanel() 
		{	
			private static final long serialVersionUID = 1L;
			public void paintComponent(Graphics g)
			{
				super.paintComponent(g);
				ImageIcon im =new ImageIcon("C:\\Users\\asus\\Pictures\\活.jpg");
				g.drawImage(im.getImage(), 0, 0, getWidth(), getHeight(), im.getImageObserver());
			}
		};      
	   
	    this.add(frame);
		
		JLabel login_user = new JLabel("账号");
		login_user.setBounds(85, 142, 53, 23);
		login_user.setFont(new Font("黑体",Font.PLAIN,25));
		JLabel password = new JLabel("密码");
		password.setBounds(87, 211, 53, 23);
		password.setFont(new Font("黑体",Font.PLAIN,25));
	  	login_user.setForeground(Color.white);
	 	password.setForeground(Color.white);
		user=new JTextField();//输入账号框
		pass=new JPasswordField();//输入密码框
		
		ok=new JButton("登录");
		ok.setHorizontalAlignment(SwingConstants.CENTER);//居中
		
		user.setBounds(150, 139, 150, 30);
		pass.setBounds(150, 208, 150, 30);		
		ok.setBounds(186, 295, 70, 30);	
		
		frame.setLayout(null);
		frame.add(login_user);
		frame.add(password);
		frame.add(user);
		frame.add(pass);
		frame.add(ok);		   	   
		
		ok.addActionListener(
		new ActionListener()    //监听登录按钮
		{
			public void actionPerformed(ActionEvent e)
			{
				String jusername=user.getText();
				char s[]=pass.getPassword();
				String jpassword=new String(s);	   			
				try 
				{
					String driverClassName = "com.mysql.jdbc.Driver";	//启动驱动
					String url = "jdbc:mysql://127.0.0.1:3306/sims?useSSL=false";	//设置连接路径
					String username = "root";	//数据库用户名
					String password = "123456";	//数据库连接密码
					Connection con = null;		//连接
					Statement stmt = null;	//使用预编译语句
					ResultSet rs = null;	//获取的结果集
					Class.forName(driverClassName); //执行驱动
					con = DriverManager.getConnection(url, username, password); //获取连接	
												
					System.out.println(con);
					stmt = con.createStatement();
		         
					String  strSQL="(Select * from admin_user where userid='"+jusername+"' And password='"+jpassword+"')";
					rs=stmt.executeQuery(strSQL);
																	
					if(rs.next())
					{							 				    					
						new admin();	
			    		closeThis();			    
					}	
					
					else JOptionPane.showMessageDialog(null,"用户名不存在或密码错误","错误!",JOptionPane.ERROR_MESSAGE);	
										
					con.close();//关闭数据库连接
					}						
					catch (ClassNotFoundException ex) {
						System.out.println("没有找到对应的数据库驱动类");}	
					catch (SQLException ex) {
						System.out.println("数据库连接或者是数据库操作失败");}  				
			}
		});
	}
		
	public  void closeThis()//关闭当前界面
	{
		this.dispose();
	}
		
}			
[/cc]
<!-- /wp:html -->

<!-- wp:heading -->
<h2>学生操作界面</h2>
<!-- /wp:heading -->

<!-- wp:html -->
[cc lang="java"]
package main;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Vector;
import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

public class stu extends JFrame{

	private static final long serialVersionUID = 1L;
	JTabbedPane jtbp; //定义选项卡
	JPanel jp1,jp2,jp3,jp4;	//定义面板
	
	public stu() throws SQLException, ClassNotFoundException
	{
		super("学生登陆");			
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		this.setSize(800,680);	
		this.setLocationRelativeTo(null);
		setVisible(true);
		
		MenuBar bar = new MenuBar();// 创建菜单栏
		bar.setFont(new Font("楷体",Font.PLAIN,30));
		Menu fileMenu = new Menu("FILE");// 创建“文件”菜单
		fileMenu.setFont(new Font("楷体",Font.PLAIN,17));	
		MenuItem exit = new MenuItem("EXIT");	
		
		
		exit.addActionListener(new ActionListener()
		{
			public void actionPerformed(ActionEvent e)
	        {
	        	 new s_login();
	        	 closeThis();   	
	        }
		});
		
		
		fileMenu.addSeparator();// 设置菜单分隔符
		fileMenu.add(exit);
		bar.add(fileMenu);// 将文件添加到菜单栏上	
		setMenuBar(bar);// 设置菜单栏，使用这种方式设置菜单栏可以不占用布局空间
		
		//创建组件	
		jp1= new JPanel();
		jp2= new JPanel();
		jp3= new JPanel();
		jp4= new JPanel()
		{	
			private static final long serialVersionUID = 1L;
			public void paintComponent(Graphics g)
			{
				super.paintComponent(g);
				ImageIcon im =new ImageIcon("C:\\Users\\asus\\Pictures\\修.jpg");
				g.drawImage(im.getImage(), 0, 0, getWidth(), getHeight(), im.getImageObserver());
			}
		};   
		jp1.setBackground(Color.WHITE);
		jp2.setBackground(Color.WHITE);
		jp3.setBackground(Color.WHITE);
		
		
		
		//jp1面板上上的内容
		String[][] datas = {};
	    String[] titles = { "学号", "姓名","年龄","班级","学院","电话","地址" };        
	    String[][] datas1 = {};
	    String[] titles1 = { "课程号","课程类型", "课程名","授课老师","学分"};      

	    DefaultTableModel myModel  = new DefaultTableModel(datas, titles);// myModel存放表格的数据
	    DefaultTableModel myModel1 = new DefaultTableModel(datas1, titles1);
	    
	    JTable table  = new JTable(myModel);// 表格对象table的数据来源是myModel对象   
	    JTable table1 = new JTable(myModel1);
	    
	    DefaultTableCellRenderer cr=new DefaultTableCellRenderer();
	    cr.setHorizontalAlignment(JLabel.CENTER);
	    
	    table.setDefaultRenderer(Object.class,cr);
	    table1.setDefaultRenderer(Object.class,cr);//内容居中
	    
	    table.setPreferredScrollableViewportSize(new Dimension(550, 100));// 表格的显示尺寸
	    table1.setPreferredScrollableViewportSize(new Dimension(550, 100));
	    
	    table.getColumnModel().getColumn(0).setPreferredWidth(30);
	    table.getColumnModel().getColumn(1).setPreferredWidth(30);
	    table.getColumnModel().getColumn(2).setPreferredWidth(10);
	    table.getColumnModel().getColumn(3).setPreferredWidth(30);
	    table.getColumnModel().getColumn(4).setPreferredWidth(30);
	    table.getColumnModel().getColumn(5).setPreferredWidth(30);
	    table.getColumnModel().getColumn(6).setPreferredWidth(80);
	    // 产生一个带滚动条的面板
	    JScrollPane scrollPane = new JScrollPane(table);
	    JScrollPane scrollPane1 = new JScrollPane(table1);
	    //行高
	    table.setRowHeight(20);
	    table1.setRowHeight(20);
	 
	    String driverClassName = "com.mysql.jdbc.Driver";	//启动驱动
		String url = "jdbc:mysql://127.0.0.1:3306/sims?useSSL=false";	//设置连接路径
		String username = "root";	//数据库用户名
		String password = "123456";	//数据库连接密码
		Connection con = null;		//连接
		Statement stmt = null;	//使用预编译语句
		ResultSet rs = null;	//获取的结果集
		Class.forName(driverClassName); //执行驱动
		con = DriverManager.getConnection(url, username, password); //获取连接									
		System.out.println(con);
		stmt = con.createStatement();
		
		String  strSQL="(Select * from students where s_id='"+ s_login.user.getText()+"')";
		rs=stmt.executeQuery(strSQL);
		if(rs.next())
		{
			System.out.println("操作成功99");
			Vector<String> ve = new Vector<String>();
			ve.addElement(rs.getString(1));
			ve.addElement(rs.getString(2));
			ve.addElement(rs.getString(3));
			ve.addElement(rs.getString(4));
			ve.addElement(rs.getString(5));
			ve.addElement(rs.getString(6));
			ve.addElement(rs.getString(7));
			myModel.addRow(ve);				 	
		}
			
		String  s1="(Select * from students where s_id='"+ s_login.user.getText()+"')";
		ResultSet r1=stmt.executeQuery(s1);
		if(r1.next())
		{	
			System.out.println("操作成功115");
			String  s2="(Select * from course,sc where sc.s_id='"+s_login.user.getText()+"'and  course.c_id=sc.c_id )";
			ResultSet r2=stmt.executeQuery(s2);
			while(r2.next())
			{
				System.out.println("操作成功120");
				Vector<String> ve1 = new Vector<String>();
				ve1.addElement(r2.getString(1));
				ve1.addElement(r2.getString(2));
				ve1.addElement(r2.getString(3));
				ve1.addElement(r2.getString(4));
				ve1.addElement(r2.getString(5));
				myModel1.addRow(ve1);	
			
			}
		}
	    
	    JButton again=new JButton("刷 新");
	    again.setContentAreaFilled(false);	
	    again.setFont(new Font("黑体",Font.BOLD,14));
	    again.addActionListener(new ActionListener()
	    {
	        public void actionPerformed(ActionEvent e)
	        {    	
	        	try 
	        	{
	        		String driverClassName = "com.mysql.jdbc.Driver";	//启动驱动
					String url = "jdbc:mysql://127.0.0.1:3306/sims?useSSL=false";	//设置连接路径
					String username = "root";	//数据库用户名
					String password = "123456";	//数据库连接密码
					Connection con = null;		//连接
					Statement stmt = null;	//使用预编译语句	
					Class.forName(driverClassName); //执行驱动
					con = DriverManager.getConnection(url, username, password); //获取连接												
					System.out.println(con);
					stmt = con.createStatement();
	    		
					while(myModel1.getRowCount()>0)
					{
						System.out.println("操作成功179");
						myModel1.removeRow(myModel1.getRowCount()-1);
					}    		    	
					String  s2="(Select * from course,sc where sc.s_id='"+s_login.user.getText()+"'and  course.c_id=sc.c_id)";
					ResultSet r2=stmt.executeQuery(s2);
					while(r2.next())
					{
						System.out.println("操作成功164");
						Vector<String> ve1 = new Vector<String>();
						ve1.addElement(r2.getString(1));
						ve1.addElement(r2.getString(2));
						ve1.addElement(r2.getString(3));
						ve1.addElement(r2.getString(4));
						ve1.addElement(r2.getString(5));
						myModel1.addRow(ve1);	
					}
	    		
	        	}
	        	catch (ClassNotFoundException ex) {
	        		System.out.println("没有找到对应的数据库驱动类");
	        	}
	        	catch (SQLException ex) {
	        		System.out.println("数据库连接或者是数据库操作失败");
	        	}
	        }
	    });
	                   	
	    //jp2面板上的内容
	    String[][] datas2 = {};
	    String[] titles2 = { "课程号","课程类型", "课程名","授课老师","学分"};       
	    DefaultTableModel myModel2 = new DefaultTableModel(datas2, titles2);
	    JTable table2  = new JTable(myModel2);
	    table2.setDefaultRenderer(Object.class,cr);
	    table2.setRowHeight(20);
	    table2.setPreferredScrollableViewportSize(new Dimension(550, 400));
	    JScrollPane scrollPane2 = new JScrollPane(table2); 
	    String  s2="(Select * from course)";
	    ResultSet r2=stmt.executeQuery(s2);
		while(r2.next())
		{
			Vector<String> ve2 = new Vector<String>();
			ve2.addElement(r2.getString(1));
			ve2.addElement(r2.getString(2));
			ve2.addElement(r2.getString(3));
			ve2.addElement(r2.getString(4));
			ve2.addElement(r2.getString(5));
			myModel2.addRow(ve2);	
		}
		con.close();
		
		JLabel a=new JLabel("请输入你想选的课的课程号：");
		a.setFont(new Font("楷体",Font.BOLD,18));
		JTextField b=new JTextField(20);
		JButton c=new JButton("确定");
		c.setFont(new Font("楷体",Font.BOLD,20));
		
		c.addActionListener(new ActionListener()
		{
			public void actionPerformed(ActionEvent e)
	        {
	        	try 
	        	{
	        		String driverClassName = "com.mysql.jdbc.Driver";	//启动驱动
					String url = "jdbc:mysql://127.0.0.1:3306/sims?useSSL=false";	//设置连接路径
					String username = "root";	//数据库用户名
					String password = "123456";	//数据库连接密码
					Connection con = null;		//连接
					Statement stmt = null;	//使用预编译
					Class.forName(driverClassName); //执行驱动
					con = DriverManager.getConnection(url, username, password); //获取连接											
					System.out.println(con);
					stmt = con.createStatement();

					String ok=b.getText().trim();
				    String s="(Select * from course where c_id='"+ok+"' )";
					ResultSet r=stmt.executeQuery(s);
					if(r.next())
					{
						String s1="(Select * from students,sc where students.s_id='"+s_login.user.getText()+"' And sc.s_id=students.s_id )";
						ResultSet r1=stmt.executeQuery(s1);
						if(r1.next())
						{
							String s2="(Select * from sc where s_id='"+r1.getString(1)+"' And c_id='"+ok+"' )";
							ResultSet r2=stmt.executeQuery(s2);
							if(r2.next())
							{
								JOptionPane.showMessageDialog(null, "你已经选过该科目了~","提示消息",JOptionPane.WARNING_MESSAGE);
							}
							else
							{
								System.out.println("没有选过该科目");

								System.out.println("开始添加");
								String  strSQL="insert into sc(s_id,c_id,s_score) values('"+s_login.user.getText()+"','"+ok+"',"+null+")";
								int r4=stmt.executeUpdate(strSQL);
								if(r4==1)
								{
									System.out.println("插入"+r4);
									JOptionPane.showMessageDialog(null, "选课成功","提示消息",JOptionPane.WARNING_MESSAGE);				    
								}		
							}
						}
					}
					
					else
					{
						JOptionPane.showMessageDialog(null, "没有这种科目哦~","提示消息",JOptionPane.WARNING_MESSAGE);
					}
					con.close();
					
	        	}catch (ClassNotFoundException ex) {
					System.out.println("没有找到对应的数据库驱动类");
				}
				catch (SQLException ex) {
					System.out.println("数据库连接或者是数据库操作失败");
				}      	
	        }
		});
		
	//jp3上的内容
	
		JButton c1=new JButton("查 询");
		String[][] datas3 = {};
	    String[] titles3 = { "课程号","课程类型", "课程名","授课老师","学分","成绩"};       
	    DefaultTableModel myModel3 = new DefaultTableModel(datas3, titles3);
	    JTable table3  = new JTable(myModel3);
	    
	    table3.setDefaultRenderer(Object.class,cr);
	    table3.setRowHeight(20);
	    table3.setPreferredScrollableViewportSize(new Dimension(550, 400));
	    JScrollPane scrollPane3 = new JScrollPane(table3);
	    
	   
	    table3.setDefaultRenderer(Object.class,cr); 
		c1.addActionListener(new ActionListener()
		{
			public void actionPerformed(ActionEvent e)
	        {
	        	try 
	        	{
	        		String driverClassName = "com.mysql.jdbc.Driver";	//启动驱动
					String url = "jdbc:mysql://127.0.0.1:3306/sims?useSSL=false";	//设置连接路径
					String username = "root";	//数据库用户名
					String password = "123456";	//数据库连接密码
					Connection con = null;		//连接
					Statement stmt = null;	//使用预编译
					Class.forName(driverClassName); //执行驱动
					con = DriverManager.getConnection(url, username, password); //获取连接											
					System.out.println(con);
					stmt = con.createStatement();
			     
					String  s1="(Select * from course,sc where sc.s_id='"+s_login.user.getText()+"'and sc.s_score is not null and  course.c_id=sc.c_id )";
					ResultSet r1=stmt.executeQuery(s1);
					
					while(r1.next())
					{   
						
						Vector<String> v1 = new Vector<String>();
						System.out.println("1");
						v1.addElement(r1.getString(1));
						System.out.println("2");
						v1.addElement(r1.getString(2));
						v1.addElement(r1.getString(3));
						v1.addElement(r1.getString(4));
						v1.addElement(r1.getString(5));
						v1.addElement(r1.getString(8));
						myModel3.addRow(v1);	
					}
					
					con.close();
					
	        	}catch (ClassNotFoundException ex) {
					System.out.println("没有找到对应的数据库驱动类");
				}
				catch (SQLException ex) {
					System.out.println("数据库连接或者是数据库操作失败");
				}
	        }
	    });
		
		
	    jp1.setLayout(null);//自由布局
	    jp2.setLayout(null);//自由布局
	    jp3.setLayout(null);//自由布局
	    jp4.setLayout(null);//自由布局
	    //jp1中组件的位置
	    scrollPane.setBounds(0, 47, 643, 55);
	    scrollPane1.setBounds(0, 102, 642, 454);
	    again.setBounds(2, 9, 80, 30);
	    
	    
	    //jp2中组件的位置
	    scrollPane2.setBounds(50, 20, 550, 400);
	    a.setBounds(50, 470, 270, 30);
	    b.setBounds(320, 470, 150, 25);
	    c.setBounds(500, 470, 80, 27);
	    
	    
	    //jp3中组件的位置

	    scrollPane3.setBounds(50, 20, 550, 400);
	    c1.setBounds(287, 445, 70, 30);
	    
	    // 将组件添加入jp1窗口中  
	    jp1.add(scrollPane);
	    jp1.add(scrollPane1);
	    jp1.add(again);
	    
	    // 将组件添加入jp2窗口中
	    jp2.add(scrollPane2);
	    jp2.add(a);
	    jp2.add(b);
	    jp2.add(c);
	    
	    // 将组件添加入jp3窗口中

	    jp3.add(c1);
	    jp3.add(scrollPane3);

	    JButton bt1 = new JButton("确认");
		bt1.setBounds(262, 172, 93, 30);	
		bt1.setFont(new Font("黑体",Font.PLAIN,25));
		JPasswordField p1=new JPasswordField();
		JPasswordField p2=new JPasswordField();
		p1.setBackground(Color.WHITE);
		p2.setBackground(Color.WHITE);
		p1.setBounds(233, 75, 150, 30);							
		p2.setBounds(233, 116, 150, 30);
		
		JLabel old_p=new JLabel("\u65E7\u5BC6\u7801:");
		JLabel new_p=new JLabel("\u65B0\u5BC6\u7801:");
		old_p.setFont(new Font("黑体",Font.PLAIN,25));
		new_p.setFont(new Font("黑体",Font.PLAIN,25));
		old_p.setBounds(130, 75, 93, 30);							
		new_p.setBounds(130, 116, 93, 30);
		
	
		bt1.addActionListener(new ActionListener()
		{
	        public void actionPerformed(ActionEvent e)
	        {
	        	try 
	        	{
	        		char[] oldpassword=p1.getPassword();
	        		char[] newpassword=p2.getPassword();
	        		String old_password=new String(oldpassword);
	        		String new_password=new String(newpassword);
	        		String u=new String(s_login.user.getText());
	        		System.out.println(u);
	        		System.out.println(old_password);
	        		System.out.println(new_password);
	        		
	        		String driverClassName = "com.mysql.jdbc.Driver";	//启动驱动
					String url = "jdbc:mysql://127.0.0.1:3306/sims?useSSL=false";	//设置连接路径
					String username = "root";	//数据库用户名
					String password = "123456";	//数据库连接密码
					Connection con = null;		//连接
					Statement stm = null;	//使用预编译
					Class.forName(driverClassName); //执行驱动
					con = DriverManager.getConnection(url, username, password); //获取连接											
					System.out.println(con);
					stm = con.createStatement();
			        
					String  strSQL="(Select * from user where userid='"+u+"' And password='"+old_password+"')";
					ResultSet rs=stm.executeQuery(strSQL);
					//System.out.println(rs.next());												
					if(rs.next())
					{							 				    					
						String  strSQL_1="update user set password='"+new_password+"' where userid='"+u+"' ";							
						int rr=stm.executeUpdate(strSQL_1);
						
     					if(rr!=0)
     					{
     						JOptionPane.showMessageDialog(null,"修改成功啦:D");
     					}				
					}		
					else {
						JOptionPane.showMessageDialog(null,"旧密码错误","错误!",JOptionPane.ERROR_MESSAGE);																
					}
					con.close();
					stm.close();
					rs.close();
	        	}
	        	catch (ClassNotFoundException ex) {
					System.out.println("没有找到对应的数据库驱动类");
				}
				catch (SQLException ex) {
					System.out.println("数据库连接或者是数据库操作失败");
				}
	        }
	    });
		
		jp4.add(p2);
		jp4.add(p1);
		jp4.add(bt1);
		jp4.add(old_p);
		jp4.add(new_p);
		jtbp=new JTabbedPane(JTabbedPane.LEFT); //创建选项卡并使选项卡垂直排列
		jtbp.add("个人信息",jp1);		
		jtbp.add("选课",jp2);
		jtbp.add("成绩查询",jp3);
		jtbp.add("修改密码",jp4);
		jtbp.setFont(new Font("楷体",Font.PLAIN,30)); 
		getContentPane().add(jtbp);    //添加选项卡窗格到容器	
	}
		
	public  void closeThis()//关闭当前界面
	{
		this.dispose();
	}
	}
[/cc]
<!-- /wp:html -->

<!-- wp:heading -->
<h2>管理员操作界面</h2>
<!-- /wp:heading -->

<!-- wp:html -->
[cc lang="java"]
package main;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Vector;
import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

public class admin extends JFrame{

	private static final long serialVersionUID = 1L;
	JTabbedPane jtbp; //定义选项卡
	JPanel jp1,jp2,jp4,jp6,jp5,jp3;	//定义面板

	
	public admin() throws SQLException, ClassNotFoundException
	{
		super("管理员登陆");			
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		this.setSize(1072,740);	
		this.setLocation(150,0);
		setVisible(true);
		
		MenuBar bar = new MenuBar();// 创建菜单栏
		bar.setFont(new Font("楷体",Font.PLAIN,30));
		Menu fileMenu = new Menu("FILE");// 创建“文件”菜单
		fileMenu.setFont(new Font("楷体",Font.PLAIN,17));	
		MenuItem exit = new MenuItem("EXIT");	
		
		
		exit.addActionListener(new ActionListener()
		{
	        public void actionPerformed(ActionEvent e)
	        {
	        	 new s_login();
	        	 closeThis();   	
	        }
		});
		
		
		fileMenu.addSeparator();// 设置菜单分隔符
		fileMenu.add(exit);
		bar.add(fileMenu);// 将文件添加到菜单栏上	
		setMenuBar(bar);// 设置菜单栏，使用这种方式设置菜单栏可以不占用布局空间
		
		//创建组件	
		
		jp1= new JPanel()
		{		
			private static final long serialVersionUID = 1L;
			public void paintComponent(Graphics g)
			{
				super.paintComponent(g);
				ImageIcon im =new ImageIcon("C:\\Users\\asus\\Pictures\\jp1.jpg");
				g.drawImage(im.getImage(), 0, 0, getWidth(), getHeight(), im.getImageObserver());
			}
		}; //学生信息页面	
		
		jp2= new JPanel()
		{	
			private static final long serialVersionUID = 1L;
			public void paintComponent(Graphics g)
			{
				super.paintComponent(g);
				ImageIcon im =new ImageIcon("C:\\Users\\asus\\Pictures\\jp2.jpg");
				g.drawImage(im.getImage(), 0, 0, getWidth(), getHeight(), im.getImageObserver());
			}
		};//班级信息页面	
		
		jp3=new JPanel()
		{	
			private static final long serialVersionUID = 1L;
			public void paintComponent(Graphics g)
			{
				super.paintComponent(g);
				ImageIcon im =new ImageIcon("C:\\Users\\asus\\Pictures\\jp3.jpg");
				g.drawImage(im.getImage(), 0, 0, getWidth(), getHeight(), im.getImageObserver());
			}
		};//老师信息	
		
		jp4= new JPanel()
		{	
			private static final long serialVersionUID = 1L;
			public void paintComponent(Graphics g)
			{
				super.paintComponent(g);
				ImageIcon im =new ImageIcon("C:\\Users\\asus\\Pictures\\jp4.png");
				g.drawImage(im.getImage(), 0, 0, getWidth(), getHeight(), im.getImageObserver());
			}
		};//课程信息页面	
		
		jp5= new JPanel()
		{	
			private static final long serialVersionUID = 1L;
			public void paintComponent(Graphics g)
			{
				super.paintComponent(g);
				ImageIcon im =new ImageIcon("C:\\Users\\asus\\Pictures\\jp5.png");
				g.drawImage(im.getImage(), 0, 0, getWidth(), getHeight(), im.getImageObserver());
			}
		};//成绩信息页面	
		
		jp6= new JPanel()
		{	
			private static final long serialVersionUID = 1L;
			public void paintComponent(Graphics g)
			{
				super.paintComponent(g);
				ImageIcon im =new ImageIcon("C:\\Users\\asus\\Pictures\\jp6.jpg");
				g.drawImage(im.getImage(), 0, 0, getWidth(), getHeight(), im.getImageObserver());
			}
		}; //修改密码页面  
	
	    jp1.setLayout(null);//自由布局
	    jp2.setLayout(null);//自由布局
	    jp4.setLayout(null);//自由布局
	    jp6.setLayout(null);//自由布局
	    jp5.setLayout(null);//自由布局
	    jp3.setLayout(null);//自由布局
		
		//jp1面板上上的内容
		String[][] datas = {};
	    String[] titles = { "学号", "姓名","年龄","班级","学院","电话","地址" };        
	    DefaultTableModel myModel  = new DefaultTableModel(datas, titles);// myModel存放表格的数据	    
	    JTable table  = new JTable(myModel);// 表格对象table的数据来源是myModel对象       
	    DefaultTableCellRenderer cr=new DefaultTableCellRenderer();
	    cr.setHorizontalAlignment(JLabel.CENTER);	    
	    table.setDefaultRenderer(Object.class,cr);
	    //内容居中
	    
	    table.setPreferredScrollableViewportSize(new Dimension(550, 100));// 表格的显示尺寸
	    
	    table.getColumnModel().getColumn(0).setPreferredWidth(30);
	    table.getColumnModel().getColumn(1).setPreferredWidth(30);
	    table.getColumnModel().getColumn(2).setPreferredWidth(10);
	    table.getColumnModel().getColumn(3).setPreferredWidth(30);
	    table.getColumnModel().getColumn(4).setPreferredWidth(30);
	    table.getColumnModel().getColumn(5).setPreferredWidth(30);
	    table.getColumnModel().getColumn(6).setPreferredWidth(80);
	     
	    myModel.getDataVector().clear();
		Vector<String> v = new Vector<String>();
		myModel.addRow(v);
		//增添空白行方便添加数据
		
	    JScrollPane scrollPane = new JScrollPane(table); // 产生一个带滚动条的面板	        
	    table.setRowHeight(20);//行高
	    scrollPane.setSize(633, 61);
	    scrollPane.setLocation(0, 52);
		jp1.add(scrollPane);

	    JTextField textField = new JTextField();
		textField.setFont(new Font("宋体", Font.PLAIN, 15));
		textField.setBounds(232, 12, 150, 30);
		jp1.add(textField);
		textField.setColumns(15);
		
		JLabel label = new JLabel("\u8BF7\u8F93\u5165\u67E5\u8BE2\u7684\u5B66\u53F7\uFF1A");
		label.setFont(new Font("宋体", Font.PLAIN, 20));
		label.setBounds(50, 10, 180, 30);	
		jp1.add(label);
	
		    
	    String driverClassName = "com.mysql.jdbc.Driver";	//启动驱动
		String url = "jdbc:mysql://127.0.0.1:3306/sims?useSSL=false";	//设置连接路径
		String username = "root";	//数据库用户名
		String password = "123456";	//数据库连接密码
		Connection con = null;		//连接
		Statement stmt = null;	//使用预编译语句
		Class.forName(driverClassName); //执行驱动
		con = DriverManager.getConnection(url, username, password); //获取连接									
		System.out.println(con);
		stmt = con.createStatement();
		
		 DefaultTableModel 	myModel1_1 = new DefaultTableModel(datas, titles);
		 JTable table1_1  = new JTable(myModel1_1);
		 table1_1.setDefaultRenderer(Object.class,cr);
		 table1_1.setRowHeight(20);
		 table1_1.setPreferredScrollableViewportSize(new Dimension(550, 400));


		 table1_1.getColumnModel().getColumn(0).setPreferredWidth(30);
		 table1_1.getColumnModel().getColumn(1).setPreferredWidth(30);		    
		 table1_1.getColumnModel().getColumn(2).setPreferredWidth(10);
		 table1_1.getColumnModel().getColumn(3).setPreferredWidth(30);
		 table1_1.getColumnModel().getColumn(4).setPreferredWidth(30);
		 table1_1.getColumnModel().getColumn(5).setPreferredWidth(30);
		 table1_1.getColumnModel().getColumn(6).setPreferredWidth(80);
		    
		 JScrollPane scrollPane1_1 = new JScrollPane(table1_1); 
		 scrollPane1_1.setBounds(0, 116, 633, 400);
		 jp1.add(scrollPane1_1);
		 String  s1="(Select * from students)";
		 ResultSet r1=stmt.executeQuery(s1);
		 while(r1.next())
		 {
			 Vector<String> ve = new Vector<String>();
				ve.addElement(r1.getString(1));
				ve.addElement(r1.getString(2));
				ve.addElement(r1.getString(3));
				ve.addElement(r1.getString(4));
				ve.addElement(r1.getString(5));
				ve.addElement(r1.getString(6));
				ve.addElement(r1.getString(7));
				myModel1_1.addRow(ve);
		 }
	
		
		 JButton sel=new JButton("查询");
		 sel.setBounds(392, 10, 80, 30);
		 sel.setContentAreaFilled(false);	
		 sel.setFont(new Font("黑体",Font.BOLD,14));
		 jp1.add(sel);

		 JButton re1=new JButton("刷新");
		 re1.setBounds(472, 10, 80, 30);
		 re1.setContentAreaFilled(false);	
		 re1.setFont(new Font("黑体",Font.BOLD,14));
		 jp1.add(re1);
	    
		 JButton alter1=new JButton("修改");
		 alter1.setBounds(673, 51, 80, 30);
		 alter1.setContentAreaFilled(false);	
		 alter1.setFont(new Font("黑体",Font.BOLD,14));
		 jp1.add(alter1);
	    
		 JLabel label1_1 = new JLabel("请输入需要删除的学号");
		 label1_1.setFont(new Font("宋体", Font.PLAIN, 20));
		 label1_1.setBounds(10, 540, 220, 30);
		 jp1.add(label1_1);
	
		 JTextField textField1_1 = new JTextField();
		 textField1_1.setFont(new Font("宋体", Font.PLAIN, 15));
		 textField1_1.setColumns(15);
		 textField1_1.setBounds(232, 542, 150, 30);
		 jp1.add(textField1_1);
		 
		 JButton add1 = new JButton("添加");
		 add1.setFont(new Font("黑体", Font.BOLD, 14));
		 add1.setContentAreaFilled(false);
		 add1.setBounds(673, 91, 80, 30);
		 jp1.add(add1);
		 
		 JButton del1 = new JButton("删除");
		 del1 .setFont(new Font("黑体", Font.BOLD, 14));
		 del1 .setContentAreaFilled(false);
		 del1 .setBounds(392, 542, 80, 30);
		 jp1.add(del1);
	    
		 sel.addActionListener(new ActionListener()
		 {
			 public void actionPerformed(ActionEvent e)
			 {    	
				 try 
				 {
					 String driverClassName = "com.mysql.jdbc.Driver";	//启动驱动
					 String url = "jdbc:mysql://127.0.0.1:3306/sims?useSSL=false";	//设置连接路径
					 String username = "root";	//数据库用户名
					 String password = "123456";	//数据库连接密码
					 Connection con = null;		//连接
					 Statement stmt = null;	//使用预编译语句	
					 Class.forName(driverClassName); //执行驱动
					 con = DriverManager.getConnection(url, username, password); //获取连接												
					 System.out.println(con);
					 stmt = con.createStatement();
	    		
					 String  s2="Select * from students where s_id='"+ textField.getText()+"'";
					 ResultSet r2=stmt.executeQuery(s2);
					 while(r2.next())
					 {	
						 myModel.getDataVector().clear();
						 System.out.println("操作成功161");
						 Vector<String> ve1 = new Vector<String>();
						 ve1.addElement(r2.getString(1));
						 ve1.addElement(r2.getString(2));
						 ve1.addElement(r2.getString(3));
	    				ve1.addElement(r2.getString(4));
	    				ve1.addElement(r2.getString(5));
	    				ve1.addElement(r2.getString(6));
	    				ve1.addElement(r2.getString(7));
	    				myModel.addRow(ve1);	
					 }
	    	
					 con.close();	
				 }catch (ClassNotFoundException ex) {
					 System.out.println("没有找到对应的数据库驱动类");
				 }
				 catch (SQLException ex) {
					 System.out.println("数据库连接或者是数据库操作失败");
				 }
 	        }
	    });
	     
	    re1.addActionListener(new ActionListener()
	    {
	        public void actionPerformed(ActionEvent e)
	        {    	
	        	try 
	        	{
	        		String driverClassName = "com.mysql.jdbc.Driver";	//启动驱动
					String url = "jdbc:mysql://127.0.0.1:3306/sims?useSSL=false";	//设置连接路径
					String username = "root";	//数据库用户名
					String password = "123456";	//数据库连接密码
					Connection con = null;		//连接
					Statement stmt = null;	//使用预编译语句	
					Class.forName(driverClassName); //执行驱动
					con = DriverManager.getConnection(url, username, password); //获取连接												
					System.out.println(con);
					stmt = con.createStatement();
						   
				    myModel.getDataVector().clear();
					Vector<String> v = new Vector<String>();
					myModel.addRow(v);
					
					String  s1="Select * from students";
					ResultSet r1=stmt.executeQuery(s1);
					myModel1_1.getDataVector().clear();
					while(r1.next())
					{
						Vector<String> ve = new Vector<String>();
						ve.addElement(r1.getString(1));
						ve.addElement(r1.getString(2));
						ve.addElement(r1.getString(3));
						ve.addElement(r1.getString(4));
						ve.addElement(r1.getString(5));
						ve.addElement(r1.getString(6));
						ve.addElement(r1.getString(7));
						myModel1_1.addRow(ve);
					}
					con.close();
	        	}
					
				catch (ClassNotFoundException ex) {
					System.out.println("没有找到对应的数据库驱动类");
				}
				catch (SQLException ex) {
					System.out.println("数据库连接或者是数据库操作失败");
				} 
	        } 
	    });
		 	       			   	
	    alter1.addActionListener(new ActionListener() 
	    {	
	    	public void actionPerformed(ActionEvent e)
	        {    	
	        	try 
	        	{
	        		String driverClassName = "com.mysql.jdbc.Driver";	//启动驱动
					String url = "jdbc:mysql://127.0.0.1:3306/sims?useSSL=false";	//设置连接路径
					String username = "root";	//数据库用户名
					String password = "123456";	//数据库连接密码
					Connection con = null;		//连接
					Statement stmt = null;	//使用预编译语句	
					Class.forName(driverClassName); //执行驱动
					con = DriverManager.getConnection(url, username, password); //获取连接												
					System.out.println(con);
					stmt = con.createStatement();
					String c0=(String) myModel.getValueAt(0, 0);
					String c1=(String) myModel.getValueAt(0, 1);
					String c2=(String) myModel.getValueAt(0, 2);
					String c3=(String) myModel.getValueAt(0, 3);
					String c4=(String) myModel.getValueAt(0, 4);
					String c5=(String) myModel.getValueAt(0, 5);
					String c6=(String) myModel.getValueAt(0, 6);
					
					String  s1="update students set s_name='"+c1+"',s_age='"+c2+"',s_class='"+c3+"',"
							    + "s_college='"+c4+"',s_tel='"+c5+"',s_address='"+c6+"' where s_id='"+c0+"' ";
					int r1=stmt.executeUpdate(s1);
					myModel.getDataVector().clear();
					if(r1!=0)
					{
						JOptionPane.showMessageDialog(null, "修改成功","提示消息",JOptionPane.WARNING_MESSAGE);			
					}
					con.close();
	        	}				
				catch (ClassNotFoundException ex) {
					System.out.println("没有找到对应的数据库驱动类");
				}
				catch (SQLException ex) {
					System.out.println("数据库连接或者是数据库操作失败");
				}
	        }
	    });
	     
	    del1.addActionListener(new ActionListener()
	    {
	        public void actionPerformed(ActionEvent e)
	        {    	
	        	try 
	        	{
	        		String driverClassName = "com.mysql.jdbc.Driver";	//启动驱动
					String url = "jdbc:mysql://127.0.0.1:3306/sims?useSSL=false";	//设置连接路径
					String username = "root";	//数据库用户名
					String password = "123456";	//数据库连接密码
					Connection con = null;		//连接
					Statement stmt = null;	//使用预编译语句	
					Class.forName(driverClassName); //执行驱动
					con = DriverManager.getConnection(url, username, password); //获取连接												
					System.out.println(con);
					stmt = con.createStatement();
	    		
					String  s="Select * from students where s_id= '"+ textField1_1.getText()+"' ";
					ResultSet r=stmt.executeQuery(s);
					if(r.next())
					{
						String s1=" delete from students where s_id='"+ textField1_1.getText()+"'";
						int r1=stmt.executeUpdate(s1);
						if(r1!=0)
						{
							JOptionPane.showMessageDialog(null, "删除成功","提示消息",JOptionPane.WARNING_MESSAGE);		
						}			
					}
					
					else 
					{	
						JOptionPane.showMessageDialog(null, "该学生不存在！","提示消息",JOptionPane.WARNING_MESSAGE);				
					}
					con.close();	
	        	}
	        	catch (ClassNotFoundException ex) {
	        		System.out.println("没有找到对应的数据库驱动类");
	        	}	
	        	catch (SQLException ex) {
	        		System.out.println("数据库连接或者是数据库操作失败");
	        	}
 	        } 
	    });
	  
        add1.addActionListener(new ActionListener() 
	    {	
	    	public void actionPerformed(ActionEvent e)
	        {    	
	        	try 
	        	{
	        		String driverClassName = "com.mysql.jdbc.Driver";	//启动驱动
					String url = "jdbc:mysql://127.0.0.1:3306/sims?useSSL=false";	//设置连接路径
					String username = "root";	//数据库用户名
					String password = "123456";	//数据库连接密码
					Connection con = null;		//连接
					Statement stmt = null;	//使用预编译语句	
					Class.forName(driverClassName); //执行驱动
					con = DriverManager.getConnection(url, username, password); //获取连接												
					System.out.println(con);
					stmt = con.createStatement();
					String c0=(String) myModel.getValueAt(0, 0);
					String c1=(String) myModel.getValueAt(0, 1);
					String c2=(String) myModel.getValueAt(0, 2);
					String c3=(String) myModel.getValueAt(0, 3);
					String c4=(String) myModel.getValueAt(0, 4);
					String c5=(String) myModel.getValueAt(0, 5);
					String c6=(String) myModel.getValueAt(0, 6);
					
					String  s="Select * from students where s_id= '"+c0+"' ";							    		
					ResultSet r=stmt.executeQuery(s);
				
					if(r.next())
					{
						JOptionPane.showMessageDialog(null, "已存在","提示消息",JOptionPane.WARNING_MESSAGE);									
					}
					else
					{
						String  s1="insert into students values( '"+c0+"','"+c1+"','"+c2+"','"+c3+"',"
							+ " '"+c4+"', '"+c5+"','"+c6+"') ";	
						int r1=stmt.executeUpdate(s1);	
						if(r1!=0)
						{
							JOptionPane.showMessageDialog(null, "添加成功","提示消息",JOptionPane.WARNING_MESSAGE);		
						}
					}
					
					con.close();
	        	}				
				catch (ClassNotFoundException ex) {
					System.out.println("没有找到对应的数据库驱动类");
				}
				catch (SQLException ex) {
					System.out.println("数据库连接或者是数据库操作失败");
				}
	        }
	    });
			    
	    
	    
	    
	    //jp2面板上的内容
	    String[][] datas1 = {};
	    String[] titles1 = { "学院","班级", "班主任","班主任联系电话"};       
	    DefaultTableModel myModel2 = new DefaultTableModel(datas1, titles1);
	    JTable table2  = new JTable(myModel2);
	    table2.setDefaultRenderer(Object.class,cr);
	    table2.setRowHeight(20);
	    table2.setPreferredScrollableViewportSize(new Dimension(550, 100));

		
	    JScrollPane scrollPane2 = new JScrollPane(table2); 
	    scrollPane2.setSize(633, 61);
	    scrollPane2.setLocation(0, 52);
	    jp2.add(scrollPane2);
	    
	    
		String[][] datas1_1 = {};
	    String[] titles1_1 = { "学号", "姓名","年龄","班级","学院","电话","地址" };        
	    DefaultTableModel myModel2_1  = new DefaultTableModel(datas1_1, titles1_1);// myModel存放表格的数据	    
	    JTable table2_1  = new JTable(myModel2_1);// 表格对象table的数据来源是myModel对象       	   	    
	    table2_1.setDefaultRenderer(Object.class,cr); //内容居中
	    
	    JScrollPane scrollPane2_1 = new JScrollPane(table2_1);
	    scrollPane2_1.setBounds(0, 116, 633, 400);
		jp2.add(scrollPane2_1);
	     
	    table2_1.setPreferredScrollableViewportSize(new Dimension(550, 100));// 表格的显示尺寸
	    table2_1.getColumnModel().getColumn(0).setPreferredWidth(30);
	    table2_1.getColumnModel().getColumn(1).setPreferredWidth(30);
	    table2_1.getColumnModel().getColumn(2).setPreferredWidth(10);
	    table2_1.getColumnModel().getColumn(3).setPreferredWidth(30);
	    table2_1.getColumnModel().getColumn(4).setPreferredWidth(30);
	    table2_1.getColumnModel().getColumn(5).setPreferredWidth(30);
	    table2_1.getColumnModel().getColumn(6).setPreferredWidth(80);     	         
	    table2_1.setRowHeight(20);//行高
	    
	    String  s2="(Select * from students)";
		 ResultSet r2=stmt.executeQuery(s2);
		 while(r2.next()){			 
			 Vector<String> ve = new Vector<String>();
				ve.addElement(r2.getString(1));
				ve.addElement(r2.getString(2));
				ve.addElement(r2.getString(3));
				ve.addElement(r2.getString(4));
				ve.addElement(r2.getString(5));
				ve.addElement(r2.getString(6));
				ve.addElement(r2.getString(7));
				myModel2_1.addRow(ve);
		 }
	    
	    
	    JTextField textField1 = new JTextField();
		textField1.setFont(new Font("宋体", Font.PLAIN, 15));
		textField1.setBounds(232, 12, 150, 30);
		jp2.add(textField1);
		textField1.setColumns(15);
		
		JLabel label1 = new JLabel("请输入班级名称");
		label1.setFont(new Font("宋体", Font.PLAIN, 20));
		label1.setBounds(50, 10, 180, 30);
		jp2.add(label1);
	
	    JButton sel2=new JButton("查询");
	    sel2.setContentAreaFilled(false);	
	    sel2.setFont(new Font("黑体",Font.BOLD,14));
	    sel2.setBounds(392, 10, 80, 30);
		jp2.add(sel2);
		
		JButton re2=new JButton("刷新");
	    re2.setBounds(472, 10, 80, 30);
	    re2.setContentAreaFilled(false);	
	    re2.setFont(new Font("黑体",Font.BOLD,14));
	    jp2.add(re2);
	    
	    JButton alter2=new JButton("修改");
	    alter2.setBounds(673, 51, 80, 30);
	    alter2.setContentAreaFilled(false);	
	    alter2.setFont(new Font("黑体",Font.BOLD,14));
	    jp2.add(alter2);
	    
	    sel2.addActionListener(new ActionListener()

	    {
	        public void actionPerformed(ActionEvent e)
	        {    	
	        	try {
	        		String driverClassName = "com.mysql.jdbc.Driver";	//启动驱动
					String url = "jdbc:mysql://127.0.0.1:3306/sims?useSSL=false";	//设置连接路径
					String username = "root";	//数据库用户名
					String password = "123456";	//数据库连接密码
					Connection con = null;		//连接
					Statement stmt = null;	//使用预编译语句	
					Class.forName(driverClassName); //执行驱动
					con = DriverManager.getConnection(url, username, password); //获取连接												
					System.out.println(con);
					stmt = con.createStatement();
	    		
	    		String  s2="Select * from students where s_class='"+ textField1.getText()+"' ";
	    		myModel2_1.getDataVector().clear();
	    		myModel2.getDataVector().clear();
	    		ResultSet r2=stmt.executeQuery(s2);
	    		while(r2.next())
	    		{
	    	
	    			System.out.println("操作成功304");
	    			System.out.println(r2.getString(1));
	    			Vector<String> ve1 = new Vector<String>();
	    			ve1.addElement(r2.getString(1));
	    			ve1.addElement(r2.getString(2));
	    			ve1.addElement(r2.getString(3));
	    			ve1.addElement(r2.getString(4));
	    			ve1.addElement(r2.getString(5));
	    			ve1.addElement(r2.getString(6));
	    			ve1.addElement(r2.getString(7));
	    			myModel2_1.addRow(ve1);	
	    		}
	    		
	    		String  s="Select * from class,teacher where class.class_id='"
	    		+ textField1.getText()+"'  ";
	    		System.out.println(textField1.getText());
	    		ResultSet r3=stmt.executeQuery(s);
	    		while(r3.next())
	    		{
	    			myModel2.getDataVector().clear();
	    			System.out.println("操作成功323");
	    			Vector<String> ve1 = new Vector<String>();
	    			ve1.addElement(r3.getString(3));
	    			ve1.addElement(r3.getString(1));
	    			ve1.addElement(r3.getString(2));
	    			ve1.addElement(r3.getString(8));    			
	    			myModel2.addRow(ve1);	
	    		}
	    		    			    		
	    		con.close();	
	        }catch (ClassNotFoundException ex) {
				System.out.println("没有找到对应的数据库驱动类");
			}
			catch (SQLException ex) {
				System.out.println("数据库连接或者是数据库操作失败");
			}
 	        }
	    });
	   	   
	    re2.addActionListener(new ActionListener()     
	    {
	        public void actionPerformed(ActionEvent e)
	        {    	
	        	try {
	        		String driverClassName = "com.mysql.jdbc.Driver";	//启动驱动
					String url = "jdbc:mysql://127.0.0.1:3306/sims?useSSL=false";	//设置连接路径
					String username = "root";	//数据库用户名
					String password = "123456";	//数据库连接密码
					Connection con = null;		//连接
					Statement stmt = null;	//使用预编译语句	
					Class.forName(driverClassName); //执行驱动
					con = DriverManager.getConnection(url, username, password); //获取连接												
					System.out.println(con);
					stmt = con.createStatement();
					
					myModel2.getDataVector().clear();
					
					String  s1="Select * from students";
					ResultSet r1=stmt.executeQuery(s1);
					myModel2_1.getDataVector().clear();
					while(r1.next())
					{
						Vector<String> ve = new Vector<String>();
						ve.addElement(r1.getString(1));
						ve.addElement(r1.getString(2));
						ve.addElement(r1.getString(3));
						ve.addElement(r1.getString(4));
						ve.addElement(r1.getString(5));
						ve.addElement(r1.getString(6));
						ve.addElement(r1.getString(7));
						myModel2_1.addRow(ve);
					}
					con.close();
	        	}
					
				catch (ClassNotFoundException ex) {
					System.out.println("没有找到对应的数据库驱动类");
				}
				catch (SQLException ex) {
					System.out.println("数据库连接或者是数据库操作失败");
				}
	        }
		});
	    
	    alter2.addActionListener(new ActionListener() 
	    {	
	    	public void actionPerformed(ActionEvent e)
	        {    	
	        	try 
	        	{
	        		String driverClassName = "com.mysql.jdbc.Driver";	//启动驱动
					String url = "jdbc:mysql://127.0.0.1:3306/sims?useSSL=false";	//设置连接路径
					String username = "root";	//数据库用户名
					String password = "123456";	//数据库连接密码
					Connection con = null;		//连接
					Statement stmt = null;	//使用预编译语句	
					Class.forName(driverClassName); //执行驱动
					con = DriverManager.getConnection(url, username, password); //获取连接												
					System.out.println(con);
					stmt = con.createStatement();
					String c0=(String) myModel2.getValueAt(0, 2);		
					String s="select * from teacher where t_name='"+c0+"' ";
					ResultSet r=stmt.executeQuery(s);
					if(r.next())
					{
						String  s1="update class set headmaster='"+c0+"' where class_id='"+textField1.getText()+"' ";
						int r1=stmt.executeUpdate(s1);
						myModel2.getDataVector().clear();		
						if(r1!=0)
						{
							JOptionPane.showMessageDialog(null, "修改成功","提示消息",JOptionPane.WARNING_MESSAGE);		
						}			
					}
						
					else 
					{	
						JOptionPane.showMessageDialog(null, "该老师不存在！","提示消息",JOptionPane.WARNING_MESSAGE);				
					}
					con.close();
	        	}				
				catch (ClassNotFoundException ex) {
					System.out.println("没有找到对应的数据库驱动类");
				}
				catch (SQLException ex) {
					System.out.println("数据库连接或者是数据库操作失败");
				}
		 	}
		});
	    
	    //jp3上的内容
	    
	    String[][] datas3 = {};
	    String[] titles3 = { "教师编号","教师姓名", "教师性别","职务","联系电话"};
	    DefaultTableModel myModel3 = new DefaultTableModel(datas3, titles3);
	    JTable table3  = new JTable(myModel3);
	    table3.setDefaultRenderer(Object.class,cr);
	    table3.setRowHeight(20);
	    table3.setPreferredScrollableViewportSize(new Dimension(550, 100));

		Vector<String> v3 = new Vector<String>();
		myModel3.addRow(v3);
		//增添空白行方便添加数据
		
	    JScrollPane scrollPane3 = new JScrollPane(table3); 
	    scrollPane3.setSize(633, 61);
	    scrollPane3.setLocation(0, 52);
	    jp3.add(scrollPane3);
	    
	          
	    DefaultTableModel myModel3_1  = new DefaultTableModel(datas3, titles3);// myModel存放表格的数据	    
	    JTable table3_1  = new JTable(myModel3_1);// 表格对象table的数据来源是myModel对象       	   	    
	    table3_1.setDefaultRenderer(Object.class,cr); //内容居中
	    
	    JScrollPane scrollPane3_1 = new JScrollPane(table3_1);
		scrollPane3_1.setBounds(0, 116, 633, 400);
		jp3.add(scrollPane3_1);
	     
	    table3_1.setPreferredScrollableViewportSize(new Dimension(550, 100));// 表格的显示尺寸	      	         
	    table3_1.setRowHeight(20);//行高
	    
	    String  s3="(Select * from teacher)";
		ResultSet r3=stmt.executeQuery(s3);
		while(r3.next())
		{
			 
			Vector<String> ve = new Vector<String>();
			ve.addElement(r3.getString(1));
			ve.addElement(r3.getString(2));
			ve.addElement(r3.getString(3));
			ve.addElement(r3.getString(4));
			ve.addElement(r3.getString(5));			
			myModel3_1.addRow(ve);
		}
	    
	    JTextField textField3 = new JTextField();
		textField3.setFont(new Font("宋体", Font.PLAIN, 15));
		textField3.setBounds(232, 12, 150, 30);
		jp3.add(textField3);
		textField3.setColumns(15);
		
		JLabel label3 = new JLabel("请输入教师编号");
		label3.setFont(new Font("宋体", Font.PLAIN, 20));
		label3.setBounds(50, 10, 180, 30);
		jp3.add(label3);
	
	    JButton sel3=new JButton("查询");
	    sel3.setContentAreaFilled(false);	
	    sel3.setFont(new Font("黑体",Font.BOLD,14));
	    sel3.setBounds(392, 10, 80, 30);
		jp3.add(sel3);
		
		JButton re3=new JButton("刷新");
		re3.setBounds(472, 10, 80, 30);
		re3.setContentAreaFilled(false);	
		re3.setFont(new Font("黑体",Font.BOLD,14));
		jp3.add(re3);
		
		JButton alter3=new JButton("修改");
		alter3.setBounds(673, 51, 80, 30);
		alter3.setContentAreaFilled(false);	
		alter3.setFont(new Font("黑体",Font.BOLD,14));
		jp3.add(alter3);
		
		JLabel label3_1 = new JLabel("需要删除的教师编号：");
		label3_1.setFont(new Font("宋体", Font.PLAIN, 20));
		label3_1.setBounds(10, 540, 220, 30);
		jp3.add(label3_1);
	
		JTextField textField3_1 = new JTextField();
		textField3_1.setFont(new Font("宋体", Font.PLAIN, 15));
		textField3_1.setColumns(15);
		textField3_1.setBounds(232, 542, 150, 30);
		jp3.add(textField3_1);
		
		JButton add3 = new JButton("添加");
		add3.setFont(new Font("黑体", Font.BOLD, 14));
		add3.setContentAreaFilled(false);
		add3.setBounds(673, 91, 80, 30);
		jp3.add(add3);
		
		JButton del3 = new JButton("删除");
		del3 .setFont(new Font("黑体", Font.BOLD, 14));
		del3 .setContentAreaFilled(false);
		del3 .setBounds(392, 542, 80, 30);		    
		jp3.add(del3);
	    sel3.addActionListener(new ActionListener()
	    {
	        public void actionPerformed(ActionEvent e)
	        {    	
	        	try 
	        	{
	        		String driverClassName = "com.mysql.jdbc.Driver";	//启动驱动
					String url = "jdbc:mysql://127.0.0.1:3306/sims?useSSL=false";	//设置连接路径
					String username = "root";	//数据库用户名
					String password = "123456";	//数据库连接密码
					Connection con = null;		//连接
					Statement stmt = null;	//使用预编译语句	
					Class.forName(driverClassName); //执行驱动
					con = DriverManager.getConnection(url, username, password); //获取连接												
					System.out.println(con);
					stmt = con.createStatement();
					  myModel3.getDataVector().clear();
					  String  s2="Select * from teacher where t_id='"+ textField3.getText()+"' ";
					  ResultSet r2=stmt.executeQuery(s2);
					  while(r2.next())
					  { 	
						  myModel3.getDataVector().clear();
						  System.out.println("操作成功419");
						  Vector<String> ve1 = new Vector<String>();
						  ve1.addElement(r2.getString(1));
						  ve1.addElement(r2.getString(2));
						  ve1.addElement(r2.getString(3));
						  ve1.addElement(r2.getString(4));
						  ve1.addElement(r2.getString(5));
						  myModel3.addRow(ve1);	
					  }
	    	
					  con.close();	
	        	}catch (ClassNotFoundException ex) {
	        		System.out.println("没有找到对应的数据库驱动类");
	        	}
	        	catch (SQLException ex) {
	        		System.out.println("数据库连接或者是数据库操作失败");
	        	}
 	        }
	    });

	    re3.addActionListener(new ActionListener()
	    {
	        public void actionPerformed(ActionEvent e)
	        {    	
	        	try 
	        	{
	        		String driverClassName = "com.mysql.jdbc.Driver";	//启动驱动
					String url = "jdbc:mysql://127.0.0.1:3306/sims?useSSL=false";	//设置连接路径
					String username = "root";	//数据库用户名
					String password = "123456";	//数据库连接密码
					Connection con = null;		//连接
					Statement stmt = null;	//使用预编译语句	
					Class.forName(driverClassName); //执行驱动
					con = DriverManager.getConnection(url, username, password); //获取连接												
					System.out.println(con);
					stmt = con.createStatement();
					
					   
				    myModel3.getDataVector().clear();
					Vector<String> v = new Vector<String>();
					myModel3.addRow(v);				
					String  s1="Select * from teacher";
					ResultSet r1=stmt.executeQuery(s1);
					myModel3_1.getDataVector().clear();
					while(r1.next())
					{
						Vector<String> ve = new Vector<String>();
						ve.addElement(r1.getString(1));
						ve.addElement(r1.getString(2));
						ve.addElement(r1.getString(3));
						ve.addElement(r1.getString(4));
						ve.addElement(r1.getString(5));
						myModel3_1.addRow(ve);
					}
					con.close();
	        	}
					
				catch (ClassNotFoundException ex) {
					System.out.println("没有找到对应的数据库驱动类");
				}
				catch (SQLException ex) {
					System.out.println("数据库连接或者是数据库操作失败");
				}
		 	}
	    });
			        
	    alter3.addActionListener(new ActionListener() 
	    {	
	    	public void actionPerformed(ActionEvent e)
	        {    	
	        	try 
	        	{
	        		String driverClassName = "com.mysql.jdbc.Driver";	//启动驱动
					String url = "jdbc:mysql://127.0.0.1:3306/sims?useSSL=false";	//设置连接路径
					String username = "root";	//数据库用户名
					String password = "123456";	//数据库连接密码
					Connection con = null;		//连接
					Statement stmt = null;	//使用预编译语句	
					Class.forName(driverClassName); //执行驱动
					con = DriverManager.getConnection(url, username, password); //获取连接												
					System.out.println(con);
					stmt = con.createStatement();
				
					String c1=(String) myModel3.getValueAt(0,1);		
					String c2=(String) myModel3.getValueAt(0,2);
					String c3=(String) myModel3.getValueAt(0,3);	
					String c4=(String) myModel3.getValueAt(0,4);	
				
					String  s1="Update teacher set t_name='"+c1+"' , t_sex='"+c2+"',position='"+c3+"',t_tel='"+c4+"' "
								+ "where t_id='"+textField3.getText()+"' ";
					int r1=stmt.executeUpdate(s1);
					myModel3.getDataVector().clear();		
					if(r1!=0)
					{
						JOptionPane.showMessageDialog(null, "修改成功","提示消息",JOptionPane.WARNING_MESSAGE);		
					}			
					
						
				
					con.close();
	        	}				
				catch (ClassNotFoundException ex) {
					System.out.println("没有找到对应的数据库驱动类");
				}
				catch (SQLException ex) {
					System.out.println("数据库连接或者是数据库操作失败");
				}
	        }
	    });
		 	        		    
	    del3.addActionListener(new ActionListener()
	    {
	        public void actionPerformed(ActionEvent e)
	        {    	
	        	try 
	        	{
	        		String driverClassName = "com.mysql.jdbc.Driver";	//启动驱动
					String url = "jdbc:mysql://127.0.0.1:3306/sims?useSSL=false";	//设置连接路径
					String username = "root";	//数据库用户名
					String password = "123456";	//数据库连接密码
					Connection con = null;		//连接
					Statement stmt = null;	//使用预编译语句	
					Class.forName(driverClassName); //执行驱动
					con = DriverManager.getConnection(url, username, password); //获取连接												
					System.out.println(con);
					stmt = con.createStatement();
	    		
					String  s="Select * from teacher where t_id= '"+ textField3_1.getText()+"' ";
					ResultSet r=stmt.executeQuery(s);
					if(r.next())
					{
						String s1=" delete from teacher where t_id='"+ textField3_1.getText()+"'";
						int r1=stmt.executeUpdate(s1);
						if(r1!=0)
						{
							JOptionPane.showMessageDialog(null, "删除成功","提示消息",JOptionPane.WARNING_MESSAGE);		
						}			
					}
					
					else 
					{	
						JOptionPane.showMessageDialog(null, "该学生不存在！","提示消息",JOptionPane.WARNING_MESSAGE);				
					}
					con.close();	
	        	}catch (ClassNotFoundException ex) {
	        		System.out.println("没有找到对应的数据库驱动类");
	        	}
	        	catch (SQLException ex) {
	        		System.out.println("数据库连接或者是数据库操作失败");
	        	}
	        } 
	    });
	  
        add3.addActionListener(new ActionListener() 
	    {	
	    	public void actionPerformed(ActionEvent e)
	        {    	
	        	try 
	        	{
	        		String driverClassName = "com.mysql.jdbc.Driver";	//启动驱动
					String url = "jdbc:mysql://127.0.0.1:3306/sims?useSSL=false";	//设置连接路径
					String username = "root";	//数据库用户名
					String password = "123456";	//数据库连接密码
					Connection con = null;		//连接
					Statement stmt = null;	//使用预编译语句	
					Class.forName(driverClassName); //执行驱动
					con = DriverManager.getConnection(url, username, password); //获取连接												
					System.out.println(con);
					stmt = con.createStatement();
					String c0=(String) myModel3.getValueAt(0, 0);
					String c1=(String) myModel3.getValueAt(0, 1);
					String c2=(String) myModel3.getValueAt(0, 2);
					String c3=(String) myModel3.getValueAt(0, 3);
					String c4=(String) myModel3.getValueAt(0, 4);
					
					String  s="Select * from teacher where t_id= '"+c0+"' ";							    		
					ResultSet r=stmt.executeQuery(s);
				
					if(r.next())
					{
						JOptionPane.showMessageDialog(null, "已存在","提示消息",JOptionPane.WARNING_MESSAGE);									
					}
					else
					{
						String  s1="insert into teacher values( '"+c0+"','"+c1+"','"+c2+"','"+c3+"',"
							+ " '"+c4+"') ";	
						int r1=stmt.executeUpdate(s1);	
						if(r1!=0)
						{
							JOptionPane.showMessageDialog(null, "添加成功","提示消息",JOptionPane.WARNING_MESSAGE);		
						}
					}
					
					con.close();
	        	}				
				catch (ClassNotFoundException ex) {
					System.out.println("没有找到对应的数据库驱动类");
				}
				catch (SQLException ex) {
					System.out.println("数据库连接或者是数据库操作失败");
				}
	        }
	    });
			    
	    
	    
	    
	    
	    //jp4
	    String[][] datas4 = {};
	    String[] titles4 = { "课程编号","课程类型", "课程名称","任课老师","学分"};
	    DefaultTableModel myModel4 = new DefaultTableModel(datas4, titles4);
	    JTable table4  = new JTable(myModel4);
	    table4.setDefaultRenderer(Object.class,cr);
	    table4.setRowHeight(20);
	    table4.setPreferredScrollableViewportSize(new Dimension(550, 100));
	    
		Vector<String> v4 = new Vector<String>();
		myModel4.addRow(v4);
		//增添空白行方便添加数据
	    
	    JScrollPane scrollPane4 = new JScrollPane(table4); 
	    scrollPane4.setSize(633, 61);
	    scrollPane4.setLocation(0, 52);
	    jp4.add(scrollPane4);
	    
	          
	    DefaultTableModel myModel4_1  = new DefaultTableModel(datas4, titles4);// myModel存放表格的数据	    
	    JTable table4_1  = new JTable(myModel4_1);// 表格对象table的数据来源是myModel对象       	   	    
	    table4_1.setDefaultRenderer(Object.class,cr); //内容居中
	    table4_1.setPreferredScrollableViewportSize(new Dimension(550, 100));// 表格的显示尺寸      	         
	    table4_1.setRowHeight(20);//行高
	    JScrollPane scrollPane4_1 = new JScrollPane(table4_1);
		scrollPane4_1.setBounds(0, 116, 633, 400);
		jp4.add(scrollPane4_1);	     
	    
		String  s4="Select * from course";
		ResultSet r4=stmt.executeQuery(s4);
		while(r4.next())
		{
			 
			Vector<String> ve = new Vector<String>();
			ve.addElement(r4.getString(1));
			ve.addElement(r4.getString(2));
			ve.addElement(r4.getString(3));
			ve.addElement(r4.getString(4));
			ve.addElement(r4.getString(5));			
			myModel4_1.addRow(ve);
		}
	    
	    
		JTextField textField4 = new JTextField();
		textField4.setFont(new Font("宋体", Font.PLAIN, 15));
		textField4.setBounds(232, 12, 150, 30);
		jp4.add(textField4);
		textField4.setColumns(15);
		
		JLabel label4 = new JLabel("请输入课程编号");
		label4.setFont(new Font("宋体", Font.PLAIN, 20));
		label4.setBounds(50, 10, 180, 30);
		jp4.add(label4);
	
	    JButton sel4=new JButton("查询");
	    sel4.setContentAreaFilled(false);	
	    sel4.setFont(new Font("黑体",Font.BOLD,14));
	    sel4.setBounds(392, 10, 80, 30);
		jp4.add(sel4);
		
		JButton re4=new JButton("刷新");
	    re4.setBounds(472, 10, 80, 30);
	    re4.setContentAreaFilled(false);	
	    re4.setFont(new Font("黑体",Font.BOLD,14));
	    jp4.add(re4);
	    
	    JButton alter4=new JButton("修改");
	    alter4.setBounds(673, 51, 80, 30);
	    alter4.setContentAreaFilled(false);	
	    alter4.setFont(new Font("黑体",Font.BOLD,14));
	    jp4.add(alter4);
	    
	    JLabel label4_1 = new JLabel("需要删除的课程编号");
		label4_1.setFont(new Font("宋体", Font.PLAIN, 20));
		label4_1.setBounds(10, 540, 220, 30);
		jp4.add(label4_1);
	
		JTextField textField4_1 = new JTextField();
		textField4_1.setFont(new Font("宋体", Font.PLAIN, 15));
		textField4_1.setColumns(15);
		textField4_1.setBounds(232, 542, 150, 30);
		jp4.add(textField4_1);
		
		JButton add4 = new JButton("添加");
		add4.setFont(new Font("黑体", Font.BOLD, 14));
		add4.setContentAreaFilled(false);
		add4.setBounds(673, 91, 80, 30);
		jp4.add(add4);
		
		JButton del4 = new JButton("删除");
		del4 .setFont(new Font("黑体", Font.BOLD, 14));
		del4 .setContentAreaFilled(false);
		del4 .setBounds(392, 542, 80, 30);
		jp4.add(del4);
		  
	    sel4.addActionListener(new ActionListener()
	    {
	        public void actionPerformed(ActionEvent e)
	        {    	
	        	try 
	        	{
	        		String driverClassName = "com.mysql.jdbc.Driver";	//启动驱动
					String url = "jdbc:mysql://127.0.0.1:3306/sims?useSSL=false";	//设置连接路径
					String username = "root";	//数据库用户名
					String password = "123456";	//数据库连接密码
					Connection con = null;		//连接
					Statement stmt = null;	//使用预编译语句	
					Class.forName(driverClassName); //执行驱动
					con = DriverManager.getConnection(url, username, password); //获取连接												
					System.out.println(con);
					stmt = con.createStatement();
					
					myModel4.getDataVector().clear();
					String  s2="Select * from course where c_id='"+textField4.getText()+"'";
					ResultSet r2=stmt.executeQuery(s2);
					while(r2.next())
					{
	    			
						System.out.println("操作成功168");
						Vector<String> ve1 = new Vector<String>();
						ve1.addElement(r2.getString(1));
						ve1.addElement(r2.getString(2));
						ve1.addElement(r2.getString(3));
						ve1.addElement(r2.getString(4));
						ve1.addElement(r2.getString(5));
						myModel4.addRow(ve1);	
					}
	    	
					con.close();	
	        	}catch (ClassNotFoundException ex) {
				System.out.println("没有找到对应的数据库驱动类");
	        	}
	        	catch (SQLException ex) {
	        		System.out.println("数据库连接或者是数据库操作失败");
	        	}
 	        }
	    });
	  
	    re4.addActionListener(new ActionListener()
	    {
	        public void actionPerformed(ActionEvent e)
	        {    	
	        	try 
	        	{
	        		String driverClassName = "com.mysql.jdbc.Driver";	//启动驱动
					String url = "jdbc:mysql://127.0.0.1:3306/sims?useSSL=false";	//设置连接路径
					String username = "root";	//数据库用户名
					String password = "123456";	//数据库连接密码
					Connection con = null;		//连接
					Statement stmt = null;	//使用预编译语句	
					Class.forName(driverClassName); //执行驱动
					con = DriverManager.getConnection(url, username, password); //获取连接												
					System.out.println(con);
					stmt = con.createStatement();
						   
				    myModel4.getDataVector().clear();
					Vector<String> v = new Vector<String>();
					myModel4.addRow(v);						
					String  s1="Select * from course";
					ResultSet r1=stmt.executeQuery(s1);
					myModel4_1.getDataVector().clear();
					while(r1.next())
					{
						 Vector<String> ve = new Vector<String>();
							ve.addElement(r1.getString(1));
							ve.addElement(r1.getString(2));
							ve.addElement(r1.getString(3));
							ve.addElement(r1.getString(4));
							ve.addElement(r1.getString(5));
							myModel4_1.addRow(ve);
					}
					con.close();
	        	}
					
				catch (ClassNotFoundException ex) {
					System.out.println("没有找到对应的数据库驱动类");
				}
				catch (SQLException ex) {
					System.out.println("数据库连接或者是数据库操作失败");
				}
		 	}
	    });
			        
	    alter4.addActionListener(new ActionListener() 
	    {	
	    	public void actionPerformed(ActionEvent e)
	        {    	
	        	try 
	        	{
	        		String driverClassName = "com.mysql.jdbc.Driver";	//启动驱动
					String url = "jdbc:mysql://127.0.0.1:3306/sims?useSSL=false";	//设置连接路径
					String username = "root";	//数据库用户名
					String password = "123456";	//数据库连接密码
					Connection con = null;		//连接
					Statement stmt = null;	//使用预编译语句	
					Class.forName(driverClassName); //执行驱动
					con = DriverManager.getConnection(url, username, password); //获取连接												
					System.out.println(con);
					stmt = con.createStatement();
				    
					String c1=(String) myModel4.getValueAt(0,1);		
					String c2=(String) myModel4.getValueAt(0,2);
					String c3=(String) myModel4.getValueAt(0,3);	
					String c4=(String) myModel4.getValueAt(0,4);	
				
					String  s1="Update course set c_type='"+c1+"' , c_name='"+c2+"',c_teacher='"+c3+"',c_score='"+c4+"' "
								+ "where c_id='"+textField4.getText()+"' ";
					int r1=stmt.executeUpdate(s1);
					myModel4.getDataVector().clear();		
					if(r1!=0)
					{
						JOptionPane.showMessageDialog(null, "修改成功","提示消息",JOptionPane.WARNING_MESSAGE);		
					}			
			
					con.close();
	        	}				
				catch (ClassNotFoundException ex) {
					System.out.println("没有找到对应的数据库驱动类");
				}
				catch (SQLException ex) {
					System.out.println("数据库连接或者是数据库操作失败");
				} 
	        }
	    });
	    
	    del4.addActionListener(new ActionListener()
	    {
	        public void actionPerformed(ActionEvent e)
	        {    	
	        	try 
	        	{
	        		String driverClassName = "com.mysql.jdbc.Driver";	//启动驱动
					String url = "jdbc:mysql://127.0.0.1:3306/sims?useSSL=false";	//设置连接路径
					String username = "root";	//数据库用户名
					String password = "123456";	//数据库连接密码
					Connection con = null;		//连接
					Statement stmt = null;	//使用预编译语句	
					Class.forName(driverClassName); //执行驱动
					con = DriverManager.getConnection(url, username, password); //获取连接												
					System.out.println(con);
					stmt = con.createStatement();
	    		
					String  s="Select * from course where c_id= '"+ textField4_1.getText()+"' ";
					ResultSet r=stmt.executeQuery(s);
					if(r.next())
					{
						String s1=" delete from course where c_id='"+ textField4_1.getText()+"'";
						int r1=stmt.executeUpdate(s1);
						if(r1!=0)
						{
							JOptionPane.showMessageDialog(null, "删除成功","提示消息",JOptionPane.WARNING_MESSAGE);		
						}			
					}
					
					else 
					{	
						JOptionPane.showMessageDialog(null, "该课程不存在！","提示消息",JOptionPane.WARNING_MESSAGE);				
					}
					con.close();	
	        	}catch (ClassNotFoundException ex) {
	        		System.out.println("没有找到对应的数据库驱动类");
	        	}
	        	catch (SQLException ex) {
	        		System.out.println("数据库连接或者是数据库操作失败");
	        	}	
 	        } 
	    });
	  
        add4.addActionListener(new ActionListener() 
	    {	
	    	public void actionPerformed(ActionEvent e)
	        {    	
	        	try 
	        	{
	        		String driverClassName = "com.mysql.jdbc.Driver";	//启动驱动
					String url = "jdbc:mysql://127.0.0.1:3306/sims?useSSL=false";	//设置连接路径
					String username = "root";	//数据库用户名
					String password = "123456";	//数据库连接密码
					Connection con = null;		//连接
					Statement stmt = null;	//使用预编译语句	
					Class.forName(driverClassName); //执行驱动
					con = DriverManager.getConnection(url, username, password); //获取连接												
					System.out.println(con);
					stmt = con.createStatement();
					
					String c0=(String) myModel4.getValueAt(0, 0);
					String c1=(String) myModel4.getValueAt(0, 1);
					String c2=(String) myModel4.getValueAt(0, 2);
					String c3=(String) myModel4.getValueAt(0, 3);
					String c4=(String) myModel4.getValueAt(0, 4);
					
					String  s="Select * from course where c_id= '"+c0+"' ";							    		
					ResultSet r=stmt.executeQuery(s);			
					if(r.next())
					{
						JOptionPane.showMessageDialog(null, "已存在","提示消息",JOptionPane.WARNING_MESSAGE);									
					}
					else 
					{						
						String  s2=" Select * from teacher where t_name= '"+c3+"' ";
						ResultSet r3=stmt.executeQuery(s2);
					
						if(r3.next())
						{
							String  s1="insert into course values( '"+c0+"','"+c1+"','"+c2+"','"+c3+"','"+c4+"') ";	
						
							int r1=stmt.executeUpdate(s1);	
							if(r1!=0)
							{
								JOptionPane.showMessageDialog(null, "添加成功","提示消息",JOptionPane.WARNING_MESSAGE);		
							}
						}
						else
						{
							JOptionPane.showMessageDialog(null, "老师不存在","提示消息",JOptionPane.WARNING_MESSAGE);
					    }
					}
						
					
					con.close();
	        	}				
				catch (ClassNotFoundException ex) {
					System.out.println("没有找到对应的数据库驱动类");
				}
				catch (SQLException ex) {
					System.out.println("数据库连接或者是数据库操作失败");			
				}
	        }
	    });

	    //jp5
	    String[][] datas5 = {};
	    String[] titles5 = { "学生学号","课程名称","授课老师", "课程学分","成绩"};
	    String[][] datas5_1 = {};
	    String[] titles5_1 = { "课程号","班级", "学号","姓名","成绩"};
	    DefaultTableModel myModel5 = new DefaultTableModel(datas5_1, titles5_1);
	    JTable table5  = new JTable(myModel5);
	    table5.setDefaultRenderer(Object.class,cr);
	    table5.setRowHeight(20);
	    table5.setPreferredScrollableViewportSize(new Dimension(550, 100));

	    JScrollPane scrollPane5 = new JScrollPane(table5); 
	    scrollPane5.setSize(633, 261);
	    scrollPane5.setLocation(0, 52);
	    jp5.add(scrollPane5);
	    
	          
	    DefaultTableModel myModel5_1  = new DefaultTableModel(datas5, titles5);// myModel存放表格的数据	    
	    JTable table5_1  = new JTable(myModel5_1);// 表格对象table的数据来源是myModel对象       	   	    
	    table5_1.setDefaultRenderer(Object.class,cr); //内容居中
	    table5_1.setPreferredScrollableViewportSize(new Dimension(550, 100));// 表格的显示尺寸     	         
	    table5_1.setRowHeight(20);//行高
	    
	    JScrollPane scrollPane5_1 = new JScrollPane(table5_1);
		scrollPane5_1.setBounds(0, 316, 633, 300);
		jp5.add(scrollPane5_1);	
		
		String  s5="Select * from sc,course where sc.c_id =course.c_id ";
//		Select * from sc,course where sc.c_id =course.c_id
		ResultSet r5=stmt.executeQuery(s5);
		while(r5.next())
		{
			 
		Vector<String> ve = new Vector<String>();
		ve.addElement(r5.getString(1));
		ve.addElement(r5.getString(2));
		ve.addElement(r5.getString(7));
		ve.addElement(r5.getString(8));	
		ve.addElement(r5.getString(3));
		myModel5_1.addRow(ve);
		}	    
		con.close();
	    
	    JTextField textField5 = new JTextField();
		textField5.setFont(new Font("宋体", Font.PLAIN, 15));
		textField5.setBounds(232, 12, 150, 30);
		jp5.add(textField5);
		textField5.setColumns(15);
		
		JLabel label5 = new JLabel("请输入课程编号");
		label5.setFont(new Font("宋体", Font.PLAIN, 20));
		label5.setBounds(50, 10, 180, 30);
		jp5.add(label5);
	
	    JButton sel5=new JButton("查询");
	    sel5.setContentAreaFilled(false);	
	    sel5.setFont(new Font("黑体",Font.BOLD,14));
	    sel5.setBounds(392, 10, 80, 30);
		jp5.add(sel5);
		
		JButton re5=new JButton("刷新");
	    re5.setBounds(472, 10, 80, 30);
	    re5.setContentAreaFilled(false);	
	    re5.setFont(new Font("黑体",Font.BOLD,14));
	    jp5.add(re5);
	    
	    JButton alter5=new JButton("修改");
	    alter5.setBounds(673, 51, 80, 30);
	    alter5.setContentAreaFilled(false);	
	    alter5.setFont(new Font("黑体",Font.BOLD,14));
	    jp5.add(alter5);
		
	    sel5.addActionListener(new ActionListener()
	    {
	        public void actionPerformed(ActionEvent e)
	        {    	
	        	try 
	        	{
	        		String driverClassName = "com.mysql.jdbc.Driver";	//启动驱动
					String url = "jdbc:mysql://127.0.0.1:3306/sims?useSSL=false";	//设置连接路径
					String username = "root";	//数据库用户名
					String password = "123456";	//数据库连接密码
					Connection con = null;		//连接
					Statement stmt = null;	//使用预编译语句	
					Class.forName(driverClassName); //执行驱动
					con = DriverManager.getConnection(url, username, password); //获取连接												
					System.out.println(con);
					stmt = con.createStatement();
	    		
					String  s2="Select * from sc,students where c_id='"+textField5.getText()+"' and sc.s_id=students.s_id";
					ResultSet r2=stmt.executeQuery(s2);
					myModel5.getDataVector().clear();
					while(r2.next())
					{
						System.out.println("操作成功168");
						Vector<String> ve1 = new Vector<String>();
						ve1.addElement(r2.getString(2));
						ve1.addElement(r2.getString(7));
						ve1.addElement(r2.getString(1));
						ve1.addElement(r2.getString(5));
						ve1.addElement(r2.getString(3));
						myModel5.addRow(ve1);	
					}    	
					con.close();	
	    		
	        	}catch (ClassNotFoundException ex) {
	        		System.out.println("没有找到对应的数据库驱动类");
	        	}
	        	catch (SQLException ex) {
	        		System.out.println("数据库连接或者是数据库操作失败");
	        	} 
	        }
	    });
    
	    re5.addActionListener(new ActionListener()
	    {
	        public void actionPerformed(ActionEvent e)
	        {    	
	        	try 
	        	{
	        		String driverClassName = "com.mysql.jdbc.Driver";	//启动驱动
					String url = "jdbc:mysql://127.0.0.1:3306/sims?useSSL=false";	//设置连接路径
					String username = "root";	//数据库用户名
					String password = "123456";	//数据库连接密码
					Connection con = null;		//连接
					Statement stmt = null;	//使用预编译语句	
					Class.forName(driverClassName); //执行驱动
					con = DriverManager.getConnection(url, username, password); //获取连接												
					System.out.println(con);
					stmt = con.createStatement();
					myModel5_1.getDataVector().clear();	
				   
				    myModel5.getDataVector().clear();
					Vector<String> v = new Vector<String>();
					myModel5.addRow(v);					
					String  s5="Select * from sc,course where sc.c_id =course.c_id ";
					ResultSet r5=stmt.executeQuery(s5);
					while(r5.next())
					{
						 
					    Vector<String> ve = new Vector<String>();
						ve.addElement(r5.getString(1));
						ve.addElement(r5.getString(2));
						ve.addElement(r5.getString(7));
						ve.addElement(r5.getString(8));	
						ve.addElement(r5.getString(3));
						myModel5_1.addRow(ve);
					}	 
					con.close();
	        	}
					
				catch (ClassNotFoundException ex) {
					System.out.println("没有找到对应的数据库驱动类");
				}
				catch (SQLException ex) {
					System.out.println("数据库连接或者是数据库操作失败");
				}
	        }
	    });
			        
	    alter5.addActionListener(new ActionListener() 
	    {	
	    	public void actionPerformed(ActionEvent e)
	        {    	
	        	try 
	        	{
	        		String driverClassName = "com.mysql.jdbc.Driver";	//启动驱动
					String url = "jdbc:mysql://127.0.0.1:3306/sims?useSSL=false";	//设置连接路径
					String username = "root";	//数据库用户名
					String password = "123456";	//数据库连接密码
					Connection con = null;		//连接
					Statement stmt = null;	//使用预编译语句	
					Class.forName(driverClassName); //执行驱动
					con = DriverManager.getConnection(url, username, password); //获取连接												
					System.out.println(con);
					stmt = con.createStatement();
				    
					int i=myModel5.getRowCount();
					System.out.println("i"+i);
					
					int r=0;
					for(int j=0;j<i;j++)
					{
						System.out.println("j"+j);
						String c4=(String) myModel5.getValueAt(j,4);	
						String c0=(String) myModel5.getValueAt(j,2);	
						String  s1="Update sc set s_score='"+c4+"' where s_id='"+c0+"' "
								+ "and c_id='"+textField5.getText()+"' ";
						System.out.println(c4+c0+textField5.getText());
						r=r+stmt.executeUpdate(s1);					
					}					
					myModel5.getDataVector().clear();	
					System.out.println("r"+r);				
					if(r==i)
					{
						JOptionPane.showMessageDialog(null, "修改成功","提示消息",JOptionPane.WARNING_MESSAGE);		
					}			
			
					con.close();
	        	}				
				catch (ClassNotFoundException ex) {
					System.out.println("没有找到对应的数据库驱动类");
				}
				catch (SQLException ex) {
					System.out.println("数据库连接或者是数据库操作失败");
				} 
	        }
	    });
		 	       
			    
	    //jp6修改密码界面
	    JButton bt1 = new JButton("确认");
		bt1.setBounds(262, 172, 93, 30);	
		bt1.setFont(new Font("黑体",Font.PLAIN,25));
		JPasswordField p1=new JPasswordField();
		JPasswordField p2=new JPasswordField();
		p1.setBackground(Color.WHITE);
		p2.setBackground(Color.WHITE);
		p1.setBounds(233, 75, 150, 30);							
		p2.setBounds(233, 116, 150, 30);
		
		JLabel old_p=new JLabel("\u65E7\u5BC6\u7801:");
		JLabel new_p=new JLabel("\u65B0\u5BC6\u7801:");
		old_p.setFont(new Font("黑体",Font.PLAIN,25));
		new_p.setFont(new Font("黑体",Font.PLAIN,25));
		old_p.setBounds(130, 75, 93, 30);							
		new_p.setBounds(130, 116, 93, 30);
		
	
		bt1.addActionListener(new ActionListener(){
	        public void actionPerformed(ActionEvent e)
	        {
	        	try 
	        	{
	        		char[] oldpassword=p1.getPassword();
	        		char[] newpassword=p2.getPassword();
	        		String old_password=new String(oldpassword);
	        		String new_password=new String(newpassword);
	        		String u=new String(t_login.user.getText());
	        		System.out.println(u);
	        		System.out.println(old_password);
	        		System.out.println(new_password);
	        		
	        		String driverClassName = "com.mysql.jdbc.Driver";	//启动驱动
					String url = "jdbc:mysql://127.0.0.1:3306/sims?useSSL=false";	//设置连接路径
					String username = "root";	//数据库用户名
					String password = "123456";	//数据库连接密码
					Connection con = null;		//连接
					Statement stm = null;	//使用预编译
					Class.forName(driverClassName); //执行驱动
					con = DriverManager.getConnection(url, username, password); //获取连接											
					System.out.println(con);
					stm = con.createStatement();
			        
					String  strSQL="(Select * from user where userid='"+u+"' And password='"+old_password+"')";
					ResultSet rs=stm.executeQuery(strSQL);
					//System.out.println(rs.next());												
					if(rs.next())
					{							 				    					
						String  strSQL_1="update user set password='"+new_password+"' where userid='"+u+"' ";							
						int rr=stm.executeUpdate(strSQL_1);
						
     					if(rr!=0)
     					{
     						JOptionPane.showMessageDialog(null,"修改成功啦:D");
     					}				
					}	
				
					else JOptionPane.showMessageDialog(null,"旧密码错误","错误!",JOptionPane.ERROR_MESSAGE);																
					con.close();
					stm.close();
					rs.close();
	        	}catch (ClassNotFoundException ex) {
					System.out.println("没有找到对应的数据库驱动类");
				}
				catch (SQLException ex) {
					System.out.println("数据库连接或者是数据库操作失败");
				}
	        }
	    });
	
		jp6.add(p2);
		jp6.add(p1);
		jp6.add(bt1);
		jp6.add(old_p);
		jp6.add(new_p);
		
//////////////////////////////////////////////////////////////////		
		jtbp=new JTabbedPane(JTabbedPane.LEFT);
		jtbp.setFont(new Font("楷体",Font.PLAIN,30));  //创建选项卡并使选项卡垂直排列
		jtbp.add("学生信息",jp1);
		jtbp.add("班级信息",jp2);	
		jtbp.add("老师信息",jp3);
		jtbp.add("课程信息",jp4);
		jtbp.add("成绩信息",jp5);
		jtbp.add("修改密码",jp6);
		getContentPane().add(jtbp); 
	
	}
		
	public  void closeThis()//关闭当前界面
	{
		this.dispose();
	}
}
[/cc]
<!-- /wp:html -->]]></content:encoded>
		<excerpt:encoded><![CDATA[学生信息管理系统详细代码]]></excerpt:encoded>
		<wp:post_id>93</wp:post_id>
		<wp:post_date><![CDATA[2021-06-18 15:37:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-06-18 07:37:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[sims-java]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="java"><![CDATA[Java]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[%e5%ad%a6%e7%94%9f%e4%bf%a1%e6%81%af%e7%ae%a1%e7%90%86%e7%b3%bb%e7%bb%9fjava]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[53]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title></title>
		<link>http://blog.liobio.cn/index.php/2021/06/18/109/</link>
		<pubDate>Fri, 18 Jun 2021 11:52:07 +0000</pubDate>
		<dc:creator><![CDATA[liobio]]></dc:creator>
		<guid isPermaLink="false">http://blog.liobio.cn/?p=109</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>109</wp:post_id>
		<wp:post_date><![CDATA[2021-06-18 19:52:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-06-18 11:52:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[109]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>3</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="nav_menu" nicename="%e4%b8%bb"><![CDATA[主]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[taxonomy]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[27]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[8]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
		<wp:meta_value><![CDATA[category]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>1.两数之和</title>
		<link>http://blog.liobio.cn/index.php/2021/06/18/1-%e4%b8%a4%e6%95%b0%e4%b9%8b%e5%92%8c/</link>
		<pubDate>Fri, 18 Jun 2021 12:17:51 +0000</pubDate>
		<dc:creator><![CDATA[liobio]]></dc:creator>
		<guid isPermaLink="false">http://blog.liobio.cn/?p=115</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:html -->
[cc lang="java"]
/*
 * @lc app=leetcode.cn id=1 lang=java
 *
 * [1] 两数之和
 */

// @lc code=start
class Solution {
    public int[] twoSum(int[] nums, int target) {
    int[] out = new int[2];//动态数组的标准分配	
    int i,j;	
    for (i = 0; i< nums.length;i++) 
        {
            for(j=i+1;j< nums.length ;j++) {
                if(nums[i]+nums[j] == target) {
                    out[0] = i;
                    out[1] = j;
            
                    break;

                }
            }
        }
        return  out;
    }
}
// @lc code=end
[/cc]
<!-- /wp:html -->]]></content:encoded>
		<excerpt:encoded><![CDATA[1.两数之和]]></excerpt:encoded>
		<wp:post_id>115</wp:post_id>
		<wp:post_date><![CDATA[2021-06-18 20:17:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-06-18 12:17:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[1-%e4%b8%a4%e6%95%b0%e4%b9%8b%e5%92%8c]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="leetcode"><![CDATA[Leetcode]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[24]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>10.正则表达式匹配</title>
		<link>http://blog.liobio.cn/index.php/2021/06/18/10-%e6%ad%a3%e5%88%99%e8%a1%a8%e8%be%be%e5%bc%8f%e5%8c%b9%e9%85%8d/</link>
		<pubDate>Fri, 18 Jun 2021 12:20:13 +0000</pubDate>
		<dc:creator><![CDATA[liobio]]></dc:creator>
		<guid isPermaLink="false">http://blog.liobio.cn/?p=117</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:html -->
[cc lang="java"]
/*
 * @lc app=leetcode.cn id=10 lang=java
 *
 * [10] 正则表达式匹配
 */

// @lc code=start
class Solution {
    public boolean isMatch(String s, String p) {
        char[] cs = s.toCharArray();
        char[] cp = p.toCharArray();

        // dp[i][j]:表示s的前i个字符，p的前j个字符是否能够匹配
        boolean[][] dp = new boolean[cs.length + 1][cp.length + 1];

        // 初期值
        // s为空，p为空，能匹配上
        dp[0][0] = true;
        // p为空，s不为空，必为false(boolean数组默认值为false，无需处理)

        // s为空，p不为空，由于*可以匹配0个字符，所以有可能为true
        for (int j = 1; j <= cp.length; j++) {
            if (cp[j - 1] == '*') {
                dp[0][j] = dp[0][j - 2];
            }
        }

        // 填格子
        for (int i = 1; i <= cs.length; i++) {
            for (int j = 1; j <= cp.length; j++) {
                // 文本串和模式串末位字符能匹配上
                if (cs[i - 1] == cp[j - 1] || cp[j - 1] == '.') {
                    dp[i][j] = dp[i - 1][j - 1];
                } else if (cp[j - 1] == '*') { // 模式串末位是*
                    // 模式串*的前一个字符能够跟文本串的末位匹配上
                    if (cs[i - 1] == cp[j - 2] || cp[j - 2] == '.') {
                        dp[i][j] = dp[i][j - 2]      // *匹配0次的情况
                                || dp[i - 1][j];     // *匹配1次或多次的情况
                    } else { // 模式串*的前一个字符不能够跟文本串的末位匹配
                        dp[i][j] = dp[i][j - 2];     // *只能匹配0次
                    }
                }
            }
        }
        return dp[cs.length][cp.length];
    }
}
// @lc code=end
[/cc]
<!-- /wp:html -->]]></content:encoded>
		<excerpt:encoded><![CDATA[10.正则表达式匹配]]></excerpt:encoded>
		<wp:post_id>117</wp:post_id>
		<wp:post_date><![CDATA[2021-06-18 20:20:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-06-18 12:20:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[10-%e6%ad%a3%e5%88%99%e8%a1%a8%e8%be%be%e5%bc%8f%e5%8c%b9%e9%85%8d]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="leetcode"><![CDATA[Leetcode]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[17]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>11.盛最多水的容器</title>
		<link>http://blog.liobio.cn/index.php/2021/06/18/11-%e7%9b%9b%e6%9c%80%e5%a4%9a%e6%b0%b4%e7%9a%84%e5%ae%b9%e5%99%a8/</link>
		<pubDate>Fri, 18 Jun 2021 12:22:49 +0000</pubDate>
		<dc:creator><![CDATA[liobio]]></dc:creator>
		<guid isPermaLink="false">http://blog.liobio.cn/?p=119</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:html -->
[cc lang="java"]
/*
 * @lc app=leetcode.cn id=11 lang=java
 *
 * [11] 盛最多水的容器
 */

// @lc code=start
class Solution {
    public int maxArea(int[] height) {
        // 采用双指针放方法
        int Head = 0;
        int Tail = height.length - 1;
        int Area = 0;
        int maxArea = 0;
        while (Head != Tail) {
            Area = (Tail - Head) * (height[Tail] > height[Head] ? height[Head] : height[Tail]);
            maxArea = Area > maxArea ? Area : maxArea;
            if (height[Head] > height[Tail]) {
                Tail--;
            } else {
                Head++;
            }
        }
        return maxArea;

    }
}
// @lc code=end
[/cc]
<!-- /wp:html -->]]></content:encoded>
		<excerpt:encoded><![CDATA[11.盛最多水的容器]]></excerpt:encoded>
		<wp:post_id>119</wp:post_id>
		<wp:post_date><![CDATA[2021-06-18 20:22:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-06-18 12:22:49]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[11-%e7%9b%9b%e6%9c%80%e5%a4%9a%e6%b0%b4%e7%9a%84%e5%ae%b9%e5%99%a8]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="leetcode"><![CDATA[Leetcode]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[29]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>13.罗马数字转整数</title>
		<link>http://blog.liobio.cn/index.php/2021/06/18/13-%e7%bd%97%e9%a9%ac%e6%95%b0%e5%ad%97%e8%bd%ac%e6%95%b4%e6%95%b0/</link>
		<pubDate>Fri, 18 Jun 2021 12:24:18 +0000</pubDate>
		<dc:creator><![CDATA[liobio]]></dc:creator>
		<guid isPermaLink="false">http://blog.liobio.cn/?p=122</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:html -->
[cc lang="java"]
/*
 * @lc app=leetcode.cn id=13 lang=java
 *
 * [13] 罗马数字转整数
 */

// @lc code=start
class Solution {
    public int romanToInt(String s) {
        int out=0;
        int rev=0;
        char temp;
        int pre_value=1000;
        for(int i=0;i<s.length();i++){
            temp=s.charAt(i);
            if(temp=='I'){
                rev=1;          
            }
            if(temp=='V'){
                rev=5;            
            }
            if(temp=='X'){
                rev=10;        
            }
            if(temp=='L'){
                rev=50;     
            }
            if(temp=='C'){
                rev=100;          
            }
            if(temp=='D'){
                rev=500;           
            }
            if(temp=='M'){
                rev=1000;             
            }
            if(pre_value<rev){
                out-=2*pre_value;
                out+=rev;
            }           
            if(pre_value>=rev){
                out+=rev;
            }
            pre_value=rev;
        }
        return out;
    }
}
// @lc code=end
[/cc]
<!-- /wp:html -->]]></content:encoded>
		<excerpt:encoded><![CDATA[13.罗马数字转整数]]></excerpt:encoded>
		<wp:post_id>122</wp:post_id>
		<wp:post_date><![CDATA[2021-06-18 20:24:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-06-18 12:24:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[13-%e7%bd%97%e9%a9%ac%e6%95%b0%e5%ad%97%e8%bd%ac%e6%95%b4%e6%95%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="leetcode"><![CDATA[Leetcode]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[109]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title></title>
		<link>http://blog.liobio.cn/index.php/2021/06/18/129/</link>
		<pubDate>Fri, 18 Jun 2021 12:37:47 +0000</pubDate>
		<dc:creator><![CDATA[liobio]]></dc:creator>
		<guid isPermaLink="false">http://blog.liobio.cn/?p=129</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>129</wp:post_id>
		<wp:post_date><![CDATA[2021-06-18 20:37:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-06-18 12:37:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[129]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>8</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="nav_menu" nicename="%e4%b8%bb"><![CDATA[主]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[taxonomy]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[27]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[9]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
		<wp:meta_value><![CDATA[category]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title></title>
		<link>http://blog.liobio.cn/index.php/2021/06/29/131/</link>
		<pubDate>Tue, 29 Jun 2021 01:02:08 +0000</pubDate>
		<dc:creator><![CDATA[liobio]]></dc:creator>
		<guid isPermaLink="false">http://blog.liobio.cn/?p=131</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>131</wp:post_id>
		<wp:post_date><![CDATA[2021-06-29 09:02:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-06-29 01:02:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[131]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>4</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="nav_menu" nicename="%e4%b8%bb"><![CDATA[主]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[taxonomy]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[27]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[14]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
		<wp:meta_value><![CDATA[category]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>html总结（一）</title>
		<link>http://blog.liobio.cn/index.php/2021/06/29/html1/</link>
		<pubDate>Tue, 29 Jun 2021 03:03:53 +0000</pubDate>
		<dc:creator><![CDATA[liobio]]></dc:creator>
		<guid isPermaLink="false">http://blog.liobio.cn/?p=135</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>1.  HTML 简介</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">什么是 HTML 文件？  </p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>HTML 指超文本标签语言。  </li><li>HTML 文件是包含一些标签的文本文件。  </li><li>这些标签告诉 WEB 浏览器如何显示页面。  </li><li>HTML 文件必须使用 htm 或者 html 作为文件扩展名。  </li><li>HTML 文件可以通过简单的文本编辑器来创建。 </li></ul>
<!-- /wp:list -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">html示例文本如下</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang='html']
<!DOCTYPE html><!-- 约束,声明 -->
<!-- html标签表示html的开始   lang="zh_CN"表示中文    html标签中一般分为两部分,分别是:head和body    -->

<head>
    <!-- 表示头部信息,一般包含三部分内容,title标签,css样式,js代码 -->
    <meta charset="UTF-8"><!-- 表示当前页面使用UTF-8字符集 -->
    <title>hello</title>
    <!--表示标题-->
</head>
<!--bgcolor是背景颜色属性
    onclick表示单击(点击)事件
    br作为换行符
    alert() 是javaScript语言提供的一个警告框函数.
    它可以接收任意参数.参数就是警告框的函数信息
-->

<body bgcolor="yellow">
    <!--body标签是整个html页面显示的主体内容-->
    hello
    <b>hello</b>
    <br />
    <button onclick="alert('hello')">按钮</button>
    <br />
    <hr />

</body>

</html>
[/cc]
<!-- /wp:html -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">演示效果如下</p>
<!-- /wp:paragraph -->

<!-- wp:group -->
<div class="wp-block-group"><div class="wp-block-group__inner-container"><!-- wp:html -->
<body bgcolor="yellow" align="center">
    <!--body标签是整个html页面显示的主体内容-->
    hello
    <b>hello</b>
    <br />
    <button onclick="alert('hello')">按钮</button>
    <br />
    <hr />
</body>
<!-- /wp:html --></div></div>
<!-- /wp:group -->

<!-- wp:group -->
<div class="wp-block-group"><div class="wp-block-group__inner-container"><!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">HTML 文件中的第一个标签是 &lt;html&gt;。这个标签告诉浏览器这个 HTML 文件的开始点。文件中最后一个标签是 
&lt;/html&gt;。这个标签告诉您的浏览器，这是 HTML 文件的结束点。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">位于 &lt;head&gt; 标签和 &lt;/head&gt; 标签之间的文本是头信息。头信息不会显示在浏览器窗口中。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">&lt;title&gt; 标签中的文本是文件的标题。标题会显示在浏览器的标题栏。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">&lt;body&gt; 标签中的文本是将被浏览器显示出来的文本。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">&lt;b&gt; 和 &lt;/b&gt; 标签中的文本将以粗体显示。</p>
<!-- /wp:paragraph --></div></div>
<!-- /wp:group -->

<!-- wp:heading -->
<h2>2.标签语法</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">html示例文本如下</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang='html']
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>标签语法</title>
</head>
<body>

	<!-- 标签不能交叉嵌套 -->
	正确：<div><span>hello,liobio</span></div>
	错误：<div><span>hello,liobio</div></span>
	<hr />

	<!-- 标签必须正确关闭(闭合) -->
	<!-- 有文本内容的标签： -->
	正确：<div>hello,liobio</div>
	错误：<div>hello,liobio
	<hr />
		
	<!-- 属性必须有值，属性值必须加引号 -->
	正确：<font color="red">hello,liobio</font>
	错误：<font color=r>hello,liobio</font>
	错误：<font color>hello,liobio</font>
	<hr />
		
	<!-- 注释不能嵌套 -->
	正确：<!-- 注释内容 --> <br/>
	错误：<!-- 注释内容 <!-- 注释内容 -->-->
	<hr />
</body>
</html>
[/cc]
<!-- /wp:html -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">效果如下：</p>
<!-- /wp:paragraph -->

<!-- wp:group -->
<div class="wp-block-group"><div class="wp-block-group__inner-container"><!-- wp:html -->
<body align="center">

	<!-- 标签不能交叉嵌套 -->
	正确：<div><span>hello,liobio</span></div>
	错误：<div><span>hello,liobio</div></span>
	<hr />

	<!-- 标签必须正确关闭(闭合) -->
	<!-- 有文本内容的标签： -->
	正确：<div>hello,liobio</div>
	错误：<div>hello,liobio（浏览器补全了闭合标签）
	<hr />
	
	<!-- 属性必须有值，属性值必须加引号 -->
	正确：<font color="red">hello,liobio<br/></font>
	错误：<font color=red>hello,liobio(浏览器补全的引号)<br ></font>
	错误：<font color>hello,liobio<br /></font>
	<hr />
		
	<!-- 注释不能嵌套 -->
	正确：<!-- 注释内容 --> <br/>
	错误：<!-- 注释内容 <!-- 注释内容 -->-->
	<hr />
</body>
<!-- /wp:html --></div></div>
<!-- /wp:group -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">从上面的html可以看到，浏览器在碰到一些简单的语法错误时，会自动修正。部分代码得以正确显示。</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>3.特殊字符</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":4} -->
<h4>字符实体</h4>
<!-- /wp:heading -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">一些字符在 HTML 中拥有特殊的含义，比如小于号 (&lt;) 用于定义 HTML 标签的开始。如果我们希望浏览器正确地显示这些字符，我们必须在 
HTML 源码中插入字符实体。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">字符实体有三部分：一个和号 (&amp;)，一个实体名称，或者 # 和一个实体编号，以及一个分号 (;)。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">要在 HTML 文档中显示小于号，我们需要这样写：<em>&amp;lt;</em> 或者 <em>&amp;#60;</em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">使用实体名称而不是实体编号的好处在于，名称相对来说更容易记忆。而这么做的坏处是，并不是所有的浏览器都支持最新的实体名称，然而几乎所有的浏览器对实体编号的支持都很好。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">注意：实体对大小写敏感。</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>空格</h4>
<!-- /wp:heading -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">空格是 HTML 中最普通的字符实体。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">通常情况下，HTML 会裁掉文档中的空格。假如你在文档中连续输入 10 个空格，那么 HTML 会去掉其中的9个。如果使用  &nbsp;，就可以在文档中增加空格。</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>最常用的字符实体</h4>
<!-- /wp:heading -->

<!-- wp:table -->
<figure class="wp-block-table"><table class=""><tbody><tr><th>显示结果</th><th>描述</th><th>实体名称</th><th>实体编号</th></tr><tr><td>&nbsp;</td><td>空格</td><td>&amp;nbsp;</td><td>&amp;#160;</td></tr><tr><td>&lt;</td><td>小于号</td><td>&amp;lt;</td><td>&amp;#60;</td></tr><tr><td>&gt;</td><td>大于号</td><td>&amp;gt;</td><td>&amp;#62;</td></tr><tr><td>&amp;</td><td>和号</td><td>&amp;amp;</td><td>&amp;#38;</td></tr><tr><td>"</td><td>引号</td><td>&amp;quot;</td><td>&amp;#34;</td></tr><tr><td>'</td><td>撇号&nbsp;</td><td>&amp;apos; (IE不支持)</td><td>&amp;#39;</td></tr></tbody></table></figure>
<!-- /wp:table -->

<!-- wp:heading {"level":4} -->
<h4>其他一些常用的字符实体</h4>
<!-- /wp:heading -->

<!-- wp:table -->
<figure class="wp-block-table"><table class=""><tbody><tr><th>显示结果</th><th>描述</th><th>实体名称</th><th>实体编号</th></tr><tr><td>￠</td><td>分</td><td>&amp;cent;</td><td>&amp;#162;</td></tr><tr><td>£</td><td>镑</td><td>&amp;pound;</td><td>&amp;#163;</td></tr><tr><td>¥</td><td>日圆</td><td>&amp;yen;</td><td>&amp;#165;</td></tr><tr><td>§</td><td>节</td><td>&amp;sect;</td><td>&amp;#167;</td></tr><tr><td>©</td><td>版权</td><td>&amp;copy;</td><td>&amp;#169;</td></tr><tr><td>®</td><td>注册商标</td><td>&amp;reg;</td><td>&amp;#174;</td></tr><tr><td>×</td><td>乘号</td><td>&amp;times;</td><td>&amp;#215;</td></tr><tr><td>÷</td><td>除号</td><td>&amp;divide;</td><td>&amp;#247;</td></tr></tbody></table></figure>
<!-- /wp:table -->

<!-- wp:paragraph -->
<p>html示例文本如下：</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang='html']
<body>
	<!-- 特殊字符
	需求1：把 <br> 换行标签 变成文本 转换成字符显示在页面上

	常用的特殊字符:
		<	===>>>>		&lt;
		>   ===>>>>		&gt;
	  空格	===>>>>		&nbsp;

	 -->
	我是&lt;br&gt;标签<br/>
	我是&lt;br&gt;标签
	你好&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;世界
</body>
[/cc]
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>效果如下：</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<body>
	<!-- 特殊字符

	常用的特殊字符:
		<	===>>>>		&lt;
		>       ===>>>>		&gt;
	       空格	===>>>>		&nbsp;
	 -->
	我是&lt;br&gt;标签<br/>
	你好&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;世界
</body>
<!-- /wp:html -->

<!-- wp:heading -->
<h2>4.超链接</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">HTML 使用 &lt;a&gt; 超链接标签来创建连接另一个文档的链接。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">锚可以指向网络上的任何资源：一张 HTML 页面，一幅图像，一个声音或视频文件等等。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>&lt;a&gt; 用来创建超链接。href 属性用于定位需要链接的文档，锚的开始标签和结束标签之间的文字被作为超链接来显示。</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>Target 属性</h4>
<!-- /wp:heading -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">使用 Target 属性，你可以定义被链接的文档在何处显示。<br>_self     表示当前页面(默认值)<br>_blank    表示打开新页面来进行跳转</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="html"]
<a href="https://www.baidu.com">百度</a><br>
<a href="https://www.baidu.com" target="_self" rel="noopener noreferrer">百度_self</a><br>
<a href="https://www.baidu.com" target="_blank" rel="noopener noreferrer">百度_blank</a><br>
[/cc]
<!-- /wp:html -->

<!-- wp:html -->
<a href="https://www.baidu.com">百度</a><br>
<a href="https://www.baidu.com" target="_self" rel="noopener noreferrer">百度_self</a><br>
<a href="https://www.baidu.com" target="_blank" rel="noopener noreferrer">百度_blank</a><br>
<!-- /wp:html -->

<!-- wp:heading {"level":4} -->
<h4>超链接标签和 Name 属性</h4>
<!-- /wp:heading -->

<!-- wp:html -->
<a name="tips">Useful Tips Section</a>
<!-- /wp:html -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">Name 属性用于创建被命名的锚（named anchors）。当使用命名锚（named  anchors）时，我们可以创建直接跳至页面中某个节的链接，这样使用者就无需不停的滚动页面来寻找他们需要的信息。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">以下是命名锚的语法：</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="html"]
<a name="label">Text to be displayed</a>
[/cc]
<!-- /wp:html -->

<!-- wp:html -->
<a name="label">Text to be displayed</a>
<!-- /wp:html -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">name 属性用于创建命名锚。锚的名称可以是任何你喜欢的名字。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">下面这行定义了命名锚：</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="html"]
<a name="tips">Useful Tips Section</a>
[/cc]
<!-- /wp:html -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">我们把这个先把这个tips链接放到上面去，下文会用到</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">你会注意到，命名锚会以特殊的方式来显示。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">将 # 符号和锚名称添加到 URL 的末端，就可以直接链接到 tips 这个节，就像这样：</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="html"]
<a href="http://blog.liobio.cn/index.php/2021/06/29/html%e6%80%bb%e7%bb%93/#tips">
Jump to the Useful Tips Section
</a>
[/cc]
<!-- /wp:html -->

<!-- wp:html -->
<a href="http://blog.liobio.cn/index.php/2021/06/29/html%e6%80%bb%e7%bb%93/#tips">
Jump to the Useful Tips Section
</a>
<!-- /wp:html -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">点击上面的链接 是否定位到了对于的位置呢</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>基本的注意事项 </h4>
<!-- /wp:heading -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">假如浏览器找不到已定义的命名锚，那么就会定位到文档的顶端。不会有错误发生。</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>html图像</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":4} -->
<h4>图像标签（&lt;img&gt;）和源属性（Src）</h4>
<!-- /wp:heading -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">在 HTML 中，图像由 &lt;img&gt; 标签定义。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">&lt;img&gt; 是空标签，意思是说，它只包含属性，并且没有闭合标签。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">要在页面上显示图像，你需要使用源属性（src）。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">src 指 "source"。源属性的值是图像的 URL 地址。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">定义图像的语法是：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">URL 指存储图像的位置。</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="html"]
<img src="url">
<img src="http://blog.liobio.cn/wp-content/uploads/2021/03/preview.jpg">
[/cc]
<!-- /wp:html -->

<!-- wp:html -->
<img src="http://blog.liobio.cn/wp-content/uploads/2021/03/preview.jpg">
<!-- /wp:html -->

<!-- wp:heading {"level":4} -->
<h4>替换文本属性（Alt）</h4>
<!-- /wp:heading -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">浏览器将图像显示在文档中图像标签出现的地方。如果你将图像标签置于两个段落之间，那么浏览器会首先显示第一个段落，然后显示图片，最后显示第二段。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">alt 属性用来为图像定义一串预备的可替换的文本。替换文本属性的值是用户定义的。</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="html"]
<img src="url" alt="图片离家出走了。。。">
[/cc]
<!-- /wp:html -->

<!-- wp:html -->
<img src="url" alt="图片离家出走了。。。">
<!-- /wp:html -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">在浏览器无法载入图像时，替换文本属性告诉读者她们失去的信息。此时，浏览器将显示这个替代性的文本而不是图像。为页面上的图像都加上替换文本属性是个好习惯，这样有助于更好的显示信息，并且对于那些使用纯文本浏览器的人来说是非常有用的。</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>基本的注意事项 - 有用的提示：</h4>
<!-- /wp:heading -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">假如某个 HTML 文件包含十个图像，那么为了正确显示这个页面，需要加载 11 个文件。加载图片是需要时间的，所以建议是：慎用图片!</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[学习如何使用 HTML 来创建站点。
]]></excerpt:encoded>
		<wp:post_id>135</wp:post_id>
		<wp:post_date><![CDATA[2021-06-29 11:03:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-06-29 03:03:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[html1]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="javaweb"><![CDATA[Javaweb]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[267]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[html%e6%80%bb%e7%bb%93]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>html总结（二）</title>
		<link>http://blog.liobio.cn/index.php/2021/06/29/html%e6%80%bb%e7%bb%93%ef%bc%88%e4%ba%8c%ef%bc%89/</link>
		<pubDate>Tue, 29 Jun 2021 09:20:59 +0000</pubDate>
		<dc:creator><![CDATA[liobio]]></dc:creator>
		<guid isPermaLink="false">http://blog.liobio.cn/?p=163</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading {"textColor":"accent"} -->
<h2 class="has-accent-color has-text-color">HTML 表格



</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":4,"textColor":"accent"} -->
<h4 class="has-accent-color has-text-color">表格</h4>
<!-- /wp:heading -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">表格由 &lt;table&gt; 标签来定义。每个表格均有若干行（由 &lt;tr&gt; 标签定义），每行被分割为若干单元格（由 &lt;td&gt; 
标签定义）。字母 td 指表格数据（table data），即数据单元格的内容。数据单元格可以包含文本、图片、列表、段落、表单、水平线、表格等等。</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang='html']
<table border="1">
<tr>
<td>row 1, cell 1</td>
<td>row 1, cell 2</td>
</tr>
<tr>
<td>row 2, cell 1</td>
<td>row 2, cell 2</td>
</tr>
</table>
[/cc]
<!-- /wp:html -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">在浏览器显示如下：</p>
<!-- /wp:paragraph -->

<!-- wp:table -->
<figure class="wp-block-table"><table class=""><tbody><tr><td>row 1, cell 1</td><td>row 1, cell 2</td></tr><tr><td>row 2, cell 1</td><td>row 2, cell 2</td></tr></tbody></table></figure>
<!-- /wp:table -->

<!-- wp:heading {"level":4,"textColor":"accent"} -->
<h4 class="has-accent-color has-text-color">表格和边框属性</h4>
<!-- /wp:heading -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">如果不定义边框属性，表格将不显示边框。有时这很有用，但是大多数时候，我们希望显示边框。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">使用边框属性来显示一个带有边框，长宽等属性的表格</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang='html']
< body>
<!--
	需求1：做一个 带表头的 ，三行，三列的表格，并显示边框
	需求2：修改表格的宽度，高度，表格的对齐方式，单元格间距。

		table 标签是表格标签
			border 设置表格标签
			width 设置表格宽度
			height 设置表格高度
			align 设置表格相对于页面的对齐方式
			cellspacing 设置单元格间距

		tr	 是行标签
		th	是表头标签
		td  是单元格标签
			align 设置单元格文本对齐方式

		b 是加粗标签

	-->

<table align="center" border="1" width="300" height="300" cellspacing="0">
    <tr>
        <th>1.1</th>
        <th>1.2</th>
        <th>1.3</th>
    </tr>
    <tr>
        <td>2.1</td>
        <td>2.2</td>
        <td>2.3</td>
    </tr>
    <tr>
        <td>3.1</td>
        <td>3.2</td>
        <td>3.3</td>
    </tr>
</table>
</body>
[/cc]
<!-- /wp:html -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size"> 在浏览器显示如下： </p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":169,"sizeSlug":"large"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><img src="http://blog.liobio.cn/wp-content/uploads/2021/06/image-2.png" alt="" class="wp-image-169"/></figure></div>
<!-- /wp:image -->

<!-- wp:heading {"level":4,"textColor":"accent"} -->
<h4 class="has-accent-color has-text-color">表格的表头</h4>
<!-- /wp:heading -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">表格的表头使用 &lt;th&gt; 标签进行定义。</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang='html']
<table border="1">
<tr>
<th>Heading</th>
<th>Another Heading</th>
</tr>
<tr>
<td>row 1, cell 1</td>
<td>row 1, cell 2</td>
</tr>
<tr>
<td>row 2, cell 1</td>
<td>row 2, cell 2</td>
</tr>
</table>
[/cc]
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>在浏览器显示如下：</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":168,"sizeSlug":"large"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><img src="http://blog.liobio.cn/wp-content/uploads/2021/06/image-1.png" alt="" class="wp-image-168"/></figure></div>
<!-- /wp:image -->

<!-- wp:heading {"level":4,"textColor":"accent"} -->
<h4 class="has-accent-color has-text-color">表格中的空单元格</h4>
<!-- /wp:heading -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">在大多数浏览器中，没有内容的表格单元显示得不太好。</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang='html']
<table border="1">
<tr>
<td>row 1, cell 1</td>
<td>row 1, cell 2</td>
</tr>
<tr>
<td>row 2, cell 1</td>
<td></td>
</tr>
</table>
[/cc]
<!-- /wp:html -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">在浏览器显示如下：</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":167,"sizeSlug":"large"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><img src="http://blog.liobio.cn/wp-content/uploads/2021/06/image.png" alt="" class="wp-image-167"/></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">注意：这个空的单元格的边框没有被显示出来。（不过 现在的浏览器都可以将整个边框显示出来。）为了避免这种情况，在空单元格中添加一个空格占位符，就可以将边框显示出来。</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang='html']
<table border="1">
<tr>
<td>row 1, cell 1</td>
<td>row 1, cell 2</td>
</tr>
<tr>
<td>row 2, cell 1</td>
<td>&nbsp;</td>
</tr>
</table>
[/cc]
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>在浏览器中显示如下：</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":170,"sizeSlug":"large"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><img src="http://blog.liobio.cn/wp-content/uploads/2021/06/image-3.png" alt="" class="wp-image-170"/></figure></div>
<!-- /wp:image -->

<!-- wp:heading {"level":4,"textColor":"accent"} -->
<h4 class="has-accent-color has-text-color">表格的跨行跨列</h4>
<!-- /wp:heading -->

<!-- wp:html -->
[cc lang='html']
<body>
<!--
			建了一个五行，五列的表格，
			第一行，第一列的单元格跨两列，
			第二行第一列的单元格跨两行，
			第四行第四列的单元格跨两行两列。

			colspan 属性设置跨列
			rowspan 属性设置跨行
			-->

		<table width="500" height="500" cellspacing="0" border="1" align="center">
			<tr align="center">
				<td colspan="2">1.1</td>
				<td>1.3</td>
				<td>1.4</td>
				<td>1.5</td>
			</tr>
			<tr align="center">
				<td rowspan="2">2.1</td>
				<td>2.2</td>
				<td>2.3</td>
				<td>2.4</td>
				<td>2.5</td>
			</tr>
			<tr align="center">
				<td>3.2</td>
				<td>3.3</td>
				<td>3.4</td>
				<td>3.5</td>
			</tr>
			<tr align="center">
				<td>4.1</td>
				<td>4.2</td>
				<td>4.3</td>
				<td colspan="2" rowspan="2">4.4</td>
			</tr>
			<tr align="center">
				<td>5.1</td>
				<td>5.2</td>
				<td>5.3</td>
			</tr>
		</table>
	</body>
[/cc]
<!-- /wp:html -->

<!-- wp:image {"align":"center","id":171,"sizeSlug":"large"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><img src="http://blog.liobio.cn/wp-content/uploads/2021/06/image-4.png" alt="" class="wp-image-171"/></figure></div>
<!-- /wp:image -->

<!-- wp:heading {"level":4,"textColor":"accent"} -->
<h4 class="has-accent-color has-text-color">表格标签</h4>
<!-- /wp:heading -->

<!-- wp:table {"className":"is-style-regular"} -->
<figure class="wp-block-table is-style-regular"><table class=""><tbody><tr><th>表格</th><th>描述</th></tr><tr><td>&lt;table&gt;</td><td>定义表格</td></tr><tr><td>&lt;caption&gt;</td><td>定义表格标题。</td></tr><tr><td>&lt;th&gt;</td><td>定义表格的表头。</td></tr><tr><td>&lt;tr&gt;</td><td>定义表格的行。</td></tr><tr><td>&lt;td&gt;</td><td>定义表格单元。</td></tr><tr><td>&lt;thead&gt;</td><td>定义表格的页眉。</td></tr><tr><td>&lt;tbody&gt;</td><td>定义表格的主体。</td></tr><tr><td>&lt;tfoot&gt;</td><td>定义表格的页脚。</td></tr><tr><td>&lt;col&gt;</td><td>定义用于表格列的属性。</td></tr><tr><td>&lt;colgroup&gt;</td><td>定义表格列的组。</td></tr></tbody></table></figure>
<!-- /wp:table -->

<!-- wp:heading {"textColor":"accent"} -->
<h2 class="has-accent-color has-text-color"> iframe标签 </h2>
<!-- /wp:heading -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">iframe标签内联框架元素 ,有效地将另一个HTML页面嵌入到当前页面中，开辟一个小区域显示一个单独的页面，该页面的宽高可自行设置。不过，嵌套页面之后，当前html的页面加载速度就变慢了。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">先写一个嵌入了本网站首页的框架示例 </p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang='html']
<iframe src="http://blog.liobio.cn" width="500" height="400" name="liobio"</iframe>
[/cc]
<!-- /wp:html -->

<!-- wp:html -->
<hr>
<iframe src="http://blog.liobio.cn" width="500" height="400" name="liobio"></iframe>
<!-- /wp:html -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">接下来我们看一下，iframe标签结合a标签如何使用。<br>我们先创建两个超链接标签 </p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang='html']
<a href="http://test.liobio.cn/">liobio_game</a><br>
<a href="https://github.com/liobio">liobio_github</a>
[/cc]
<!-- /wp:html -->

<!-- wp:group -->
<div class="wp-block-group"><div class="wp-block-group__inner-container"><!-- wp:html -->
<a href="http://test.liobio.cn">liobio_game</a><br>
<a href="https://github.com/liobio">liobio_github</a>
<!-- /wp:html --></div></div>
<!-- /wp:group -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">此时两个超链接默认都是在页面打开，但是我们只需要把target指向iframe的名称，新的页面就会在iframe框架内打开</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang='html']
<a href="http://test.liobio.cn/" target="liobio" rel="noopener noreferrer">liobio_game</a><br>
<a href="https://github.com/liobio" target="liobio" rel="noopener noreferrer">liobio_github</a>
[/cc]
<!-- /wp:html -->

<!-- wp:group -->
<div class="wp-block-group"><div class="wp-block-group__inner-container"><!-- wp:html -->
<a href="http://test.liobio.cn/" target="liobio" rel="noopener noreferrer">liobio_game</a><br>
<a href="https://github.com/liobio" target="liobio" rel="noopener noreferrer">liobio_github</a>
<!-- /wp:html --></div></div>
<!-- /wp:group -->

<!-- wp:heading {"textColor":"accent"} -->
<h2 class="has-accent-color has-text-color">HTML 列表



</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":4,"textColor":"accent"} -->
<h4 class="has-accent-color has-text-color">无序列表</h4>
<!-- /wp:heading -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">无序列表是一个项目的列表，此列项目使用粗体圆点（典型的小黑圆圈）进行标记。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">无序列表始于 &lt;ul&gt; 标签。每个列表项始于 &lt;li&gt;。</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[[cc lang="html"]
<ul>
<li>Coffee</li>
<li>Milk</li>
</ul>
[/cc]
<!-- /wp:html -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">浏览器显示如下：</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Coffee 
</li><li>Milk </li></ul>
<!-- /wp:list -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">列表项内部可以使用段落、换行符、图片、链接以及其他列表等等。</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4,"textColor":"accent"} -->
<h4 class="has-accent-color has-text-color">有序列表</h4>
<!-- /wp:heading -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">同样，有序列表也是一列项目，列表项目使用数字进行标记。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">有序列表始于 &lt;ol&gt; 标签。每个列表项始于 &lt;li&gt; 标签。</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[[cc lang="html"]
<ol>
<li>Coffee</li>
<li>Milk</li>
</ol>
[/cc]
<!-- /wp:html -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">浏览器显示如下：</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Coffee 
</li><li>Milk </li></ol>
<!-- /wp:list -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">列表项内部可以使用段落、换行符、图片、链接以及其他列表等等。</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4,"textColor":"accent"} -->
<h4 class="has-accent-color has-text-color">定义列表</h4>
<!-- /wp:heading -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">自定义列表不仅仅是一列项目，而是项目及其注释的组合。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">自定义列表以 &lt;dl&gt; 标签开始。每个自定义列表项以 &lt;dt&gt; 开始。每个自定义列表项的定义以 &lt;dd&gt; 
开始。</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[[cc lang="html"]
<dl>
<dt>Coffee</dt>
<dd>Black hot drink</dd>
<dt>Milk</dt>
<dd>White cold drink</dd>
</dl>
[/cc]
<!-- /wp:html -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">浏览器显示如下：</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<dl>
<dt>Coffee</dt>
<dd>Black hot drink</dd>
<dt>Milk</dt>
<dd>White cold drink</dd>
</dl>
<!-- /wp:html -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">定义列表的列表项内部可以使用段落、换行符、图片、链接以及其他列表等等。</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4,"textColor":"accent"} -->
<h4 class="has-accent-color has-text-color">列表标签</h4>
<!-- /wp:heading -->

<!-- wp:table -->
<figure class="wp-block-table"><table class=""><tbody><tr><th>标签</th><th>描述</th></tr><tr><td>&lt;ol&gt;</td><td>定义有序列表。</td></tr><tr><td>&lt;ul&gt;</td><td>定义无序列表。</td></tr><tr><td>&lt;li&gt;</td><td>定义列表项。</td></tr><tr><td>&lt;dl&gt;</td><td>定义定义列表。</td></tr><tr><td>&lt;dt&gt;</td><td>定义定义项目。</td></tr><tr><td>&lt;dd&gt;</td><td>定义定义的描述。</td></tr><tr><td>&lt;dir&gt;</td><td>已废弃。使用 &lt;ul&gt; 代替它。</td></tr><tr><td>&lt;menu&gt;</td><td>已废弃。使用 &lt;ul&gt; 代替它。</td></tr></tbody></table></figure>
<!-- /wp:table -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[学习如何使用 HTML 来创建站点。]]></excerpt:encoded>
		<wp:post_id>163</wp:post_id>
		<wp:post_date><![CDATA[2021-06-29 17:20:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-06-29 09:20:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[html%e6%80%bb%e7%bb%93%ef%bc%88%e4%ba%8c%ef%bc%89]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="javaweb"><![CDATA[Javaweb]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[219]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_e5451b99a405c10d59e41343d8bf9441]]></wp:meta_key>
		<wp:meta_value><![CDATA[<blockquote class="wp-embedded-content" data-secret="p1ZPF2JPze"><a href="http://blog.liobio.cn/">Welcome to LIOBIO   world</a></blockquote><iframe class="wp-embedded-content" sandbox="allow-scripts" security="restricted" style="position: absolute; clip: rect(1px, 1px, 1px, 1px);" title="《Welcome to LIOBIO   world》—LIOBIO" src="http://blog.liobio.cn/embed/#?secret=p1ZPF2JPze" data-secret="p1ZPF2JPze" width="580" height="327" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_e5451b99a405c10d59e41343d8bf9441]]></wp:meta_key>
		<wp:meta_value><![CDATA[1625018213]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Spring(二) IOC的使用实验</title>
		<link>http://blog.liobio.cn/?p=207</link>
		<pubDate>Sat, 07 Aug 2021 08:53:00 +0000</pubDate>
		<dc:creator><![CDATA[liobio]]></dc:creator>
		<guid isPermaLink="false">http://blog.liobio.cn/?p=207</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading {"level":5,"textColor":"accent"} -->
<h5 class="has-accent-color has-text-color"> <strong>实验1：通过IOC容器创建对象，并为属性赋值</strong> </h5>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p> ioc.xml 配置</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="xml"]
<bean id="person1" class="com.liobio.bean.Person">
        <!--使用property标签为Person对象的属性赋值
         name="lastName": 指定属性名
         value="赵云": 指定属性值
         -->
        <property name="lastName" value="赵云"></property>
        <property name="age" value="18"></property>
        <property name="email" value="zhaoyun@liobio.com"></property>
        <property name="gender" value="男"></property>

     </bean>
[/cc]
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>Person类</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="java"]
public class Person {
    private String lastName;
    private Integer age;
    private String gender;
    private String email;
    //省略get/set()、无参有参、toString()
}
[/cc]
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>运行测试test</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="java"]
@Test
public void test01(){
    //ApplicationContext：代表ioc容器
    //ClassPathXmlApplicationContext：当前应用的xml配置文件在ClassPath下
    //根据Spring的配置文件得到ioc容器对象
    ApplicationContext ioc = new ClassPathXmlApplicationContext("ioc.xml");

    //容器帮我们创建好了对象
    Person person01 = (Person) ioc.getBean("person01");
    Person person02 = (Person) ioc.getBean("person01");
    System.out.println(person01 == person02);//结果为true
	
    //要求在xml表中配置，不然查找异常
    System.out.println("=============================");
    Person person03 = (Person) ioc.getBean("person03");//提示No bean named 'person02' available
}
[/cc]
<!-- /wp:html -->

<!-- wp:heading {"level":5,"textColor":"accent"} -->
<h5 class="has-accent-color has-text-color"><strong>实验2：根据bean的类型从IOC容器中获取bean的实例</strong></h5>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>  ioc.xml 配置 </p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="xml"]
<bean id="person01" class="com.liobio.bean.Person">
    <property name="lastName" value="赵云"></property>
    <property name="age" value="18"></property>
    <property name="email" value="zhaoyun@qq.com"></property>
    <property name="gender" value="男"></property>
</bean>

<bean id="person02" class="com.liobio.bean.Person">
    <property name="lastName" value="真田幸村"></property>
    <property name="age" value="19"></property>
    <property name="email" value="zhentianxincun@achang.com"></property>
    <property name="gender" value="男"></property>
</bean>

[/cc]
<!-- /wp:html -->

<!-- wp:paragraph -->
<p> 运行测试test </p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="java"]
//根据bean的类型从IOC容器中获取bean的实例★
@Test
public void test2(){
    // Person bean = ioc.getBean(Person.class);
    //如果ioc容器中这个类型的bean有多个，查找就会报错
    //报错： No qualifying bean of type 'com.liobio.bean.Person' available: expected single matching bean but found 2: person01,person02
    //System.out.println(bean);

    Person bean2 = ioc.getBean("person02", Person.class);// Person{lastName='真田幸村', age=19, gender='男', email='zhentianxincun@achang.com'}
    System.out.println(bean2);

}

[/cc]
<!-- /wp:html -->

<!-- wp:heading {"level":5,"textColor":"accent"} -->
<h5 class="has-accent-color has-text-color"><strong>实验</strong>3：</h5>
<!-- /wp:heading -->

<!-- wp:heading {"level":6,"textColor":"accent"} -->
<h6 class="has-accent-color has-text-color">通过构造器为bean的属性赋值（index,type属性介绍）</h6>
<!-- /wp:heading -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">index属性：指定对应参数的索引下标，从0开始</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">value属性：设置参数的值 </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">type属性：指定该为 什么类型的参数 </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>  ioc.xml 配置 </p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="xml"]
    <bean class="com.achang.liobio.Person" id="person03">
        <!-- 调用有参构造器创建赋值 【掌握】-->
        <!-- public Person(String lastName, Integer age, String gender, String email) -->
        <constructor-arg name="lastName" value="孙坚"></constructor-arg>
        <constructor-arg name="age" value="35"></constructor-arg>
        <constructor-arg name="email" value="sunjian@qq.com"></constructor-arg>
        <constructor-arg name="gender" value="男"></constructor-arg>
    </bean>
    
    
    <!--省略name属性，需要严格按照构造器的参数位置书写
        index属性：指定对应参数的索引下标，从0开始，
        value属性：设置参数的值
    -->
    <bean id="person04" class="com.liobio.bean.Person">
        <constructor-arg value="凌统"></constructor-arg>
        <constructor-arg value="25"></constructor-arg>
        <constructor-arg value="男" index="2"></constructor-arg>
        <constructor-arg value="lingtong@qq.com"></constructor-arg>
    </bean>

[/cc]
<!-- /wp:html -->

<!-- wp:heading {"level":6,"textColor":"accent"} -->
<h6 class="has-accent-color has-text-color"> <strong>通过p名称空间为bean赋值</strong> </h6>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>  ioc.xml 配置 </p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="xml"]
    <!--通过p名称空间为bean赋值：  导入p名称空间 -->
    <!--名称空间： 在xml中名称空间是用来防止标签重复-->
    <!--1）导入p名称空间 2）写带前缀的标签/属性 
        <book>
            <b:name>西游记</b:name>
            <price>19.99</price>
            <author>
                <a:name>吴承恩</a:name>
                <gender>男</gender>
            </author>
        </book>

        带前缀的标签：<c:forEach>、<jsp:forward>...
    -->

[/cc]
<!-- /wp:html -->

<!-- wp:heading {"level":5,"textColor":"accent"} -->
<h5 class="has-accent-color has-text-color"><strong>实验4：正确的为各种属性赋值</strong></h5>
<!-- /wp:heading -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size"> 现在复杂类型在标签体里写内容，而不是在value属性里写 </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p> Person.java</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="java"]
public class Person {

    //基本类型直接使用property标签
    //<property name="lastName" value="真田幸村"></property> 自动进行类型转换
    private String lastName;
    private Integer age;
    private String gender;
    private String email;

    private Car car;
    private List<Book> books;
    private Map<String,Object> maps;
    private Properties properties;
    //....
 
    //省略get/set()、有参无参、toString
}

[/cc]
<!-- /wp:html -->

<!-- wp:heading {"level":6,"textColor":"accent"} -->
<h6 class="has-accent-color has-text-color"><strong><em> 测试使用null值</em></strong></h6>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p> ioc2.xml </p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="xml"]
    <!--测试使用null值-->
    <bean class="com.achang.bean.Person" id="person01">
        <property name="lastName">
            <!--复杂赋值-->
            <null></null>
        </property>
    </bean>

[/cc]
<!-- /wp:html -->

<!-- wp:paragraph -->
<p> 运行测试test </p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="java"]
    @Test
    public void test3(){
        Person person01 = ioc.getBean("person01",Person.class);
        System.out.println(person01);
        //Person{lastName='null', age=null, gender='null', email='null', car=null, books=null, maps=null, properties=null}

    }

[/cc]
<!-- /wp:html -->

<!-- wp:heading {"level":6,"textColor":"accent"} -->
<h6 class="has-accent-color has-text-color"><strong><em>引用类型赋值（引用其他bean、引用内部bean）</em></strong></h6>
<!-- /wp:heading -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size"> 外部引用，通过ref属性：引用 </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>  ioc.xml 配置 </p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="xml"]
    <bean id="car01" class="com.liobio.bean.Car">
        <property name="carName" value="大泵"></property>
        <property name="color" value="绿色"></property>
        <property name="price" value="3000"></property>
    </bean>
    <bean class="com.achang.bean.Person" id="person01">
        <property name="car" ref="car01"></property>
    </bean>

[/cc]
<!-- /wp:html -->

<!-- wp:paragraph -->
<p> 运行测试test  </p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="java"]
    @Test
    public void test3(){
        Person person01 = ioc.getBean("person01",Person.class);
        System.out.println(person01.getCar());
        //Car{carName='大泵', price=3000, color='绿色'}

    }

[/cc]
<!-- /wp:html -->

<!-- wp:heading {"level":6,"textColor":"accent"} -->
<h6 class="has-accent-color has-text-color"><strong><em> 引用内部bean ，在property标签里嵌套一个bean标签 </em></strong></h6>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>   ioc.xml 配置  </p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="xml"]
  <bean id="car01" class="com.liobio.bean.Car">
        <property name="carName" value="大泵"></property>
        <property name="color" value="绿色"></property>
        <property name="price" value="3000"></property>
    </bean>

    <bean class="com.liobio.bean.Person" id="person01">
        <property name="car">
            <bean class="com.achang.bean.Car">
                <property name="carName" value="自行车"></property>
            </bean>
        </property>
    </bean>
[/cc]
<!-- /wp:html -->

<!-- wp:paragraph -->
<p> 运行测试test   </p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="java"]
    @Test
    public void test4(){
        Person person01 = ioc.getBean("person01",Person.class);
        Car car = person01.getCar();
        System.out.println(car);
        // Car{carName='自行车', price=null, color='null'}

    }
[/cc]
<!-- /wp:html -->

<!-- wp:heading {"level":6,"textColor":"accent"} -->
<h6 class="has-accent-color has-text-color"><strong><em>集合类型赋值（List、Map、Properties）</em></strong></h6>
<!-- /wp:heading -->

<!-- wp:paragraph {"textColor":"accent","fontSize":"small"} -->
<p class="has-text-color has-small-font-size has-accent-color"> <strong>1）List</strong> </p>
<!-- /wp:paragraph -->

<!-- wp:group {"align":"wide"} -->
<div class="wp-block-group alignwide"><div class="wp-block-group__inner-container"><!-- wp:paragraph -->
<p> ioc.xml 配置   </p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="xml"]
     <bean id="book01" class="com.liobio.bean.Book">
        <property name="bookName" value="三国演义"></property>
        <property name="author" value="罗贯中"></property>
    </bean>

    <bean class="com.liobio.bean.Person" id="person02">
        <!--如何为List类型赋值-->
        <property name="books">
        <!--book = new ArrayList<Book>();-->
            <list>
            <!--list标签体中，添加每一个元素-->
                <!--引用内部元素-->
                <bean id="book02" class="com.liobio.bean.Book">
                    <property name="bookName" value="西游记"></property>
                </bean>
                <!--引用外部元素-->
                <ref bean="book01"></ref>
            </list>
        </property>
        
    </bean>

[/cc]
<!-- /wp:html -->

<!-- wp:paragraph -->
<p> 运行测试test    </p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="java"]
    @Test
    public void test4(){
        Person person02 = ioc.getBean("person02", Person.class);
        List<Book> books = person02.getBooks();
        System.out.println(books);// [Book{bookName='西游记', author='null'}, Book{bookName='三国演义', author='罗贯中'}]
        
        Object book02 = ioc.getBean("book02");
        System.out.println(book02);//报错 No bean named 'book02' available

    }

[/cc]
<!-- /wp:html --></div></div>
<!-- /wp:group -->

<!-- wp:paragraph {"textColor":"accent","fontSize":"small"} -->
<p class="has-text-color has-small-font-size has-accent-color"> <strong>2）Map</strong> </p>
<!-- /wp:paragraph -->

<!-- wp:group {"align":"wide"} -->
<div class="wp-block-group alignwide"><div class="wp-block-group__inner-container"><!-- wp:paragraph -->
<p> ioc.xml 配置   </p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="xml"]
     <bean class="com.liobio.bean.Person" id="person02">
        <!--如何为Map类型赋值-->
        <!--Map<String,Object> maps-->
        <property name="maps">
            
            <!-- map = new LinkedHashMap<>(); -->
            <map>
            <!-- 一个entry标签等于一个键值对 -->
            <entry key="姓名" value="刘备"></entry>
            <entry key="编号" value="18"></entry>
            <!--引用外部元素-->
            <entry key="书1" value-ref="book01"></entry>
            <entry key="书2">
                <!--引用内部元素-->
                <bean class="com.liobio.bean.Book">
                    <property name="bookName" value="转行成功手册"></property>
                </bean>
            </entry>
            <entry key="">
                <map></map>
            </entry>
            </map>
            
        </property>
        
    </bean>

[/cc]
<!-- /wp:html -->

<!-- wp:paragraph -->
<p> 运行测试test    </p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="java"]
    @Test
    public void test4(){
        Person person02 = ioc.getBean("person02", Person.class);

        Map<String, Object> maps = person02.getMaps();
        System.out.println(maps);

    }

[/cc]
<!-- /wp:html --></div></div>
<!-- /wp:group -->

<!-- wp:paragraph {"textColor":"accent","fontSize":"small"} -->
<p class="has-text-color has-small-font-size has-accent-color"> <strong>3）properties</strong> </p>
<!-- /wp:paragraph -->

<!-- wp:group {"align":"wide"} -->
<div class="wp-block-group alignwide"><div class="wp-block-group__inner-container"><!-- wp:paragraph -->
<p> ioc.xml 配置   </p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="xml"]
     <bean class="com.liobio.bean.Person" id="person02">
        
        <!-- Properties properties -->
        <property name="properties">
            <!-- properties = new Properties();-->
            <props>
                <!--所有的K=V都String，值直接写在标签体中-->
                <prop key="password">00000</prop>
                <prop key="username">root</prop>
            </props>

        </property>
        
    </bean>

[/cc]
<!-- /wp:html -->

<!-- wp:paragraph -->
<p> 运行测试test    </p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="java"]
    @Test
    public void test4(){
        Map<String, Object> maps = person02.getMaps();
        System.out.println(person02.getProperties());

    }

[/cc]
<!-- /wp:html --></div></div>
<!-- /wp:group -->

<!-- wp:heading {"level":6,"textColor":"accent"} -->
<h6 class="has-accent-color has-text-color"><strong>util名称空间创建集合类型的bean</strong></h6>
<!-- /wp:heading -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">可以通过id直接获取</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">或者在别的标签中通过ref属性引用其id </p>
<!-- /wp:paragraph -->

<!-- wp:group {"align":"wide"} -->
<div class="wp-block-group alignwide"><div class="wp-block-group__inner-container"><!-- wp:paragraph -->
<p> ioc.xml 配置   </p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="xml"]
 <bean id="person03" class="com.liobio.bean.Person">
		<property name="maps" ref="mymap"></property>
	
	</bean>
	<util:map id="mymap">
		<!-- 一个entry代表一个key value键值对 -->
				<entry key="key01" value="张三"></entry>
				<entry key="key02" value="18"></entry>
				<entry key="key03" value-ref="book01"></entry>
				<entry key="key04">
					<bean class="com.liobio.bean.Car">
						<property name="carName" value="baoma"></property>
					</bean>
				</entry>
	
	</util:map>

[/cc]
<!-- /wp:html --></div></div>
<!-- /wp:group -->

<!-- wp:group {"align":"wide"} -->
<div class="wp-block-group alignwide"><div class="wp-block-group__inner-container"><!-- wp:paragraph -->
<p> ioc.xml 配置   </p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="xml"]
     <bean class="com.liobio.bean.Person" id="person02">
        
        <!-- Properties properties -->
        <property name="properties">
            <!-- properties = new Properties();-->
            <props>
                <!--所有的K=V都String，值直接写在标签体中-->
                <prop key="password">00000</prop>
                <prop key="username">root</prop>
            </props>

        </property>
        
    </bean>

[/cc]
<!-- /wp:html -->

<!-- wp:paragraph -->
<p> 运行测试test    </p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="java"]
    @Test
    public void test4(){
        Map<String, Object> maps = person02.getMaps();
        System.out.println(person02.getProperties());

    }

[/cc]
<!-- /wp:html --></div></div>
<!-- /wp:group -->

<!-- wp:heading {"level":6,"textColor":"accent"} -->
<h6 class="has-accent-color has-text-color">级联属性赋值</h6>
<!-- /wp:heading -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">carName属性是Car类的属性，Car类的car对象是Person类的属性，carName属性是Person类的<strong>级联属性</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">级联属性： 属性的属性</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":5,"textColor":"accent"} -->
<h5 class="has-accent-color has-text-color"> 实验5：配置通过静态工厂方法创建的bean、实例工厂方法创建的bean、FactoryBean </h5>
<!-- /wp:heading -->

<!-- wp:paragraph {"fontSize":"normal"} -->
<p class="has-normal-font-size">工厂模式：工厂帮我们创建对象，有一个专门帮我们创建对象的类，这个类就是工厂</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"fontSize":"normal"} -->
<p class="has-normal-font-size">静态工厂：工厂本身不用创建对象；通过静态方法调用，</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li> 对象 = 工厂类.工厂方法名(); </li></ul>
<!-- /wp:list -->

<!-- wp:paragraph {"fontSize":"normal"} -->
<p class="has-normal-font-size"> 实例工厂：工厂本身需要被创建； </p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>工程类 工厂对象 = new 工程类();</li><li>工厂对象.getAirPlane("刘备");</li></ul>
<!-- /wp:list -->

<!-- wp:group {"align":"wide"} -->
<div class="wp-block-group alignwide"><div class="wp-block-group__inner-container"><!-- wp:html -->
[cc lang="java"]
//实例工厂
public class AirPlaneInstanceFactory {
    //new AirPlaneStaticFactory().getAirPlane()
    public  Airplane getAirPlane(String jzName){
        Airplane airplane = new Airplane();
        airplane.setJzName(jzName);
        airplane.setFdj("海星");
        airplane.setFjsName("zyc");
        airplane.setPersonNum(300);
        airplane.setYc("145.23m");
        return airplane;
    }
}

[/cc]
<!-- /wp:html -->

<!-- wp:html -->
[cc lang="java"]
//静态工厂
public class AirPlaneStaticFactory {
    //AirPlaneStaticFactory.getAirPlane()
    public static Airplane getAirPlane(String jzName){
        Airplane airplane = new Airplane();
        airplane.setJzName(jzName);
        airplane.setFdj("海星");
        airplane.setFjsName("zyc");
        airplane.setPersonNum(300);
        airplane.setYc("145.23m");
        return airplane;
    }
}

[/cc]
<!-- /wp:html --></div></div>
<!-- /wp:group -->

<!-- wp:group {"align":"wide"} -->
<div class="wp-block-group alignwide"><div class="wp-block-group__inner-container"><!-- wp:paragraph {"textColor":"accent","fontSize":"small"} -->
<p class="has-text-color has-small-font-size has-accent-color"><strong>静态工厂（不需要创建工厂本身）</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">factory-method属性：指定哪个方法是工厂方法<br>class属性：指定静态工厂的全类名<br>constructor-arg标签：为工厂方法传参 </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p> ioc.xml 配置   </p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="xml"]
<bean id="airPlane01" class="com.liobio.factory.AirPlaneStaticFactory" factory-method="getAirPlane">
    <!--可以为方法指定参数-->
    <constructor-arg value="刘烨"></constructor-arg>
</bean>

[/cc]
<!-- /wp:html -->

<!-- wp:paragraph -->
<p> 运行测试test    </p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="java"]
@Test
public void test09(){
Object bean = ioc.getBean("airPlane01");
//不需要创建工厂本身，容器创建完就已经创建完毕工厂本身。
System.out.println(bean);
//Airplane{fdj='海星', yc='145.23m', personNum=300, jzName='刘烨', fjsName='zyc'}

}

[/cc]
<!-- /wp:html --></div></div>
<!-- /wp:group -->

<!-- wp:group {"align":"wide"} -->
<div class="wp-block-group alignwide"><div class="wp-block-group__inner-container"><!-- wp:paragraph {"textColor":"accent","fontSize":"small"} -->
<p class="has-text-color has-small-font-size has-accent-color"><strong>实例工厂（需要创建工厂本身）</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size"><strong>factory-method</strong>属性：指定这个实例工厂中哪个方法是工厂方法</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size"><strong>factory-bean</strong>属性：指定当前bean对象创建使用哪个工厂 </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size"><strong>constructor-arg</strong>标签：可以为工厂方法传参 </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>创建流程 ：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">一、先配置出实例工厂对象，相当于先new了一个工厂对象 </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">二、配置要创建的AirPlane使用哪个工厂创建<br>    1、<strong>factory-bean</strong>属性：指定当前bean对象创建使用哪个工厂<br>    2、<strong>factory-method</strong>属性：指定这个实例工厂中哪个方法是工厂方法<br>    3、<strong>constructor-arg</strong>标签：设置工厂方法的参数 </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p> ioc.xml 配置   </p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="xml"]
<bean class="com.liobio.factory.AirPlaneInstanceFactory" id="airPlaneInstanceFactory"></bean>
<bean class="com.liobio.bean.Airplane" id="airPlane02" factory-bean="airPlaneInstanceFactory" factory-method="getAirPlane">
<constructor-arg value="李磊"></constructor-arg>
</bean>

[/cc]
<!-- /wp:html -->

<!-- wp:paragraph -->
<p> 运行测试test    </p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="java"]
@Test
public void test09(){

Object bean1 = ioc.getBean("airPlane02");
System.out.println(bean1);
//Airplane{fdj='海星', yc='145.23m', personNum=300, jzName='李磊', fjsName='zyc'}

}

[/cc]
<!-- /wp:html --></div></div>
<!-- /wp:group -->

<!-- wp:group {"align":"wide"} -->
<div class="wp-block-group alignwide"><div class="wp-block-group__inner-container"><!-- wp:paragraph {"textColor":"accent","fontSize":"small"} -->
<p class="has-text-color has-small-font-size has-accent-color"><strong>FactoryBean（是Spring规定的一个接口）</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">只要是这个接口的实现类，Spring都认为是一个工厂<br>ioc容器启动时，不会创建实例 </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p> ioc.xml 配置   </p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="xml"]
<bean class="com.liobio.factory.MyFactoryBeanImpl" id="factoryBean"></bean>
[/cc]
<!-- /wp:html -->

<!-- wp:paragraph -->
<p> 运行测试test    </p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="java"]
public class MyFactoryBeanImpl implements FactoryBean<Book> {

    //getObject()：工厂方法，Spring自动调用
    //返回创建的对象
    @Override
    public Book getObject() throws Exception {
        Book book = new Book();
        book.setBookName();
        return book;
    }
    //返回创建类型类型，Spring自动调用确认创建对象是什么类型
    @Override
    public Class<?> getObjectType() {
        return Book.class;
    }
    //isSingleton：是单例吗？
    //false：不是单例
    //true：是单例
    @Override
    public boolean isSingleton() {
        return false;
    }    
}

[/cc]
<!-- /wp:html --></div></div>
<!-- /wp:group -->

<!-- wp:group {"align":"wide"} -->
<div class="wp-block-group alignwide"><div class="wp-block-group__inner-container"><!-- wp:heading {"level":5,"textColor":"accent"} -->
<h5 class="has-accent-color has-text-color">实验6：通过继承实现bean配置信息的重用</h5>
<!-- /wp:heading -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size"> parent属性：指定当前bean的配置信息继承于哪个，只是配置信息 </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p> ioc.xml 配置   </p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="xml"]
<!--实验6：通过继承实现bean配置信息的重用-->
<bean id="person05" class="com.liobio.bean.Person">
    <property name="lastName" value="周瑜"></property>
    <property name="age" value="18"></property>
    <property name="gender" value="男"></property>
    <property name="email" value="zhouyu@achang.com"></property>
</bean>

<!--parent属性：指定当前bean的配置信息继承于哪个-->
<bean id="person06" parent="person05">
    <property name="lastName" value="孙策"></property>
</bean>

[/cc]
<!-- /wp:html -->

<!-- wp:paragraph -->
<p> 运行测试test    </p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="java"]
    @Test
    public void test6(){
        Object person06 = ioc.getBean("person06");
        System.out.println(person06);
		//Person{lastName='孙策', age=18, gender='男', email='zhouyu@achang.com', car=null, books=null, maps=null, properties=null}
    }

[/cc]
<!-- /wp:html --></div></div>
<!-- /wp:group -->

<!-- wp:group {"align":"wide"} -->
<div class="wp-block-group alignwide"><div class="wp-block-group__inner-container"><!-- wp:heading {"level":5,"textColor":"accent"} -->
<h5 class="has-accent-color has-text-color">实验7：通过abstract属性创建一个模板bean</h5>
<!-- /wp:heading -->

<!-- wp:paragraph {"customFontSize":17} -->
<p style="font-size:17px"><strong>abstract</strong>属性：这个bean是抽象的，不能获取实例，只能被其他bean继承 </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p> ioc.xml 配置   </p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="xml"]
<!--    abstract="true" 这个bean是抽象的，不能获取实例，只能被继承-->
    <bean id="person05" class="com.liobio.bean.Person" abstract="true">
        <property name="lastName" value="周瑜"></property>
        <property name="age" value="18"></property>
        <property name="gender" value="男"></property>
        <property name="email" value="zhouyu@achang.com"></property>
    </bean>

    <!--parent属性：指定当前bean的配置信息继承于哪个-->
    <bean id="person06" parent="person05">
        <property name="lastName" value="孙策"></property>
    </bean>

[/cc]
<!-- /wp:html -->

<!-- wp:paragraph -->
<p> 运行测试test    </p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="java"]
@Test
public void test6(){
Object person05 = ioc.getBean("person05");
//报错： Error creating bean with name 'person05': Bean definition is abstract
System.out.println(person05);

}

[/cc]
<!-- /wp:html --></div></div>
<!-- /wp:group -->

<!-- wp:group {"align":"wide"} -->
<div class="wp-block-group alignwide"><div class="wp-block-group__inner-container"><!-- wp:heading {"level":5,"textColor":"accent"} -->
<h5 class="has-accent-color has-text-color">实验8：bean之间的依赖</h5>
<!-- /wp:heading -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size"> 所谓依赖：就是谁先创建谁后创建 </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size"><strong>dpends-on</strong>属性：使该bean对象依赖于某bean对象，从左到右是先后创建顺序 </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p> ioc.xml 配置   </p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="xml"]
<!--按照配置的顺序创建bean-->
    <bean class="com.liobio.bean.Book" id="book" depends-on="car,person"></bean>
    <bean class="com.liobio.bean.Person" id="person"></bean>
    <bean class="com.liobio.bean.Car" id="car"></bean>

[/cc]
<!-- /wp:html -->

<!-- wp:paragraph -->
<p> 运行测试test    </p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="java"]
@Test
public void test7(){

	//Car的无参构造器
	//Person的无参构造器
	//Book的无参构造器
}

[/cc]
<!-- /wp:html --></div></div>
<!-- /wp:group -->

<!-- wp:group {"align":"wide"} -->
<div class="wp-block-group alignwide"><div class="wp-block-group__inner-container"><!-- wp:heading {"level":5,"textColor":"accent"} -->
<h5 class="has-accent-color has-text-color"> 实验9：测试bean的作用域，分别创建单实例和多实例的bean</h5>
<!-- /wp:heading -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size"> bean的作用域：bean是否单实例；默认，单实例 </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">scope属性：设置单例模式、多例模式</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size"><strong>singleton</strong>：单实例模式；默认<br> 1）在容器启动完成之前，就已经创建好对象，并保存在容器中<br> 2）任何时候获取都是获取之前创建好的那个对象</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size"><strong>prototype</strong>：多实例模式；<br> 1）在容器启动默认不会去创建多实例bean<br> 2）获取时，才创建bean<br> 3）每次获取都会创建一个新的实例，每次都会调用构造器创建<br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p> ioc.xml 配置   </p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="xml"]
<bean class="com.liobio.bean.Car" id="car" scope="prototype"></bean>
<bean class="com.liobio.bean.Book" id="book" scope="singleton"></bean>
[/cc]
<!-- /wp:html -->

<!-- wp:paragraph -->
<p> 运行测试test    </p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="java"]
public void test8(){
    System.out.println("容器创建完毕");
    Object bean1 = ioc.getBean("book");
    Object bean2 = ioc.getBean("book");
    System.out.println(bean1==bean2);//true
    //任何时候获取都是获取之前创建好的那个对象

    Object bean3 = ioc.getBean("car");
    Object bean4 = ioc.getBean("car");
    System.out.println(bean3==bean4);//false
    //每次获取都会创建一个新的实例，每次都会调用构造器创建
}

[/cc]
<!-- /wp:html --></div></div>
<!-- /wp:group -->

<!-- wp:block {"ref":236} /-->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[IOC的使用实验-spring]]></excerpt:encoded>
		<wp:post_id>207</wp:post_id>
		<wp:post_date><![CDATA[2021-08-07 16:53:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-08-07 08:53:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[ioc%e7%9a%84%e4%bd%bf%e7%94%a8%e5%ae%9e%e9%aa%8c]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="spring"><![CDATA[Spring]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[22]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021-07-24]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021-08-01]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>SpringMVC</title>
		<link>http://blog.liobio.cn/?p=222</link>
		<pubDate>Tue, 14 Sep 2021 15:52:49 +0000</pubDate>
		<dc:creator><![CDATA[liobio]]></dc:creator>
		<guid isPermaLink="false">http://blog.liobio.cn/?p=222</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>一、SpringMVC简介</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3>1、什么是MVC</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>MVC是一种软件架构的思想，将软件按照模型、视图、控制器来划分</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>M：Model，模型层，指工程中的JavaBean，作用是处理数据</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>JavaBean分为两类：</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>一类称为实体类Bean：专门存储业务数据的，如 Student、User 等</li><li>一类称为业务处理 Bean：指 Service 或 Dao 对象，专门用于处理业务逻辑和数据访问。</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>V：View，视图层，指工程中的html或jsp等页面，作用是与用户进行交互，展示数据</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>C：Controller，控制层，指工程中的servlet，作用是接收请求和响应浏览器</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>MVC的工作流程：
用户通过视图层发送请求到服务器，在服务器中请求被Controller接收，Controller调用相应的Model层处理请求，处理完毕将结果返回到Controller，Controller再根据请求处理的结果找到相应的View视图，渲染数据后最终响应给浏览器</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>2、什么是SpringMVC</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>SpringMVC是Spring的一个后续产品，是Spring的一个子项目</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>SpringMVC 是 Spring 为表述层开发提供的一整套完备的解决方案。在表述层框架历经 Strust、WebWork、Strust2 等诸多产品的历代更迭之后，目前业界普遍选择了 SpringMVC 作为 Java EE 项目表述层开发的<strong>首选方案</strong>。</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>注：三层架构分为表述层（或表示层）、业务逻辑层、数据访问层，表述层表示前台页面和后台servlet</p></blockquote>
<!-- /wp:quote -->

<!-- wp:heading {"level":3} -->
<h3>3、SpringMVC的特点</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li><strong>Spring 家族原生产品</strong>，与 IOC 容器等基础设施无缝对接</li><li><strong>基于原生的Servlet</strong>，通过了功能强大的<strong>前端控制器DispatcherServlet</strong>，对请求和响应进行统一处理</li><li>表述层各细分领域需要解决的问题<strong>全方位覆盖</strong>，提供<strong>全面解决方案</strong></li><li><strong>代码清新简洁</strong>，大幅度提升开发效率</li><li>内部组件化程度高，可插拔式组件<strong>即插即用</strong>，想要什么功能配置相应组件即可</li><li><strong>性能卓著</strong>，尤其适合现代大型、超大型互联网项目要求</li></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2>二、HelloWorld</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3>1、开发环境</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>IDE：idea 2019.2</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>构建工具：maven3.5.4</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>服务器：tomcat7</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Spring版本：5.3.1</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>2、创建maven工程</h3>
<!-- /wp:heading -->

<!-- wp:heading {"level":5} -->
<h5>a&gt;添加web模块</h5>
<!-- /wp:heading -->

<!-- wp:heading {"level":5} -->
<h5>b&gt;打包方式：war</h5>
<!-- /wp:heading -->

<!-- wp:heading {"level":5} -->
<h5>c>引入依赖</h5>
<!-- /wp:heading -->

<!-- wp:html -->
[cc lang="xml"]
<dependencies>
    <!-- SpringMVC -->
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-webmvc</artifactId>
        <version>5.3.1</version>
    </dependency>
​
    <!-- 日志 -->
    <dependency>
        <groupId>ch.qos.logback</groupId>
        <artifactId>logback-classic</artifactId>
        <version>1.2.3</version>
    </dependency>
​
    <!-- ServletAPI -->
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>javax.servlet-api</artifactId>
        <version>3.1.0</version>
        <scope>provided</scope>
    </dependency>
​
    <!-- Spring5和Thymeleaf整合包 -->   
    <dependency>
        <groupId>org.thymeleaf</groupId>
        <artifactId>thymeleaf-spring5</artifactId>
        <version>3.0.12.RELEASE</version>
    </dependency>
</dependencies>
[/cc]
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>注：由于 Maven 的传递性，我们不必将所有需要的包全部配置依赖，而是配置最顶端的依赖，其他靠传递性导入。</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>3、配置web.xml</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>注册SpringMVC的前端控制器DispatcherServlet</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":5} -->
<h5>a&gt;默认配置方式</h5>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>此配置作用下，SpringMVC的配置文件默认位于WEB-INF下，默认名称为&lt;servlet-name>-servlet.xml，例如，以下配置所对应SpringMVC的配置文件位于WEB-INF下，文件名为springMVC-servlet.xml</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="xml"]
<!-- 配置SpringMVC的前端控制器，对浏览器发送的请求统一进行处理 -->
<servlet>
    <servlet-name>springMVC</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
</servlet>
<servlet-mapping>
    <servlet-name>springMVC</servlet-name>
    <!--
        设置springMVC的核心控制器所能处理的请求的请求路径
        /所匹配的请求可以是/login或.html或.js或.css方式的请求路径
        但是/不能匹配.jsp请求路径的请求
    -->
    <url-pattern>/</url-pattern>
</servlet-mapping>
[/cc]

<!-- /wp:html -->

<!-- wp:heading {"level":5} -->
<h5>b&gt;扩展配置方式</h5>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>可通过init-param标签设置SpringMVC配置文件的位置和名称，通过load-on-startup标签设置SpringMVC前端控制器DispatcherServlet的初始化时间</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="xml"]
<!-- 配置SpringMVC的前端控制器，对浏览器发送的请求统一进行处理 -->
<servlet>
    <servlet-name>springMVC</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <!-- 通过初始化参数指定SpringMVC配置文件的位置和名称 -->
    <init-param>
        <!-- contextConfigLocation为固定值 -->
        <param-name>contextConfigLocation</param-name>
        <!-- 使用classpath:表示从类路径查找配置文件，例如maven工程中的src/main/resources -->
        <param-value>classpath:springMVC.xml</param-value>
    </init-param>
    <!-- 
        作为框架的核心组件，在启动过程中有大量的初始化操作要做
        而这些操作放在第一次请求时才执行会严重影响访问速度
        因此需要通过此标签将启动控制DispatcherServlet的初始化时间提前到服务器启动时
    -->
    <load-on-startup>1</load-on-startup>
</servlet>
<servlet-mapping>
    <servlet-name>springMVC</servlet-name>
    <!--
        设置springMVC的核心控制器所能处理的请求的请求路径
        /所匹配的请求可以是/login或.html或.js或.css方式的请求路径
        但是/不能匹配.jsp请求路径的请求
    -->
    <url-pattern>/</url-pattern>
</servlet-mapping>
[/cc]

<!-- /wp:html -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>注：</p><p>&lt;url-pattern&gt;标签中使用/和/*的区别：</p><p>/所匹配的请求可以是/login或.html或.js或.css方式的请求路径，但是/不能匹配.jsp请求路径的请求</p><p>因此就可以避免在访问jsp页面时，该请求被DispatcherServlet处理，从而找不到相应的页面</p><p>/*则能够匹配所有请求，例如在使用过滤器时，若需要对所有请求进行过滤，就需要使用/*的写法</p></blockquote>
<!-- /wp:quote -->

<!-- wp:heading {"level":3} -->
<h3>4、创建请求控制器</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>由于前端控制器对浏览器发送的请求进行了统一的处理，但是具体的请求有不同的处理过程，因此需要创建处理具体请求的类，即请求控制器</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>请求控制器中每一个处理请求的方法成为控制器方法</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>因为SpringMVC的控制器由一个POJO（普通的Java类）担任，因此需要通过@Controller注解将其标识为一个控制层组件，交给Spring的IoC容器管理，此时SpringMVC才能够识别控制器的存在</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="java"]
@Controller
public class HelloController {
    
}
[/cc]
<!-- /wp:html -->

<!-- wp:heading {"level":3} -->
<h3>5、创建springMVC的配置文件</h3>
<!-- /wp:heading -->

<!-- wp:html -->
[cc lang="xml"]
<!-- 自动扫描包 -->
<context:component-scan base-package="com.atguigu.mvc.controller"/>
​
<!-- 配置Thymeleaf视图解析器 -->
<bean id="viewResolver" class="org.thymeleaf.spring5.view.ThymeleafViewResolver">
    <property name="order" value="1"/>
    <property name="characterEncoding" value="UTF-8"/>
    <property name="templateEngine">
        <bean class="org.thymeleaf.spring5.SpringTemplateEngine">
            <property name="templateResolver">
                <bean class="org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver">
    
                    <!-- 视图前缀 -->
                    <property name="prefix" value="/WEB-INF/templates/"/>
    
                    <!-- 视图后缀 -->
                    <property name="suffix" value=".html"/>
                    <property name="templateMode" value="HTML5"/>
                    <property name="characterEncoding" value="UTF-8" />
                </bean>
            </property>
        </bean>
    </property>
</bean>
​
<!-- 
   处理静态资源，例如html、js、css、jpg
  若只设置该标签，则只能访问静态资源，其他请求则无法访问
  此时必须设置<mvc:annotation-driven/>解决问题
 -->
<mvc:default-servlet-handler/>
​
<!-- 开启mvc注解驱动 -->
<mvc:annotation-driven>
    <mvc:message-converters>
        <!-- 处理响应中文内容乱码 -->
        <bean class="org.springframework.http.converter.StringHttpMessageConverter">
            <property name="defaultCharset" value="UTF-8" />
            <property name="supportedMediaTypes">
                <list>
                    <value>text/html</value>
                    <value>application/json</value>
                </list>
            </property>
        </bean>
    </mvc:message-converters>
</mvc:annotation-driven>
[/cc]
<!-- /wp:html -->

<!-- wp:heading {"level":3} -->
<h3>6、测试HelloWorld</h3>
<!-- /wp:heading -->

<!-- wp:heading {"level":5} -->
<h5>a>实现对首页的访问</h5>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>在请求控制器中创建处理请求的方法</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="java"]
// @RequestMapping注解：处理请求和控制器方法之间的映射关系
// @RequestMapping注解的value属性可以通过请求地址匹配请求，/表示的当前工程的上下文路径
// localhost:8080/springMVC/
@RequestMapping("/")
public String index() {
    //设置视图名称
    return "index";
}
[/cc]
<!-- /wp:html -->

<!-- wp:heading {"level":5} -->
<h5>b&gt;通过超链接跳转到指定页面</h5>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>在主页index.html中设置超链接</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="html"]
<!DOCTYPE html>
<html lang="en" xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <title>首页</title>
</head>
<body>
    <h1>首页</h1>
    <a th:href="@{/hello}">HelloWorld</a><br/>
</body>
</html>
[/cc]
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>在请求控制器中创建处理请求的方法</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="java"]
@RequestMapping("/hello")
public String HelloWorld() {
    return "target";
}
[/cc]
<!-- /wp:html -->

<!-- wp:heading {"level":3} -->
<h3>7、总结</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>浏览器发送请求，若请求地址符合前端控制器的url-pattern，该请求就会被前端控制器DispatcherServlet处理。前端控制器会读取SpringMVC的核心配置文件，通过扫描组件找到控制器，将请求地址和控制器中@RequestMapping注解的value属性值进行匹配，若匹配成功，该注解所标识的控制器方法就是处理请求的方法。处理请求的方法需要返回一个字符串类型的视图名称，该视图名称会被视图解析器解析，加上前缀和后缀组成视图的路径，通过Thymeleaf对视图进行渲染，最终转发到视图所对应页面</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>三、@RequestMapping注解</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3>1、@RequestMapping注解的功能</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>从注解名称上我们可以看到，@RequestMapping注解的作用就是将请求和处理请求的控制器方法关联起来，建立映射关系。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>SpringMVC 接收到指定的请求，就会来找到在映射关系中对应的控制器方法来处理这个请求。</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>2、@RequestMapping注解的位置</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>@RequestMapping标识一个类：设置映射请求的请求路径的初始信息</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>@RequestMapping标识一个方法：设置映射请求请求路径的具体信息</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="java"]
@Controller
@RequestMapping("/test")
public class RequestMappingController {
​
    //此时请求映射所映射的请求的请求路径为：/test/testRequestMapping
    @RequestMapping("/testRequestMapping")
    public String testRequestMapping(){
        return "success";
    }
​
}
[/cc]
<!-- /wp:html -->

<!-- wp:heading {"level":3} -->
<h3>3、@RequestMapping注解的value属性</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>@RequestMapping注解的value属性通过请求的请求地址匹配请求映射</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>@RequestMapping注解的value属性是一个字符串类型的数组，表示该请求映射能够匹配多个请求地址所对应的请求</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>@RequestMapping注解的value属性必须设置，至少通过请求地址匹配请求映射</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="xml"]
<a th:href="@{/testRequestMapping}">测试@RequestMapping的value属性-->/testRequestMapping</a><br>
<a th:href="@{/test}">测试@RequestMapping的value属性-->/test</a><br>
[/cc]
<!-- /wp:html -->

<!-- wp:html -->
[cc lang="java"]
@RequestMapping(
        value = {"/testRequestMapping", "/test"}
)
public String testRequestMapping(){
    return "success";
}
[/cc]
<!-- /wp:html -->

<!-- wp:heading {"level":3} -->
<h3>4、@RequestMapping注解的method属性</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>@RequestMapping注解的method属性通过请求的请求方式（get或post）匹配请求映射</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>@RequestMapping注解的method属性是一个RequestMethod类型的数组，表示该请求映射能够匹配多种请求方式的请求</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>若当前请求的请求地址满足请求映射的value属性，但是请求方式不满足method属性，则浏览器报错405：Request method 'POST' not supported</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="html"]
<a th:href="@{/test}">测试@RequestMapping的value属性-->/test</a><br>
<form th:action="@{/test}" method="post">
    <input type="submit">
</form>
[/cc]
<!-- /wp:html -->

<!-- wp:html -->
[cc lang="java"]
@RequestMapping(
        value = {"/testRequestMapping", "/test"},
        method = {RequestMethod.GET, RequestMethod.POST}
)
public String testRequestMapping(){
    return "success";
}
[/cc]
<!-- /wp:html -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>注：</p><p>1、对于处理指定请求方式的控制器方法，SpringMVC中提供了@RequestMapping的派生注解</p><p>处理get请求的映射--&gt;@GetMapping</p><p>处理post请求的映射--&gt;@PostMapping</p><p>处理put请求的映射--&gt;@PutMapping</p><p>处理delete请求的映射--&gt;@DeleteMapping</p><p>2、常用的请求方式有get，post，put，delete</p><p>但是目前浏览器只支持get和post，若在form表单提交时，为method设置了其他请求方式的字符串（put或delete），则按照默认的请求方式get处理</p><p>若要发送put和delete请求，则需要通过spring提供的过滤器HiddenHttpMethodFilter，在RESTful部分会讲到</p></blockquote>
<!-- /wp:quote -->

<!-- wp:heading {"level":3} -->
<h3>5、@RequestMapping注解的params属性（了解）</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>@RequestMapping注解的params属性通过请求的请求参数匹配请求映射</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>@RequestMapping注解的params属性是一个字符串类型的数组，可以通过四种表达式设置请求参数和请求映射的匹配关系</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>"param"：要求请求映射所匹配的请求必须携带param请求参数</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>"!param"：要求请求映射所匹配的请求必须不能携带param请求参数</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>"param=value"：要求请求映射所匹配的请求必须携带param请求参数且param=value</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>"param!=value"：要求请求映射所匹配的请求必须携带param请求参数但是param!=value</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="html"]
<a th:href="@{/test(username='admin',password=123456)">测试@RequestMapping的params属性-->/test</a><br>
[/cc]

<!-- /wp:html -->

<!-- wp:html -->
[cc lang="java"]
@RequestMapping(
        value = {"/testRequestMapping", "/test"}
        ,method = {RequestMethod.GET, RequestMethod.POST}
        ,params = {"username","password!=123456"}
)
public String testRequestMapping(){
    return "success";
}
[/cc]
<!-- /wp:html -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>注：</p><p>若当前请求满足@RequestMapping注解的value和method属性，但是不满足params属性，此时页面回报错400：Parameter conditions "username, password!=123456" not met for actual request parameters: username={admin}, password={123456}</p></blockquote>
<!-- /wp:quote -->

<!-- wp:heading {"level":3} -->
<h3>6、@RequestMapping注解的headers属性（了解）</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>@RequestMapping注解的headers属性通过请求的请求头信息匹配请求映射</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>@RequestMapping注解的headers属性是一个字符串类型的数组，可以通过四种表达式设置请求头信息和请求映射的匹配关系</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>"header"：要求请求映射所匹配的请求必须携带header请求头信息</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>"!header"：要求请求映射所匹配的请求必须不能携带header请求头信息</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>"header=value"：要求请求映射所匹配的请求必须携带header请求头信息且header=value</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>"header!=value"：要求请求映射所匹配的请求必须携带header请求头信息且header!=value</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>若当前请求满足@RequestMapping注解的value和method属性，但是不满足headers属性，此时页面显示404错误，即资源未找到</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>7、SpringMVC支持ant风格的路径</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>？：表示任意的单个字符</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>*：表示任意的0个或多个字符</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>**：表示任意的一层或多层目录</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>注意：在使用**时，只能使用/**/xxx的方式</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>8、SpringMVC支持路径中的占位符（重点）</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>原始方式：/deleteUser?id=1</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>rest方式：/deleteUser/1</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>SpringMVC路径中的占位符常用于RESTful风格中，当请求路径中将某些数据通过路径的方式传输到服务器中，就可以在相应的@RequestMapping注解的value属性中通过占位符{xxx}表示传输的数据，在通过@PathVariable注解，将占位符所表示的数据赋值给控制器方法的形参</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="html"]
<a th:href="@{/testRest/1/admin}">测试路径中的占位符-->/testRest</a><br>
[/cc]

<!-- /wp:html -->

<!-- wp:html -->
[cc lang="java"]
@RequestMapping("/testRest/{id}/{username}")
public String testRest(@PathVariable("id") String id, @PathVariable("username") String username){
    System.out.println("id:"+id+",username:"+username);
    return "success";
}
//最终输出的内容为-->id:1,username:admin
[/cc]
<!-- /wp:html -->

<!-- wp:heading -->
<h2>四、SpringMVC获取请求参数</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3>1、通过ServletAPI获取</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>将HttpServletRequest作为控制器方法的形参，此时HttpServletRequest类型的参数表示封装了当前请求的请求报文的对象</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="java"]
@RequestMapping("/testParam")
public String testParam(HttpServletRequest request){
    String username = request.getParameter("username");
    String password = request.getParameter("password");
    System.out.println("username:"+username+",password:"+password);
    return "success";
}
[/cc]9
<!-- /wp:html -->

<!-- wp:heading {"level":3} -->
<h3>2、通过控制器方法的形参获取请求参数</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>在控制器方法的形参位置，设置和请求参数同名的形参，当浏览器发送请求，匹配到请求映射时，在DispatcherServlet中就会将请求参数赋值给相应的形参</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="html"]
<a th:href="@{/testParam(username='admin',password=123456)}">测试获取请求参数-->/testParam</a><br>
[/cc]

<!-- /wp:html -->

<!-- wp:html -->
[cc lang="java"]
@RequestMapping("/testParam")
public String testParam(String username, String password){
    System.out.println("username:"+username+",password:"+password);
    return "success";
}
[/cc]
<!-- /wp:html -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>注：</p><p>若请求所传输的请求参数中有多个同名的请求参数，此时可以在控制器方法的形参中设置字符串数组或者字符串类型的形参接收此请求参数</p><p>若使用字符串数组类型的形参，此参数的数组中包含了每一个数据</p><p>若使用字符串类型的形参，此参数的值为每个数据中间使用逗号拼接的结果</p></blockquote>
<!-- /wp:quote -->

<!-- wp:heading {"level":3} -->
<h3>3、@RequestParam</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>@RequestParam是将请求参数和控制器方法的形参创建映射关系</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>@RequestParam注解一共有三个属性：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>value：指定为形参赋值的请求参数的参数名</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>required：设置是否必须传输此请求参数，默认值为true</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>若设置为true时，则当前请求必须传输value所指定的请求参数，若没有传输该请求参数，且没有设置defaultValue属性，则页面报错400：Required String parameter 'xxx' is not present；若设置为false，则当前请求不是必须传输value所指定的请求参数，若没有传输，则注解所标识的形参的值为null</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>defaultValue：不管required属性值为true或false，当value所指定的请求参数没有传输或传输的值为""时，则使用默认值为形参赋值</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>4、@RequestHeader</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>@RequestHeader是将请求头信息和控制器方法的形参创建映射关系</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>@RequestHeader注解一共有三个属性：value、required、defaultValue，用法同@RequestParam</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>5、@CookieValue</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>@CookieValue是将cookie数据和控制器方法的形参创建映射关系</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>@CookieValue注解一共有三个属性：value、required、defaultValue，用法同@RequestParam</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>6、通过POJO获取请求参数</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>可以在控制器方法的形参位置设置一个实体类类型的形参，此时若浏览器传输的请求参数的参数名和实体类中的属性名一致，那么请求参数就会为此属性赋值</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">&lt;form th:action="@{/testpojo}" method="post"&gt;<br> &nbsp;  用户名：&lt;input type="text" name="username"&gt;&lt;br&gt;<br> &nbsp;  密码：&lt;input type="password" name="password"&gt;&lt;br&gt;<br> &nbsp;  性别：&lt;input type="radio" name="sex" value="男"&gt;男&lt;input type="radio" name="sex" value="女"&gt;女&lt;br&gt;<br> &nbsp;  年龄：&lt;input type="text" name="age"&gt;&lt;br&gt;<br> &nbsp;  邮箱：&lt;input type="text" name="email"&gt;&lt;br&gt;<br> &nbsp; &nbsp;&lt;input type="submit"&gt;<br>&lt;/form&gt;</pre>
<!-- /wp:preformatted -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">@RequestMapping("/testpojo")<br>public String testPOJO(User user){<br> &nbsp; &nbsp;System.out.println(user);<br> &nbsp; &nbsp;return "success";<br>}<br>//最终结果--&gt;User{id=null, username='张三', password='123', age=23, sex='男', email='123@qq.com'}</pre>
<!-- /wp:preformatted -->

<!-- wp:heading {"level":3} -->
<h3>7、解决获取请求参数的乱码问题</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>解决获取请求参数的乱码问题，可以使用SpringMVC提供的编码过滤器CharacterEncodingFilter，但是必须在web.xml中进行注册</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">&lt;!--配置springMVC的编码过滤器--&gt;<br>&lt;filter&gt;<br> &nbsp; &nbsp;&lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;<br> &nbsp; &nbsp;&lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;<br> &nbsp; &nbsp;&lt;init-param&gt;<br> &nbsp; &nbsp; &nbsp; &nbsp;&lt;param-name&gt;encoding&lt;/param-name&gt;<br> &nbsp; &nbsp; &nbsp; &nbsp;&lt;param-value&gt;UTF-8&lt;/param-value&gt;<br> &nbsp; &nbsp;&lt;/init-param&gt;<br> &nbsp; &nbsp;&lt;init-param&gt;<br> &nbsp; &nbsp; &nbsp; &nbsp;&lt;param-name&gt;forceResponseEncoding&lt;/param-name&gt;<br> &nbsp; &nbsp; &nbsp; &nbsp;&lt;param-value&gt;true&lt;/param-value&gt;<br> &nbsp; &nbsp;&lt;/init-param&gt;<br>&lt;/filter&gt;<br>&lt;filter-mapping&gt;<br> &nbsp; &nbsp;&lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;<br> &nbsp; &nbsp;&lt;url-pattern&gt;/*&lt;/url-pattern&gt;<br>&lt;/filter-mapping&gt;</pre>
<!-- /wp:preformatted -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>注：</p><p>SpringMVC中处理编码的过滤器一定要配置到其他过滤器之前，否则无效</p></blockquote>
<!-- /wp:quote -->

<!-- wp:heading {"level":3} -->
<h3>五、域对象共享数据</h3>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3>1、使用ServletAPI向request域对象共享数据</h3>
<!-- /wp:heading -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">@RequestMapping("/testServletAPI")<br>public String testServletAPI(HttpServletRequest request){<br> &nbsp; &nbsp;request.setAttribute("testScope", "hello,servletAPI");<br> &nbsp; &nbsp;return "success";<br>}</pre>
<!-- /wp:preformatted -->

<!-- wp:heading {"level":3} -->
<h3>2、使用ModelAndView向request域对象共享数据</h3>
<!-- /wp:heading -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">@RequestMapping("/testModelAndView")<br>public ModelAndView testModelAndView(){<br> &nbsp; &nbsp;/**<br> &nbsp; &nbsp; * ModelAndView有Model和View的功能<br> &nbsp; &nbsp; * Model主要用于向请求域共享数据<br> &nbsp; &nbsp; * View主要用于设置视图，实现页面跳转<br> &nbsp; &nbsp; */<br> &nbsp; &nbsp;ModelAndView mav = new ModelAndView();<br> &nbsp; &nbsp;//向请求域共享数据<br> &nbsp; &nbsp;mav.addObject("testScope", "hello,ModelAndView");<br> &nbsp; &nbsp;//设置视图，实现页面跳转<br> &nbsp; &nbsp;mav.setViewName("success");<br> &nbsp; &nbsp;return mav;<br>}</pre>
<!-- /wp:preformatted -->

<!-- wp:heading {"level":3} -->
<h3>3、使用Model向request域对象共享数据</h3>
<!-- /wp:heading -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">@RequestMapping("/testModel")<br>public String testModel(Model model){<br> &nbsp; &nbsp;model.addAttribute("testScope", "hello,Model");<br> &nbsp; &nbsp;return "success";<br>}</pre>
<!-- /wp:preformatted -->

<!-- wp:heading {"level":3} -->
<h3>4、使用map向request域对象共享数据</h3>
<!-- /wp:heading -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">@RequestMapping("/testMap")<br>public String testMap(Map&lt;String, Object&gt; map){<br> &nbsp; &nbsp;map.put("testScope", "hello,Map");<br> &nbsp; &nbsp;return "success";<br>}</pre>
<!-- /wp:preformatted -->

<!-- wp:heading {"level":3} -->
<h3>5、使用ModelMap向request域对象共享数据</h3>
<!-- /wp:heading -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">@RequestMapping("/testModelMap")<br>public String testModelMap(ModelMap modelMap){<br> &nbsp; &nbsp;modelMap.addAttribute("testScope", "hello,ModelMap");<br> &nbsp; &nbsp;return "success";<br>}</pre>
<!-- /wp:preformatted -->

<!-- wp:heading {"level":3} -->
<h3>6、Model、ModelMap、Map、ModelAndView的关系</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Model、ModelMap、Map类型的参数其实本质上都是 BindingAwareModelMap 类型的</p>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="" alt="image-20210809145755154"/></figure>
<!-- /wp:image -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="" alt="image-20210809150057175"/></figure>
<!-- /wp:image -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="" alt="image-20210809150226877"/></figure>
<!-- /wp:image -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="" alt="image-20210809150442019"/></figure>
<!-- /wp:image -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">public interface Model{}<br>public class ModelMap extends LinkedHashMap&lt;String, Object&gt; {}<br>public class ExtendedModelMap extends ModelMap implements Model {}<br>public class BindingAwareModelMap extends ExtendedModelMap {}</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>无论用什么类型的方法进入一个视图时，都会把模型和视图数据封装到一个ModelAndView中进行处理</p>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="" alt="image-20210809154250915"/></figure>
<!-- /wp:image -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="" alt="image-20210809154325738"/></figure>
<!-- /wp:image -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="" alt="image-20210809154017446"/></figure>
<!-- /wp:image -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="" alt="image-20210809153939211"/></figure>
<!-- /wp:image -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="" alt="image-20210809154106050"/></figure>
<!-- /wp:image -->

<!-- wp:heading {"level":3} -->
<h3>7、向session域共享数据</h3>
<!-- /wp:heading -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">@RequestMapping("/testSession")<br>public String testSession(HttpSession session){<br> &nbsp; &nbsp;session.setAttribute("testSessionScope", "hello,session");<br> &nbsp; &nbsp;return "success";<br>}</pre>
<!-- /wp:preformatted -->

<!-- wp:heading {"level":3} -->
<h3>8、向application域共享数据</h3>
<!-- /wp:heading -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">@RequestMapping("/testApplication")<br>public String testApplication(HttpSession session){<br>    ServletContext application = session.getServletContext();<br> &nbsp; &nbsp;application.setAttribute("testApplicationScope", "hello,application");<br> &nbsp; &nbsp;return "success";<br>}</pre>
<!-- /wp:preformatted -->

<!-- wp:heading -->
<h2>六、SpringMVC的视图</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>SpringMVC中的视图是View接口，视图的作用渲染数据，将模型Model中的数据展示给用户</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>SpringMVC视图的种类很多，默认有转发视图和重定向视图</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>当工程引入jstl的依赖，转发视图会自动转换为JstlView</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>若使用的视图技术为Thymeleaf，在SpringMVC的配置文件中配置了Thymeleaf的视图解析器，由此视图解析器解析之后所得到的是ThymeleafView</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>1、ThymeleafView</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>当控制器方法中所设置的视图名称没有任何前缀时，此时的视图名称会被SpringMVC配置文件中所配置的视图解析器解析，视图名称拼接视图前缀和视图后缀所得到的最终路径，会通过转发的方式实现跳转</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted"> &nbsp; &nbsp;@RequestMapping("/testThymeleafView")<br> &nbsp; &nbsp;public String testThymeleafView(){<br> &nbsp; &nbsp; &nbsp; &nbsp;return "success";<br> &nbsp;  }</pre>
<!-- /wp:preformatted -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="" alt="image-20210809191651510"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p><strong>locale</strong> 是跟本地化的相关的，表达关于本地化文件的信息</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>然后resloverViewName方法根据视图名称解析视图</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>2、转发视图</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>SpringMVC中默认的转发视图是InternalResourceView</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>SpringMVC中创建转发视图的情况：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>当控制器方法中所设置的视图名称以"forward:"为前缀时，创建InternalResourceView视图，此时的视图名称不会被SpringMVC配置文件中所配置的视图解析器解析，而是会将前缀"forward:"去掉，剩余部分作为最终路径通过转发的方式实现跳转</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><em>整个过程中会创建两次视图</em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>例如"forward:/"，"forward:/employee"</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted"> &nbsp; &nbsp;@RequestMapping("/testForward")<br> &nbsp; &nbsp;public String testForward(){<br> &nbsp; &nbsp; &nbsp; &nbsp;return "forward:/testThymeleafView";<br> &nbsp;  }</pre>
<!-- /wp:preformatted -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="" alt="image-20210809193352849"/></figure>
<!-- /wp:image -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="" alt="image-20210809193810229"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>                                                                                      <strong>整个过程中会创建两次视图</strong></p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>3、重定向视图</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>SpringMVC中默认的重定向视图是RedirectView</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>当控制器方法中所设置的视图名称以"redirect:"为前缀时，创建RedirectView视图，此时的视图名称不会被SpringMVC配置文件中所配置的视图解析器解析，而是会将前缀"redirect:"去掉，剩余部分作为最终路径通过重定向的方式实现跳转</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>例如"redirect:/"，"redirect:/employee"</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">@RequestMapping("/testRedirect")<br>public String testRedirect(){<br> &nbsp; &nbsp;return "redirect:/testHello";<br>}</pre>
<!-- /wp:preformatted -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>注：</p><p>重定向视图在解析时，会先将redirect:前缀去掉，然后会判断剩余部分是否以/开头，若是则会自动拼接上下文路径</p></blockquote>
<!-- /wp:quote -->

<!-- wp:heading {"level":3} -->
<h3>4、视图控制器view-controller</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>当控制器方法中，仅仅用来实现页面跳转，即只需要设置视图名称时，可以将处理器方法使用view-controller标签进行表示</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">&lt;!--<br>    path：设置处理的请求地址<br>    view-name：设置请求地址所对应的视图名称<br>--&gt;<br>&lt;mvc:view-controller path="/testView" view-name="success"&gt;&lt;/mvc:view-controller&gt;</pre>
<!-- /wp:preformatted -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>注：</p><p>当SpringMVC中设置任何一个view-controller时，其他控制器中的请求映射将全部失效，此时需要在SpringMVC的核心配置文件中设置开启mvc注解驱动的标签：</p><p>&lt;mvc:annotation-driven /&gt;</p></blockquote>
<!-- /wp:quote -->

<!-- wp:heading -->
<h2>七、RESTful</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3>1、RESTful简介</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>REST：<strong>Re</strong>presentational <strong>S</strong>tate <strong>T</strong>ransfer，表现层资源状态转移。</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":5} -->
<h5>a&gt;资源</h5>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>资源是一种看待服务器的方式，即，将服务器看作是由很多离散的资源组成。每个资源是服务器上一个可命名的抽象概念。因为资源是一个抽象的概念，所以它不仅仅能代表服务器文件系统中的一个文件、数据库中的一张表等等具体的东西，可以将资源设计的要多抽象有多抽象，只要想象力允许而且客户端应用开发者能够理解。与面向对象设计类似，资源是以名词为核心来组织的，首先关注的是名词。一个资源可以由一个或多个URI来标识。URI既是资源的名称，也是资源在Web上的地址。对某个资源感兴趣的客户端应用，可以通过资源的URI与其进行交互。</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":5} -->
<h5>b&gt;资源的表述</h5>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>资源的表述是一段对于资源在某个特定时刻的状态的描述。可以在客户端-服务器端之间转移（交换）。资源的表述可以有多种格式，例如HTML/XML/JSON/纯文本/图片/视频/音频等等。资源的表述格式可以通过协商机制来确定。请求-响应方向的表述通常使用不同的格式。</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":5} -->
<h5>c&gt;状态转移</h5>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>状态转移说的是：在客户端和服务器端之间转移（transfer）代表资源状态的表述。通过转移和操作资源的表述，来间接实现操作资源的目的。</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>2、RESTful的实现</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>具体说，就是 HTTP 协议里面，四个表示操作方式的动词：GET、POST、PUT、DELETE。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>它们分别对应四种基本操作：GET 用来获取资源，POST 用来新建资源，PUT 用来更新资源，DELETE 用来删除资源。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>REST 风格提倡 URL 地址使用统一的风格设计，从前到后各个单词使用斜杠分开，不使用问号键值对方式携带请求参数，而是将要发送给服务器的数据作为 URL 地址的一部分，以保证整体风格的一致性。</p>
<!-- /wp:paragraph -->

<!-- wp:table -->
<figure class="wp-block-table"><table class=""><thead><tr><th>操作</th><th>传统方式</th><th>REST风格</th></tr></thead><tbody><tr><td>查询操作</td><td>getUserById?id=1</td><td>user/1--&gt;get请求方式</td></tr><tr><td>保存操作</td><td>saveUser</td><td>user--&gt;post请求方式</td></tr><tr><td>删除操作</td><td>deleteUser?id=1</td><td>user/1--&gt;delete请求方式</td></tr><tr><td>更新操作</td><td>updateUser</td><td>user--&gt;put请求方式</td></tr></tbody></table></figure>
<!-- /wp:table -->

<!-- wp:heading {"level":3} -->
<h3>3、HiddenHttpMethodFilter</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>由于浏览器只支持发送get和post方式的请求，那么该如何发送put和delete请求呢？</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>SpringMVC 提供了 <strong>HiddenHttpMethodFilter</strong> 帮助我们<strong>将 POST 请求转换为 DELETE 或 PUT 请求</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>HiddenHttpMethodFilter</strong> 处理put和delete请求的条件：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>a&gt;当前请求的请求方式必须为post</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>b&gt;当前请求必须传输请求参数_method</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>满足以上条件，<strong>HiddenHttpMethodFilter</strong> 过滤器就会将当前请求的请求方式转换为请求参数_method的值，因此请求参数_method的值才是最终的请求方式</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>在web.xml中注册<strong>HiddenHttpMethodFilter</strong> </p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">&lt;filter&gt;<br> &nbsp; &nbsp;&lt;filter-name&gt;HiddenHttpMethodFilter&lt;/filter-name&gt;<br> &nbsp; &nbsp;&lt;filter-class&gt;org.springframework.web.filter.HiddenHttpMethodFilter&lt;/filter-class&gt;<br>&lt;/filter&gt;<br>&lt;filter-mapping&gt;<br> &nbsp; &nbsp;&lt;filter-name&gt;HiddenHttpMethodFilter&lt;/filter-name&gt;<br> &nbsp; &nbsp;&lt;url-pattern&gt;/*&lt;/url-pattern&gt;<br>&lt;/filter-mapping&gt;</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>注：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>目前为止，SpringMVC中提供了两个过滤器：CharacterEncodingFilter和HiddenHttpMethodFilter</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>在web.xml中注册时，必须先注册CharacterEncodingFilter，再注册HiddenHttpMethodFilter</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>原因：</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>在 CharacterEncodingFilter 中通过 request.setCharacterEncoding(encoding) 方法设置字符集的</li><li>request.setCharacterEncoding(encoding) 方法要求前面不能有任何获取请求参数的操作</li><li>而 HiddenHttpMethodFilter 恰恰有一个获取请求方式的操作：</li><li>String paramValue = request.getParameter(this.methodParam);</li></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2>八、RESTful案例</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3>1、准备工作</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>和传统 CRUD 一样，实现对员工信息的增删改查。</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>搭建环境</li><li>准备实体类package com.atguigu.mvc.bean;<br>​<br>public class Employee {<br>​<br> &nbsp; private Integer id;<br> &nbsp; private String lastName;<br>​<br> &nbsp; private String email;<br> &nbsp; //1 male, 0 female<br> &nbsp; private Integer gender;<br> &nbsp; <br> &nbsp; public Integer getId() {<br> &nbsp; &nbsp; &nbsp;return id;<br> &nbsp; }<br>​<br> &nbsp; public void setId(Integer id) {<br> &nbsp; &nbsp; &nbsp;this.id = id;<br> &nbsp; }<br>​<br> &nbsp; public String getLastName() {<br> &nbsp; &nbsp; &nbsp;return lastName;<br> &nbsp; }<br>​<br> &nbsp; public void setLastName(String lastName) {<br> &nbsp; &nbsp; &nbsp;this.lastName = lastName;<br> &nbsp; }<br>​<br> &nbsp; public String getEmail() {<br> &nbsp; &nbsp; &nbsp;return email;<br> &nbsp; }<br>​<br> &nbsp; public void setEmail(String email) {<br> &nbsp; &nbsp; &nbsp;this.email = email;<br> &nbsp; }<br>​<br> &nbsp; public Integer getGender() {<br> &nbsp; &nbsp; &nbsp;return gender;<br> &nbsp; }<br>​<br> &nbsp; public void setGender(Integer gender) {<br> &nbsp; &nbsp; &nbsp;this.gender = gender;<br> &nbsp; }<br>​<br> &nbsp; public Employee(Integer id, String lastName, String email, Integer gender) {<br> &nbsp; &nbsp; &nbsp;super();<br> &nbsp; &nbsp; &nbsp;this.id = id;<br> &nbsp; &nbsp; &nbsp;this.lastName = lastName;<br> &nbsp; &nbsp; &nbsp;this.email = email;<br> &nbsp; &nbsp; &nbsp;this.gender = gender;<br> &nbsp; }<br>​<br> &nbsp; public Employee() {<br> &nbsp; }<br>}</li><li>准备dao模拟数据package com.atguigu.mvc.dao;<br>​<br>import java.util.Collection;<br>import java.util.HashMap;<br>import java.util.Map;<br>​<br>import com.atguigu.mvc.bean.Employee;<br>import org.springframework.stereotype.Repository;<br>​<br>​<br>@Repository<br>public class EmployeeDao {<br>​<br> &nbsp; private static Map&lt;Integer, Employee&gt; employees = null;<br> &nbsp; <br> &nbsp; static{<br> &nbsp; &nbsp; &nbsp;employees = new HashMap&lt;Integer, Employee&gt;();<br>​<br> &nbsp; &nbsp; &nbsp;employees.put(1001, new Employee(1001, "E-AA", "aa@163.com", 1));<br> &nbsp; &nbsp; &nbsp;employees.put(1002, new Employee(1002, "E-BB", "bb@163.com", 1));<br> &nbsp; &nbsp; &nbsp;employees.put(1003, new Employee(1003, "E-CC", "cc@163.com", 0));<br> &nbsp; &nbsp; &nbsp;employees.put(1004, new Employee(1004, "E-DD", "dd@163.com", 0));<br> &nbsp; &nbsp; &nbsp;employees.put(1005, new Employee(1005, "E-EE", "ee@163.com", 1));<br> &nbsp; }<br> &nbsp; <br> &nbsp; private static Integer initId = 1006;<br> &nbsp; <br> &nbsp; public void save(Employee employee){<br> &nbsp; &nbsp; &nbsp;if(employee.getId() == null){<br> &nbsp; &nbsp; &nbsp; &nbsp; employee.setId(initId++);<br> &nbsp; &nbsp;  }<br> &nbsp; &nbsp; &nbsp;employees.put(employee.getId(), employee);<br> &nbsp; }<br> &nbsp; <br> &nbsp; public Collection&lt;Employee&gt; getAll(){<br> &nbsp; &nbsp; &nbsp;return employees.values();<br> &nbsp; }<br> &nbsp; <br> &nbsp; public Employee get(Integer id){<br> &nbsp; &nbsp; &nbsp;return employees.get(id);<br> &nbsp; }<br> &nbsp; <br> &nbsp; public void delete(Integer id){<br> &nbsp; &nbsp; &nbsp;employees.remove(id);<br> &nbsp; }<br>}</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>2、功能清单</h3>
<!-- /wp:heading -->

<!-- wp:table -->
<figure class="wp-block-table"><table class=""><thead><tr><th>功能</th><th>URL 地址</th><th>请求方式</th></tr></thead><tbody><tr><td>访问首页√</td><td>/</td><td>GET</td></tr><tr><td>查询全部数据√</td><td>/employee</td><td>GET</td></tr><tr><td>删除√</td><td>/employee/2</td><td>DELETE</td></tr><tr><td>跳转到添加数据页面√</td><td>/toAdd</td><td>GET</td></tr><tr><td>执行保存√</td><td>/employee</td><td>POST</td></tr><tr><td>跳转到更新数据页面√</td><td>/employee/2</td><td>GET</td></tr><tr><td>执行更新√</td><td>/employee</td><td>PUT</td></tr></tbody></table></figure>
<!-- /wp:table -->

<!-- wp:heading {"level":3} -->
<h3>3、具体功能：访问首页</h3>
<!-- /wp:heading -->

<!-- wp:heading {"level":5} -->
<h5>a&gt;配置view-controller</h5>
<!-- /wp:heading -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">&lt;mvc:view-controller path="/" view-name="index"/&gt;</pre>
<!-- /wp:preformatted -->

<!-- wp:heading {"level":5} -->
<h5>b&gt;创建页面</h5>
<!-- /wp:heading -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">&lt;!DOCTYPE html&gt;<br>&lt;html lang="en" xmlns:th="http://www.thymeleaf.org"&gt;<br>&lt;head&gt;<br> &nbsp; &nbsp;&lt;meta charset="UTF-8" &gt;<br> &nbsp; &nbsp;&lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;h1&gt;首页&lt;/h1&gt;<br>&lt;a th:href="@{/employee}"&gt;访问员工信息&lt;/a&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;</pre>
<!-- /wp:preformatted -->

<!-- wp:heading {"level":3} -->
<h3>4、具体功能：查询所有员工数据</h3>
<!-- /wp:heading -->

<!-- wp:heading {"level":5} -->
<h5>a&gt;控制器方法</h5>
<!-- /wp:heading -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">@RequestMapping(value = "/employee", method = RequestMethod.GET)<br>public String getEmployeeList(Model model){<br> &nbsp; &nbsp;Collection&lt;Employee&gt; employeeList = employeeDao.getAll();<br> &nbsp; &nbsp;model.addAttribute("employeeList", employeeList);<br> &nbsp; &nbsp;return "employee_list";<br>}</pre>
<!-- /wp:preformatted -->

<!-- wp:heading {"level":5} -->
<h5>b&gt;创建employee_list.html</h5>
<!-- /wp:heading -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">&lt;!DOCTYPE html&gt;<br>&lt;html lang="en" xmlns:th="http://www.thymeleaf.org"&gt;<br>&lt;head&gt;<br> &nbsp; &nbsp;&lt;meta charset="UTF-8"&gt;<br> &nbsp; &nbsp;&lt;title&gt;Employee Info&lt;/title&gt;<br> &nbsp; &nbsp;&lt;script type="text/javascript" th:src="@{/static/js/vue.js}"&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>​<br> &nbsp; &nbsp;&lt;table border="1" cellpadding="0" cellspacing="0" style="text-align: center;" id="dataTable"&gt;<br> &nbsp; &nbsp; &nbsp; &nbsp;&lt;tr&gt;<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;th colspan="5"&gt;Employee Info&lt;/th&gt;<br> &nbsp; &nbsp; &nbsp; &nbsp;&lt;/tr&gt;<br> &nbsp; &nbsp; &nbsp; &nbsp;&lt;tr&gt;<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;th&gt;id&lt;/th&gt;<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;th&gt;lastName&lt;/th&gt;<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;th&gt;email&lt;/th&gt;<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;th&gt;gender&lt;/th&gt;<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;th&gt;options(&lt;a th:href="@{/toAdd}"&gt;add&lt;/a&gt;)&lt;/th&gt;<br> &nbsp; &nbsp; &nbsp; &nbsp;&lt;/tr&gt;<br> &nbsp; &nbsp; &nbsp; &nbsp;&lt;tr th:each="employee : ${employeeList}"&gt;<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;td th:text="${employee.id}"&gt;&lt;/td&gt;<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;td th:text="${employee.lastName}"&gt;&lt;/td&gt;<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;td th:text="${employee.email}"&gt;&lt;/td&gt;<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;td th:text="${employee.gender}"&gt;&lt;/td&gt;<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;td&gt;<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;a class="deleteA" @click="deleteEmployee" th:href="@{'/employee/'+${employee.id}}"&gt;delete&lt;/a&gt;<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;a th:href="@{'/employee/'+${employee.id}}"&gt;update&lt;/a&gt;<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;/td&gt;<br> &nbsp; &nbsp; &nbsp; &nbsp;&lt;/tr&gt;<br> &nbsp; &nbsp;&lt;/table&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;</pre>
<!-- /wp:preformatted -->

<!-- wp:heading {"level":3} -->
<h3>5、具体功能：删除</h3>
<!-- /wp:heading -->

<!-- wp:heading {"level":5} -->
<h5>a&gt;创建处理delete请求方式的表单</h5>
<!-- /wp:heading -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">&lt;!-- 作用：通过超链接控制表单的提交，将post请求转换为delete请求 --&gt;<br>&lt;form id="delete_form" method="post"&gt;<br> &nbsp; &nbsp;&lt;!-- HiddenHttpMethodFilter要求：必须传输_method请求参数，并且值为最终的请求方式 --&gt;<br> &nbsp; &nbsp;&lt;input type="hidden" name="_method" value="delete"/&gt;<br>&lt;/form&gt;</pre>
<!-- /wp:preformatted -->

<!-- wp:heading {"level":5} -->
<h5>b&gt;删除超链接绑定点击事件</h5>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>引入vue.js</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">&lt;script type="text/javascript" th:src="@{/static/js/vue.js}"&gt;&lt;/script&gt;</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>删除超链接</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">&lt;a class="deleteA" @click="deleteEmployee" th:href="@{'/employee/'+${employee.id}}"&gt;delete&lt;/a&gt;</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>通过vue处理点击事件</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">&lt;script type="text/javascript"&gt;<br> &nbsp; &nbsp;var vue = new Vue({<br> &nbsp; &nbsp; &nbsp; &nbsp;el:"#dataTable",<br> &nbsp; &nbsp; &nbsp; &nbsp;methods:{<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//event表示当前事件<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;deleteEmployee:function (event) {<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//通过id获取表单标签<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;var delete_form = document.getElementById("delete_form");<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//将触发事件的超链接的href属性为表单的action属性赋值<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;delete_form.action = event.target.href;<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//提交表单<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;delete_form.submit();<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//阻止超链接的默认跳转行为<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;event.preventDefault();<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  }<br> &nbsp; &nbsp; &nbsp;  }<br> &nbsp;  });<br>&lt;/script&gt;</pre>
<!-- /wp:preformatted -->

<!-- wp:heading {"level":5} -->
<h5>c&gt;控制器方法</h5>
<!-- /wp:heading -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">@RequestMapping(value = "/employee/{id}", method = RequestMethod.DELETE)<br>public String deleteEmployee(@PathVariable("id") Integer id){<br> &nbsp; &nbsp;employeeDao.delete(id);<br> &nbsp; &nbsp;return "redirect:/employee";<br>}</pre>
<!-- /wp:preformatted -->

<!-- wp:heading {"level":3} -->
<h3>6、具体功能：跳转到添加数据页面</h3>
<!-- /wp:heading -->

<!-- wp:heading {"level":5} -->
<h5>a&gt;配置view-controller</h5>
<!-- /wp:heading -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">&lt;mvc:view-controller path="/toAdd" view-name="employee_add"&gt;&lt;/mvc:view-controller&gt;</pre>
<!-- /wp:preformatted -->

<!-- wp:heading {"level":5} -->
<h5>b&gt;创建employee_add.html</h5>
<!-- /wp:heading -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">&lt;!DOCTYPE html&gt;<br>&lt;html lang="en" xmlns:th="http://www.thymeleaf.org"&gt;<br>&lt;head&gt;<br> &nbsp; &nbsp;&lt;meta charset="UTF-8"&gt;<br> &nbsp; &nbsp;&lt;title&gt;Add Employee&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>​<br>&lt;form th:action="@{/employee}" method="post"&gt;<br> &nbsp;  lastName:&lt;input type="text" name="lastName"&gt;&lt;br&gt;<br> &nbsp;  email:&lt;input type="text" name="email"&gt;&lt;br&gt;<br> &nbsp;  gender:&lt;input type="radio" name="gender" value="1"&gt;male<br> &nbsp; &nbsp;&lt;input type="radio" name="gender" value="0"&gt;female&lt;br&gt;<br> &nbsp; &nbsp;&lt;input type="submit" value="add"&gt;&lt;br&gt;<br>&lt;/form&gt;<br>​<br>&lt;/body&gt;<br>&lt;/html&gt;</pre>
<!-- /wp:preformatted -->

<!-- wp:heading {"level":3} -->
<h3>7、具体功能：执行保存</h3>
<!-- /wp:heading -->

<!-- wp:heading {"level":5} -->
<h5>a&gt;控制器方法</h5>
<!-- /wp:heading -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">@RequestMapping(value = "/employee", method = RequestMethod.POST)<br>public String addEmployee(Employee employee){<br> &nbsp; &nbsp;employeeDao.save(employee);<br> &nbsp; &nbsp;return "redirect:/employee";<br>}</pre>
<!-- /wp:preformatted -->

<!-- wp:heading {"level":3} -->
<h3>8、具体功能：跳转到更新数据页面</h3>
<!-- /wp:heading -->

<!-- wp:heading {"level":5} -->
<h5>a&gt;修改超链接</h5>
<!-- /wp:heading -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">&lt;a th:href="@{'/employee/'+${employee.id}}"&gt;update&lt;/a&gt;</pre>
<!-- /wp:preformatted -->

<!-- wp:heading {"level":5} -->
<h5>b&gt;控制器方法</h5>
<!-- /wp:heading -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">@RequestMapping(value = "/employee/{id}", method = RequestMethod.GET)<br>public String getEmployeeById(@PathVariable("id") Integer id, Model model){<br> &nbsp; &nbsp;Employee employee = employeeDao.get(id);<br> &nbsp; &nbsp;model.addAttribute("employee", employee);<br> &nbsp; &nbsp;return "employee_update";<br>}</pre>
<!-- /wp:preformatted -->

<!-- wp:heading {"level":5} -->
<h5>c&gt;创建employee_update.html</h5>
<!-- /wp:heading -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">&lt;!DOCTYPE html&gt;<br>&lt;html lang="en" xmlns:th="http://www.thymeleaf.org"&gt;<br>&lt;head&gt;<br> &nbsp; &nbsp;&lt;meta charset="UTF-8"&gt;<br> &nbsp; &nbsp;&lt;title&gt;Update Employee&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>​<br>&lt;form th:action="@{/employee}" method="post"&gt;<br> &nbsp; &nbsp;&lt;input type="hidden" name="_method" value="put"&gt;<br> &nbsp; &nbsp;&lt;input type="hidden" name="id" th:value="${employee.id}"&gt;<br> &nbsp;  lastName:&lt;input type="text" name="lastName" th:value="${employee.lastName}"&gt;&lt;br&gt;<br> &nbsp;  email:&lt;input type="text" name="email" th:value="${employee.email}"&gt;&lt;br&gt;<br> &nbsp; &nbsp;&lt;!--<br> &nbsp; &nbsp; &nbsp; &nbsp;th:field="${employee.gender}"可用于单选框或复选框的回显<br> &nbsp; &nbsp; &nbsp; &nbsp;若单选框的value和employee.gender的值一致，则添加checked="checked"属性<br> &nbsp; &nbsp;--&gt;<br> &nbsp;  gender:&lt;input type="radio" name="gender" value="1" th:field="${employee.gender}"&gt;male<br> &nbsp; &nbsp;&lt;input type="radio" name="gender" value="0" th:field="${employee.gender}"&gt;female&lt;br&gt;<br> &nbsp; &nbsp;&lt;input type="submit" value="update"&gt;&lt;br&gt;<br>&lt;/form&gt;<br>​<br>&lt;/body&gt;<br>&lt;/html&gt;</pre>
<!-- /wp:preformatted -->

<!-- wp:heading {"level":3} -->
<h3>9、具体功能：执行更新</h3>
<!-- /wp:heading -->

<!-- wp:heading {"level":5} -->
<h5>a&gt;控制器方法</h5>
<!-- /wp:heading -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">@RequestMapping(value = "/employee", method = RequestMethod.PUT)<br>public String updateEmployee(Employee employee){<br> &nbsp; &nbsp;employeeDao.save(employee);<br> &nbsp; &nbsp;return "redirect:/employee";<br>}</pre>
<!-- /wp:preformatted -->

<!-- wp:heading -->
<h2>八、HttpMessageConverter</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>HttpMessageConverter，报文信息转换器，将请求报文转换为Java对象，或将Java对象转换为响应报文</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>HttpMessageConverter提供了两个注解和两个类型：@RequestBody，@ResponseBody，RequestEntity，</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>ResponseEntity</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>1、@RequestBody</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>@RequestBody可以获取请求体，需要在控制器方法设置一个形参，使用@RequestBody进行标识，当前请求的请求体就会为当前注解所标识的形参赋值</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">&lt;form th:action="@{/testRequestBody}" method="post"&gt;<br> &nbsp;  用户名：&lt;input type="text" name="username"&gt;&lt;br&gt;<br> &nbsp;  密码：&lt;input type="password" name="password"&gt;&lt;br&gt;<br> &nbsp; &nbsp;&lt;input type="submit"&gt;<br>&lt;/form&gt;</pre>
<!-- /wp:preformatted -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">@RequestMapping("/testRequestBody")<br>public String testRequestBody(@RequestBody String requestBody){<br> &nbsp; &nbsp;System.out.println("requestBody:"+requestBody);<br> &nbsp; &nbsp;return "success";<br>}</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>输出结果：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>requestBody:username=admin&amp;password=123456</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>2、RequestEntity</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>RequestEntity封装请求报文的一种类型，需要在控制器方法的形参中设置该类型的形参，当前请求的请求报文就会赋值给该形参，可以通过getHeaders()获取请求头信息，通过getBody()获取请求体信息</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">@RequestMapping("/testRequestEntity")<br>public String testRequestEntity(RequestEntity&lt;String&gt; requestEntity){<br> &nbsp; &nbsp;System.out.println("requestHeader:"+requestEntity.getHeaders());<br> &nbsp; &nbsp;System.out.println("requestBody:"+requestEntity.getBody());<br> &nbsp; &nbsp;return "success";<br>}</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>输出结果：
requestHeader:[host:"localhost:8080", connection:"keep-alive", content-length:"27", cache-control:"max-age=0", sec-ch-ua:"" Not A;Brand";v="99", "Chromium";v="90", "Google Chrome";v="90"", sec-ch-ua-mobile:"?0", upgrade-insecure-requests:"1", origin:"<a href="http://localhost:8080">http://localhost:8080</a>", user-agent:"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36"]
requestBody:username=admin&amp;password=123</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>3、@ResponseBody</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>@ResponseBody用于标识一个控制器方法，可以将该方法的返回值直接作为响应报文的响应体响应到浏览器</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">@RequestMapping("/testResponseBody")<br>@ResponseBody<br>public String testResponseBody(){<br> &nbsp; &nbsp;return "success";<br>}</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>结果：浏览器页面显示success</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>4、SpringMVC处理json</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>@ResponseBody处理json的步骤：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>a&gt;导入jackson的依赖</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">&lt;dependency&gt;<br> &nbsp; &nbsp;&lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;<br> &nbsp; &nbsp;&lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;<br> &nbsp; &nbsp;&lt;version&gt;2.12.1&lt;/version&gt;<br>&lt;/dependency&gt;</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>b&gt;在SpringMVC的核心配置文件中开启mvc的注解驱动，此时在HandlerAdaptor中会自动装配一个消息转换器：MappingJackson2HttpMessageConverter，可以将响应到浏览器的Java对象转换为Json格式的字符串</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">&lt;mvc:annotation-driven /&gt;</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>c&gt;在处理器方法上使用@ResponseBody注解进行标识</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>d&gt;将Java对象直接作为控制器方法的返回值返回，就会自动转换为Json格式的字符串</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">@RequestMapping("/testResponseUser")<br>@ResponseBody<br>public User testResponseUser(){<br> &nbsp; &nbsp;return new User(1001,"admin","123456",23,"男");<br>}</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>浏览器的页面中展示的结果：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>{"id":1001,"username":"admin","password":"123456","age":23,"sex":"男"}</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>5、SpringMVC处理ajax</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>a&gt;请求超链接：</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">&lt;div id="app"&gt;<br>    &lt;a th:href="@{/testAjax}" @click="testAjax"&gt;testAjax&lt;/a&gt;&lt;br&gt;<br>&lt;/div&gt;</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>b&gt;通过vue和axios处理点击事件：</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">&lt;script type="text/javascript" th:src="@{/static/js/vue.js}"&gt;&lt;/script&gt;<br>&lt;script type="text/javascript" th:src="@{/static/js/axios.min.js}"&gt;&lt;/script&gt;<br>&lt;script type="text/javascript"&gt;<br> &nbsp; &nbsp;var vue = new Vue({<br> &nbsp; &nbsp; &nbsp; &nbsp;el:"#app",<br> &nbsp; &nbsp; &nbsp; &nbsp;methods:{<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;testAjax:function (event) {<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;axios({<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;method:"post",<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;url:event.target.href,<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;params:{<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;username:"admin",<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;password:"123456"<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  }<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  }).then(function (response) {<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;alert(response.data);<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  });<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;event.preventDefault();<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  }<br> &nbsp; &nbsp; &nbsp;  }<br> &nbsp;  });<br>&lt;/script&gt;</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>c&gt;控制器方法：</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">@RequestMapping("/testAjax")<br>@ResponseBody<br>public String testAjax(String username, String password){<br> &nbsp; &nbsp;System.out.println("username:"+username+",password:"+password);<br> &nbsp; &nbsp;return "hello,ajax";<br>}</pre>
<!-- /wp:preformatted -->

<!-- wp:heading {"level":3} -->
<h3>6、@RestController注解</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>@RestController注解是springMVC提供的一个复合注解，标识在控制器的类上，就相当于为类添加了@Controller注解，并且为其中的每个方法添加了@ResponseBody注解</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>7、ResponseEntity</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>ResponseEntity用于控制器方法的返回值类型，该控制器方法的返回值就是响应到浏览器的响应报文</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>九、文件上传和下载</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3>1、文件下载</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>使用ResponseEntity实现下载文件的功能</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">@RequestMapping("/testDown")<br>public ResponseEntity&lt;byte[]&gt; testResponseEntity(HttpSession session) throws IOException {<br> &nbsp; &nbsp;//获取ServletContext对象<br> &nbsp; &nbsp;ServletContext servletContext = session.getServletContext();<br> &nbsp; &nbsp;//获取服务器中文件的真实路径<br> &nbsp; &nbsp;String realPath = servletContext.getRealPath("/static/img/1.jpg");<br> &nbsp; &nbsp;//创建输入流<br> &nbsp; &nbsp;InputStream is = new FileInputStream(realPath);<br> &nbsp; &nbsp;//创建字节数组<br> &nbsp; &nbsp;byte[] bytes = new byte[is.available()];<br> &nbsp; &nbsp;//将流读到字节数组中<br> &nbsp; &nbsp;is.read(bytes);<br> &nbsp; &nbsp;//创建HttpHeaders对象设置响应头信息<br> &nbsp; &nbsp;MultiValueMap&lt;String, String&gt; headers = new HttpHeaders();<br> &nbsp; &nbsp;//设置要下载方式以及下载文件的名字<br> &nbsp; &nbsp;headers.add("Content-Disposition", "attachment;filename=1.jpg");<br> &nbsp; &nbsp;//设置响应状态码<br> &nbsp; &nbsp;HttpStatus statusCode = HttpStatus.OK;<br> &nbsp; &nbsp;//创建ResponseEntity对象<br> &nbsp; &nbsp;ResponseEntity&lt;byte[]&gt; responseEntity = new ResponseEntity&lt;&gt;(bytes, headers, statusCode);<br> &nbsp; &nbsp;//关闭输入流<br> &nbsp; &nbsp;is.close();<br> &nbsp; &nbsp;return responseEntity;<br>}</pre>
<!-- /wp:preformatted -->

<!-- wp:heading {"level":3} -->
<h3>2、文件上传</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>文件上传要求form表单的请求方式必须为post，并且添加属性enctype="multipart/form-data"</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>SpringMVC中将上传的文件封装到MultipartFile对象中，通过此对象可以获取文件相关信息</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>上传步骤：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>a&gt;添加依赖：</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">&lt;!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload --&gt;<br>&lt;dependency&gt;<br> &nbsp; &nbsp;&lt;groupId&gt;commons-fileupload&lt;/groupId&gt;<br> &nbsp; &nbsp;&lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt;<br> &nbsp; &nbsp;&lt;version&gt;1.3.1&lt;/version&gt;<br>&lt;/dependency&gt;</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>b&gt;在SpringMVC的配置文件中添加配置：</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">&lt;!--必须通过文件解析器的解析才能将文件转换为MultipartFile对象--&gt;<br>&lt;bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"&gt;&lt;/bean&gt;</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>c&gt;控制器方法：</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">@RequestMapping("/testUp")<br>public String testUp(MultipartFile photo, HttpSession session) throws IOException {<br> &nbsp; &nbsp;//获取上传的文件的文件名<br> &nbsp; &nbsp;String fileName = photo.getOriginalFilename();<br> &nbsp; &nbsp;//处理文件重名问题<br> &nbsp; &nbsp;String hzName = fileName.substring(fileName.lastIndexOf("."));<br> &nbsp; &nbsp;fileName = UUID.randomUUID().toString() + hzName;<br> &nbsp; &nbsp;//获取服务器中photo目录的路径<br> &nbsp; &nbsp;ServletContext servletContext = session.getServletContext();<br> &nbsp; &nbsp;String photoPath = servletContext.getRealPath("photo");<br> &nbsp; &nbsp;File file = new File(photoPath);<br> &nbsp; &nbsp;if(!file.exists()){<br> &nbsp; &nbsp; &nbsp; &nbsp;file.mkdir();<br> &nbsp;  }<br> &nbsp; &nbsp;String finalPath = photoPath + File.separator + fileName;<br> &nbsp; &nbsp;//实现上传功能<br> &nbsp; &nbsp;photo.transferTo(new File(finalPath));<br> &nbsp; &nbsp;return "success";<br>}</pre>
<!-- /wp:preformatted -->

<!-- wp:heading -->
<h2>十、拦截器</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3>1、拦截器的配置</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>SpringMVC中的拦截器用于拦截控制器方法的执行</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>SpringMVC中的拦截器需要实现HandlerInterceptor</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>SpringMVC的拦截器必须在SpringMVC的配置文件中进行配置：</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">&lt;bean class="com.atguigu.interceptor.FirstInterceptor"&gt;&lt;/bean&gt;<br>&lt;ref bean="firstInterceptor"&gt;&lt;/ref&gt;<br>&lt;!-- 以上两种配置方式都是对DispatcherServlet所处理的所有的请求进行拦截 --&gt;<br>&lt;mvc:interceptor&gt;<br> &nbsp; &nbsp;&lt;mvc:mapping path="/**"/&gt;<br> &nbsp; &nbsp;&lt;mvc:exclude-mapping path="/testRequestEntity"/&gt;<br> &nbsp; &nbsp;&lt;ref bean="firstInterceptor"&gt;&lt;/ref&gt;<br>&lt;/mvc:interceptor&gt;<br>&lt;!-- <br>    以上配置方式可以通过ref或bean标签设置拦截器，通过mvc:mapping设置需要拦截的请求，通过mvc:exclude-mapping设置需要排除的请求，即不需要拦截的请求<br>--&gt;</pre>
<!-- /wp:preformatted -->

<!-- wp:heading {"level":3} -->
<h3>2、拦截器的三个抽象方法</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>SpringMVC中的拦截器有三个抽象方法：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>preHandle：控制器方法执行之前执行preHandle()，其boolean类型的返回值表示是否拦截或放行，返回true为放行，即调用控制器方法；返回false表示拦截，即不调用控制器方法</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>postHandle：控制器方法执行之后执行postHandle()</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>afterComplation：处理完视图和模型数据，渲染视图完毕之后执行afterComplation()</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>3、多个拦截器的执行顺序</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>a&gt;若每个拦截器的preHandle()都返回true</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>此时多个拦截器的执行顺序和拦截器在SpringMVC的配置文件的配置顺序有关：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>preHandle()会按照配置的顺序执行，而postHandle()和afterComplation()会按照配置的反序执行</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>b&gt;若某个拦截器的preHandle()返回了false</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>preHandle()返回false和它之前的拦截器的preHandle()都会执行，postHandle()都不执行，返回false的拦截器之前的拦截器的afterComplation()会执行</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>十一、异常处理器</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3>1、基于配置的异常处理</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>SpringMVC提供了一个处理控制器方法执行过程中所出现的异常的接口：HandlerExceptionResolver</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>HandlerExceptionResolver接口的实现类有：DefaultHandlerExceptionResolver和SimpleMappingExceptionResolver</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>SpringMVC提供了自定义的异常处理器SimpleMappingExceptionResolver，使用方式：</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">&lt;bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"&gt;<br> &nbsp; &nbsp;&lt;property name="exceptionMappings"&gt;<br> &nbsp; &nbsp; &nbsp; &nbsp;&lt;props&gt;<br> &nbsp; &nbsp; &nbsp;      &lt;!--<br> &nbsp; &nbsp; &nbsp;          properties的键表示处理器方法执行过程中出现的异常<br> &nbsp; &nbsp; &nbsp;          properties的值表示若出现指定异常时，设置一个新的视图名称，跳转到指定页面<br> &nbsp; &nbsp; &nbsp;      --&gt;<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;prop key="java.lang.ArithmeticException"&gt;error&lt;/prop&gt;<br> &nbsp; &nbsp; &nbsp; &nbsp;&lt;/props&gt;<br> &nbsp; &nbsp;&lt;/property&gt;<br> &nbsp; &nbsp;&lt;!--<br> &nbsp;      exceptionAttribute属性设置一个属性名，将出现的异常信息在请求域中进行共享<br> &nbsp; &nbsp;--&gt;<br> &nbsp; &nbsp;&lt;property name="exceptionAttribute" value="ex"&gt;&lt;/property&gt;<br>&lt;/bean&gt;</pre>
<!-- /wp:preformatted -->

<!-- wp:heading {"level":3} -->
<h3>2、基于注解的异常处理</h3>
<!-- /wp:heading -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">//@ControllerAdvice将当前类标识为异常处理的组件<br>@ControllerAdvice<br>public class ExceptionController {<br>​<br> &nbsp; &nbsp;//@ExceptionHandler用于设置所标识方法处理的异常<br> &nbsp; &nbsp;@ExceptionHandler(ArithmeticException.class)<br> &nbsp; &nbsp;//ex表示当前请求处理中出现的异常对象<br> &nbsp; &nbsp;public String handleArithmeticException(Exception ex, Model model){<br> &nbsp; &nbsp; &nbsp; &nbsp;model.addAttribute("ex", ex);<br> &nbsp; &nbsp; &nbsp; &nbsp;return "error";<br> &nbsp;  }<br>​<br>}</pre>
<!-- /wp:preformatted -->

<!-- wp:heading -->
<h2>十二、注解配置SpringMVC</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>使用配置类和注解代替web.xml和SpringMVC配置文件的功能</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>1、创建初始化类，代替web.xml</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>在Servlet3.0环境中，容器会在类路径中查找实现javax.servlet.ServletContainerInitializer接口的类，如果找到的话就用它来配置Servlet容器。
Spring提供了这个接口的实现，名为SpringServletContainerInitializer，这个类反过来又会查找实现WebApplicationInitializer的类并将配置的任务交给它们来完成。Spring3.2引入了一个便利的WebApplicationInitializer基础实现，名为AbstractAnnotationConfigDispatcherServletInitializer，当我们的类扩展了AbstractAnnotationConfigDispatcherServletInitializer并将其部署到Servlet3.0容器的时候，容器会自动发现它，并用它来配置Servlet上下文。</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">public class WebInit extends AbstractAnnotationConfigDispatcherServletInitializer {<br>​<br> &nbsp; &nbsp;/**<br> &nbsp; &nbsp; * 指定spring的配置类<br> &nbsp; &nbsp; * @return<br> &nbsp; &nbsp; */<br> &nbsp; &nbsp;@Override<br> &nbsp; &nbsp;protected Class&lt;?&gt;[] getRootConfigClasses() {<br> &nbsp; &nbsp; &nbsp; &nbsp;return new Class[]{SpringConfig.class};<br> &nbsp;  }<br>​<br> &nbsp; &nbsp;/**<br> &nbsp; &nbsp; * 指定SpringMVC的配置类<br> &nbsp; &nbsp; * @return<br> &nbsp; &nbsp; */<br> &nbsp; &nbsp;@Override<br> &nbsp; &nbsp;protected Class&lt;?&gt;[] getServletConfigClasses() {<br> &nbsp; &nbsp; &nbsp; &nbsp;return new Class[]{WebConfig.class};<br> &nbsp;  }<br>​<br> &nbsp; &nbsp;/**<br> &nbsp; &nbsp; * 指定DispatcherServlet的映射规则，即url-pattern<br> &nbsp; &nbsp; * @return<br> &nbsp; &nbsp; */<br> &nbsp; &nbsp;@Override<br> &nbsp; &nbsp;protected String[] getServletMappings() {<br> &nbsp; &nbsp; &nbsp; &nbsp;return new String[]{"/"};<br> &nbsp;  }<br>​<br> &nbsp; &nbsp;/**<br> &nbsp; &nbsp; * 添加过滤器<br> &nbsp; &nbsp; * @return<br> &nbsp; &nbsp; */<br> &nbsp; &nbsp;@Override<br> &nbsp; &nbsp;protected Filter[] getServletFilters() {<br> &nbsp; &nbsp; &nbsp; &nbsp;CharacterEncodingFilter encodingFilter = new CharacterEncodingFilter();<br> &nbsp; &nbsp; &nbsp; &nbsp;encodingFilter.setEncoding("UTF-8");<br> &nbsp; &nbsp; &nbsp; &nbsp;encodingFilter.setForceRequestEncoding(true);<br> &nbsp; &nbsp; &nbsp; &nbsp;HiddenHttpMethodFilter hiddenHttpMethodFilter = new HiddenHttpMethodFilter();<br> &nbsp; &nbsp; &nbsp; &nbsp;return new Filter[]{encodingFilter, hiddenHttpMethodFilter};<br> &nbsp;  }<br>}</pre>
<!-- /wp:preformatted -->

<!-- wp:heading {"level":3} -->
<h3>2、创建SpringConfig配置类，代替spring的配置文件</h3>
<!-- /wp:heading -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">@Configuration<br>public class SpringConfig {<br>    //ssm整合之后，spring的配置信息写在此类中<br>}</pre>
<!-- /wp:preformatted -->

<!-- wp:heading {"level":3} -->
<h3>3、创建WebConfig配置类，代替SpringMVC的配置文件</h3>
<!-- /wp:heading -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">@Configuration<br>//扫描组件<br>@ComponentScan("com.atguigu.mvc.controller")<br>//开启MVC注解驱动<br>@EnableWebMvc<br>public class WebConfig implements WebMvcConfigurer {<br>​<br> &nbsp; &nbsp;//使用默认的servlet处理静态资源<br> &nbsp; &nbsp;@Override<br> &nbsp; &nbsp;public void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) {<br> &nbsp; &nbsp; &nbsp; &nbsp;configurer.enable();<br> &nbsp;  }<br>​<br> &nbsp; &nbsp;//配置文件上传解析器<br> &nbsp; &nbsp;@Bean<br> &nbsp; &nbsp;public CommonsMultipartResolver multipartResolver(){<br> &nbsp; &nbsp; &nbsp; &nbsp;return new CommonsMultipartResolver();<br> &nbsp;  }<br>​<br> &nbsp; &nbsp;//配置拦截器<br> &nbsp; &nbsp;@Override<br> &nbsp; &nbsp;public void addInterceptors(InterceptorRegistry registry) {<br> &nbsp; &nbsp; &nbsp; &nbsp;FirstInterceptor firstInterceptor = new FirstInterceptor();<br> &nbsp; &nbsp; &nbsp; &nbsp;registry.addInterceptor(firstInterceptor).addPathPatterns("/**");<br> &nbsp;  }<br> &nbsp; &nbsp;<br> &nbsp; &nbsp;//配置视图控制<br> &nbsp; &nbsp;<br> &nbsp; &nbsp;/*@Override<br> &nbsp; &nbsp;public void addViewControllers(ViewControllerRegistry registry) {<br> &nbsp; &nbsp; &nbsp; &nbsp;registry.addViewController("/").setViewName("index");<br> &nbsp; &nbsp;}*/<br> &nbsp; &nbsp;<br> &nbsp; &nbsp;//配置异常映射<br> &nbsp; &nbsp;/*@Override<br> &nbsp; &nbsp;public void configureHandlerExceptionResolvers(List&lt;HandlerExceptionResolver&gt; resolvers) {<br> &nbsp; &nbsp; &nbsp; &nbsp;SimpleMappingExceptionResolver exceptionResolver = new SimpleMappingExceptionResolver();<br> &nbsp; &nbsp; &nbsp; &nbsp;Properties prop = new Properties();<br> &nbsp; &nbsp; &nbsp; &nbsp;prop.setProperty("java.lang.ArithmeticException", "error");<br> &nbsp; &nbsp; &nbsp; &nbsp;//设置异常映射<br> &nbsp; &nbsp; &nbsp; &nbsp;exceptionResolver.setExceptionMappings(prop);<br> &nbsp; &nbsp; &nbsp; &nbsp;//设置共享异常信息的键<br> &nbsp; &nbsp; &nbsp; &nbsp;exceptionResolver.setExceptionAttribute("ex");<br> &nbsp; &nbsp; &nbsp; &nbsp;resolvers.add(exceptionResolver);<br> &nbsp; &nbsp;}*/<br>​<br> &nbsp; &nbsp;//配置生成模板解析器<br> &nbsp; &nbsp;@Bean<br> &nbsp; &nbsp;public ITemplateResolver templateResolver() {<br> &nbsp; &nbsp; &nbsp; &nbsp;WebApplicationContext webApplicationContext = ContextLoader.getCurrentWebApplicationContext();<br> &nbsp; &nbsp; &nbsp; &nbsp;// ServletContextTemplateResolver需要一个ServletContext作为构造参数，可通过WebApplicationContext 的方法获得<br> &nbsp; &nbsp; &nbsp; &nbsp;ServletContextTemplateResolver templateResolver = new ServletContextTemplateResolver(<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;webApplicationContext.getServletContext());<br> &nbsp; &nbsp; &nbsp; &nbsp;templateResolver.setPrefix("/WEB-INF/templates/");<br> &nbsp; &nbsp; &nbsp; &nbsp;templateResolver.setSuffix(".html");<br> &nbsp; &nbsp; &nbsp; &nbsp;templateResolver.setCharacterEncoding("UTF-8");<br> &nbsp; &nbsp; &nbsp; &nbsp;templateResolver.setTemplateMode(TemplateMode.HTML);<br> &nbsp; &nbsp; &nbsp; &nbsp;return templateResolver;<br> &nbsp;  }<br>​<br> &nbsp; &nbsp;//生成模板引擎并为模板引擎注入模板解析器<br> &nbsp; &nbsp;@Bean<br> &nbsp; &nbsp;public SpringTemplateEngine templateEngine(ITemplateResolver templateResolver) {<br> &nbsp; &nbsp; &nbsp; &nbsp;SpringTemplateEngine templateEngine = new SpringTemplateEngine();<br> &nbsp; &nbsp; &nbsp; &nbsp;templateEngine.setTemplateResolver(templateResolver);<br> &nbsp; &nbsp; &nbsp; &nbsp;return templateEngine;<br> &nbsp;  }<br>​<br> &nbsp; &nbsp;//生成视图解析器并未解析器注入模板引擎<br> &nbsp; &nbsp;@Bean<br> &nbsp; &nbsp;public ViewResolver viewResolver(SpringTemplateEngine templateEngine) {<br> &nbsp; &nbsp; &nbsp; &nbsp;ThymeleafViewResolver viewResolver = new ThymeleafViewResolver();<br> &nbsp; &nbsp; &nbsp; &nbsp;viewResolver.setCharacterEncoding("UTF-8");<br> &nbsp; &nbsp; &nbsp; &nbsp;viewResolver.setTemplateEngine(templateEngine);<br> &nbsp; &nbsp; &nbsp; &nbsp;return viewResolver;<br> &nbsp;  }<br>​<br>​<br>}</pre>
<!-- /wp:preformatted -->

<!-- wp:heading {"level":3} -->
<h3>4、测试功能</h3>
<!-- /wp:heading -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">@RequestMapping("/")<br>public String index(){<br> &nbsp; &nbsp;return "index";<br>}</pre>
<!-- /wp:preformatted -->

<!-- wp:heading -->
<h2>十三、SpringMVC执行流程</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3>1、SpringMVC常用组件</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>DispatcherServlet：<strong>前端控制器</strong>，不需要工程师开发，由框架提供</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>作用：统一处理请求和响应，整个流程控制的中心，由它调用其它组件处理用户的请求</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>HandlerMapping：<strong>处理器映射器</strong>，不需要工程师开发，由框架提供</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>作用：根据请求的url、method等信息查找Handler，即控制器方法</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Handler：<strong>处理器</strong>，需要工程师开发</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>作用：在DispatcherServlet的控制下Handler对具体的用户请求进行处理</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>HandlerAdapter：<strong>处理器适配器</strong>，不需要工程师开发，由框架提供</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>作用：通过HandlerAdapter对处理器（控制器方法）进行执行</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>ViewResolver：<strong>视图解析器</strong>，不需要工程师开发，由框架提供</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>作用：进行视图解析，得到相应的视图，例如：ThymeleafView、InternalResourceView、RedirectView</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>View：<strong>视图</strong></li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>作用：将模型数据通过页面展示给用户</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>2、DispatcherServlet初始化过程</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>DispatcherServlet 本质上是一个 Servlet，所以天然的遵循 Servlet 的生命周期。所以宏观上是 Servlet 生命周期来进行调度。</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":5} -->
<h5>a&gt;初始化WebApplicationContext</h5>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>所在类：org.springframework.web.servlet.FrameworkServlet</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">protected WebApplicationContext initWebApplicationContext() {<br> &nbsp; &nbsp;WebApplicationContext rootContext =<br> &nbsp; &nbsp; &nbsp; &nbsp;WebApplicationContextUtils.getWebApplicationContext(getServletContext());<br> &nbsp; &nbsp;WebApplicationContext wac = null;<br>​<br> &nbsp; &nbsp;if (this.webApplicationContext != null) {<br> &nbsp; &nbsp; &nbsp; &nbsp;// A context instance was injected at construction time -&gt; use it<br> &nbsp; &nbsp; &nbsp; &nbsp;wac = this.webApplicationContext;<br> &nbsp; &nbsp; &nbsp; &nbsp;if (wac instanceof ConfigurableWebApplicationContext) {<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ConfigurableWebApplicationContext cwac = (ConfigurableWebApplicationContext) wac;<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (!cwac.isActive()) {<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// The context has not yet been refreshed -&gt; provide services such as<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// setting the parent context, setting the application context id, etc<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (cwac.getParent() == null) {<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// The context instance was injected without an explicit parent -&gt; set<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// the root application context (if any; may be null) as the parent<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;cwac.setParent(rootContext);<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  }<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;configureAndRefreshWebApplicationContext(cwac);<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  }<br> &nbsp; &nbsp; &nbsp;  }<br> &nbsp;  }<br> &nbsp; &nbsp;if (wac == null) {<br> &nbsp; &nbsp; &nbsp; &nbsp;// No context instance was injected at construction time -&gt; see if one<br> &nbsp; &nbsp; &nbsp; &nbsp;// has been registered in the servlet context. If one exists, it is assumed<br> &nbsp; &nbsp; &nbsp; &nbsp;// that the parent context (if any) has already been set and that the<br> &nbsp; &nbsp; &nbsp; &nbsp;// user has performed any initialization such as setting the context id<br> &nbsp; &nbsp; &nbsp; &nbsp;wac = findWebApplicationContext();<br> &nbsp;  }<br> &nbsp; &nbsp;if (wac == null) {<br> &nbsp; &nbsp; &nbsp; &nbsp;// No context instance is defined for this servlet -&gt; create a local one<br> &nbsp; &nbsp; &nbsp; &nbsp;// 创建WebApplicationContext<br> &nbsp; &nbsp; &nbsp; &nbsp;wac = createWebApplicationContext(rootContext);<br> &nbsp;  }<br>​<br> &nbsp; &nbsp;if (!this.refreshEventReceived) {<br> &nbsp; &nbsp; &nbsp; &nbsp;// Either the context is not a ConfigurableApplicationContext with refresh<br> &nbsp; &nbsp; &nbsp; &nbsp;// support or the context injected at construction time had already been<br> &nbsp; &nbsp; &nbsp; &nbsp;// refreshed -&gt; trigger initial onRefresh manually here.<br> &nbsp; &nbsp; &nbsp; &nbsp;synchronized (this.onRefreshMonitor) {<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// 刷新WebApplicationContext<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;onRefresh(wac);<br> &nbsp; &nbsp; &nbsp;  }<br> &nbsp;  }<br>​<br> &nbsp; &nbsp;if (this.publishContext) {<br> &nbsp; &nbsp; &nbsp; &nbsp;// Publish the context as a servlet context attribute.<br> &nbsp; &nbsp; &nbsp; &nbsp;// 将IOC容器在应用域共享<br> &nbsp; &nbsp; &nbsp; &nbsp;String attrName = getServletContextAttributeName();<br> &nbsp; &nbsp; &nbsp; &nbsp;getServletContext().setAttribute(attrName, wac);<br> &nbsp;  }<br>​<br> &nbsp; &nbsp;return wac;<br>}</pre>
<!-- /wp:preformatted -->

<!-- wp:heading {"level":5} -->
<h5>b&gt;创建WebApplicationContext</h5>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>所在类：org.springframework.web.servlet.FrameworkServlet</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">protected WebApplicationContext createWebApplicationContext(@Nullable ApplicationContext parent) {<br> &nbsp; &nbsp;Class&lt;?&gt; contextClass = getContextClass();<br> &nbsp; &nbsp;if (!ConfigurableWebApplicationContext.class.isAssignableFrom(contextClass)) {<br> &nbsp; &nbsp; &nbsp; &nbsp;throw new ApplicationContextException(<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;"Fatal initialization error in servlet with name '" + getServletName() +<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;"': custom WebApplicationContext class [" + contextClass.getName() +<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;"] is not of type ConfigurableWebApplicationContext");<br> &nbsp;  }<br> &nbsp; &nbsp;// 通过反射创建 IOC 容器对象<br> &nbsp; &nbsp;ConfigurableWebApplicationContext wac =<br> &nbsp; &nbsp; &nbsp;  (ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass);<br>​<br> &nbsp; &nbsp;wac.setEnvironment(getEnvironment());<br> &nbsp; &nbsp;// 设置父容器<br> &nbsp; &nbsp;wac.setParent(parent);<br> &nbsp; &nbsp;String configLocation = getContextConfigLocation();<br> &nbsp; &nbsp;if (configLocation != null) {<br> &nbsp; &nbsp; &nbsp; &nbsp;wac.setConfigLocation(configLocation);<br> &nbsp;  }<br> &nbsp; &nbsp;configureAndRefreshWebApplicationContext(wac);<br>​<br> &nbsp; &nbsp;return wac;<br>}</pre>
<!-- /wp:preformatted -->

<!-- wp:heading {"level":5} -->
<h5>c&gt;DispatcherServlet初始化策略</h5>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>FrameworkServlet创建WebApplicationContext后，刷新容器，调用onRefresh(wac)，此方法在DispatcherServlet中进行了重写，调用了initStrategies(context)方法，初始化策略，即初始化DispatcherServlet的各个组件</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>所在类：org.springframework.web.servlet.DispatcherServlet</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">protected void initStrategies(ApplicationContext context) {<br> &nbsp; initMultipartResolver(context);<br> &nbsp; initLocaleResolver(context);<br> &nbsp; initThemeResolver(context);<br> &nbsp; initHandlerMappings(context);<br> &nbsp; initHandlerAdapters(context);<br> &nbsp; initHandlerExceptionResolvers(context);<br> &nbsp; initRequestToViewNameTranslator(context);<br> &nbsp; initViewResolvers(context);<br> &nbsp; initFlashMapManager(context);<br>}</pre>
<!-- /wp:preformatted -->

<!-- wp:heading {"level":3} -->
<h3>3、DispatcherServlet调用组件处理请求</h3>
<!-- /wp:heading -->

<!-- wp:heading {"level":5} -->
<h5>a&gt;processRequest()</h5>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>FrameworkServlet重写HttpServlet中的service()和doXxx()，这些方法中调用了processRequest(request, response)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>所在类：org.springframework.web.servlet.FrameworkServlet</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">protected final void processRequest(HttpServletRequest request, HttpServletResponse response)<br> &nbsp; &nbsp;throws ServletException, IOException {<br>​<br> &nbsp; &nbsp;long startTime = System.currentTimeMillis();<br> &nbsp; &nbsp;Throwable failureCause = null;<br>​<br> &nbsp; &nbsp;LocaleContext previousLocaleContext = LocaleContextHolder.getLocaleContext();<br> &nbsp; &nbsp;LocaleContext localeContext = buildLocaleContext(request);<br>​<br> &nbsp; &nbsp;RequestAttributes previousAttributes = RequestContextHolder.getRequestAttributes();<br> &nbsp; &nbsp;ServletRequestAttributes requestAttributes = buildRequestAttributes(request, response, previousAttributes);<br>​<br> &nbsp; &nbsp;WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);<br> &nbsp; &nbsp;asyncManager.registerCallableInterceptor(FrameworkServlet.class.getName(), new RequestBindingInterceptor());<br>​<br> &nbsp; &nbsp;initContextHolders(request, localeContext, requestAttributes);<br>​<br> &nbsp; &nbsp;try {<br>        // 执行服务，doService()是一个抽象方法，在DispatcherServlet中进行了重写<br> &nbsp; &nbsp; &nbsp; &nbsp;doService(request, response);<br> &nbsp;  }<br> &nbsp; &nbsp;catch (ServletException | IOException ex) {<br> &nbsp; &nbsp; &nbsp; &nbsp;failureCause = ex;<br> &nbsp; &nbsp; &nbsp; &nbsp;throw ex;<br> &nbsp;  }<br> &nbsp; &nbsp;catch (Throwable ex) {<br> &nbsp; &nbsp; &nbsp; &nbsp;failureCause = ex;<br> &nbsp; &nbsp; &nbsp; &nbsp;throw new NestedServletException("Request processing failed", ex);<br> &nbsp;  }<br>​<br> &nbsp; &nbsp;finally {<br> &nbsp; &nbsp; &nbsp; &nbsp;resetContextHolders(request, previousLocaleContext, previousAttributes);<br> &nbsp; &nbsp; &nbsp; &nbsp;if (requestAttributes != null) {<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;requestAttributes.requestCompleted();<br> &nbsp; &nbsp; &nbsp;  }<br> &nbsp; &nbsp; &nbsp; &nbsp;logResult(request, response, failureCause, asyncManager);<br> &nbsp; &nbsp; &nbsp; &nbsp;publishRequestHandledEvent(request, response, startTime, failureCause);<br> &nbsp;  }<br>}</pre>
<!-- /wp:preformatted -->

<!-- wp:heading {"level":5} -->
<h5>b&gt;doService()</h5>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>所在类：org.springframework.web.servlet.DispatcherServlet</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">@Override<br>protected void doService(HttpServletRequest request, HttpServletResponse response) throws Exception {<br> &nbsp; &nbsp;logRequest(request);<br>​<br> &nbsp; &nbsp;// Keep a snapshot of the request attributes in case of an include,<br> &nbsp; &nbsp;// to be able to restore the original attributes after the include.<br> &nbsp; &nbsp;Map&lt;String, Object&gt; attributesSnapshot = null;<br> &nbsp; &nbsp;if (WebUtils.isIncludeRequest(request)) {<br> &nbsp; &nbsp; &nbsp; &nbsp;attributesSnapshot = new HashMap&lt;&gt;();<br> &nbsp; &nbsp; &nbsp; &nbsp;Enumeration&lt;?&gt; attrNames = request.getAttributeNames();<br> &nbsp; &nbsp; &nbsp; &nbsp;while (attrNames.hasMoreElements()) {<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;String attrName = (String) attrNames.nextElement();<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (this.cleanupAfterInclude || attrName.startsWith(DEFAULT_STRATEGIES_PREFIX)) {<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;attributesSnapshot.put(attrName, request.getAttribute(attrName));<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  }<br> &nbsp; &nbsp; &nbsp;  }<br> &nbsp;  }<br>​<br> &nbsp; &nbsp;// Make framework objects available to handlers and view objects.<br> &nbsp; &nbsp;request.setAttribute(WEB_APPLICATION_CONTEXT_ATTRIBUTE, getWebApplicationContext());<br> &nbsp; &nbsp;request.setAttribute(LOCALE_RESOLVER_ATTRIBUTE, this.localeResolver);<br> &nbsp; &nbsp;request.setAttribute(THEME_RESOLVER_ATTRIBUTE, this.themeResolver);<br> &nbsp; &nbsp;request.setAttribute(THEME_SOURCE_ATTRIBUTE, getThemeSource());<br>​<br> &nbsp; &nbsp;if (this.flashMapManager != null) {<br> &nbsp; &nbsp; &nbsp; &nbsp;FlashMap inputFlashMap = this.flashMapManager.retrieveAndUpdate(request, response);<br> &nbsp; &nbsp; &nbsp; &nbsp;if (inputFlashMap != null) {<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;request.setAttribute(INPUT_FLASH_MAP_ATTRIBUTE, Collections.unmodifiableMap(inputFlashMap));<br> &nbsp; &nbsp; &nbsp;  }<br> &nbsp; &nbsp; &nbsp; &nbsp;request.setAttribute(OUTPUT_FLASH_MAP_ATTRIBUTE, new FlashMap());<br> &nbsp; &nbsp; &nbsp; &nbsp;request.setAttribute(FLASH_MAP_MANAGER_ATTRIBUTE, this.flashMapManager);<br> &nbsp;  }<br>​<br> &nbsp; &nbsp;RequestPath requestPath = null;<br> &nbsp; &nbsp;if (this.parseRequestPath &amp;&amp; !ServletRequestPathUtils.hasParsedRequestPath(request)) {<br> &nbsp; &nbsp; &nbsp; &nbsp;requestPath = ServletRequestPathUtils.parseAndCache(request);<br> &nbsp;  }<br>​<br> &nbsp; &nbsp;try {<br> &nbsp; &nbsp; &nbsp; &nbsp;// 处理请求和响应<br> &nbsp; &nbsp; &nbsp; &nbsp;doDispatch(request, response);<br> &nbsp;  }<br> &nbsp; &nbsp;finally {<br> &nbsp; &nbsp; &nbsp; &nbsp;if (!WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) {<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// Restore the original attribute snapshot, in case of an include.<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (attributesSnapshot != null) {<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;restoreAttributesAfterInclude(request, attributesSnapshot);<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  }<br> &nbsp; &nbsp; &nbsp;  }<br> &nbsp; &nbsp; &nbsp; &nbsp;if (requestPath != null) {<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ServletRequestPathUtils.clearParsedRequestPath(request);<br> &nbsp; &nbsp; &nbsp;  }<br> &nbsp;  }<br>}</pre>
<!-- /wp:preformatted -->

<!-- wp:heading {"level":5} -->
<h5>c&gt;doDispatch()</h5>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>所在类：org.springframework.web.servlet.DispatcherServlet</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">protected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception {<br> &nbsp; &nbsp;HttpServletRequest processedRequest = request;<br> &nbsp; &nbsp;HandlerExecutionChain mappedHandler = null;<br> &nbsp; &nbsp;boolean multipartRequestParsed = false;<br>​<br> &nbsp; &nbsp;WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);<br>​<br> &nbsp; &nbsp;try {<br> &nbsp; &nbsp; &nbsp; &nbsp;ModelAndView mv = null;<br> &nbsp; &nbsp; &nbsp; &nbsp;Exception dispatchException = null;<br>​<br> &nbsp; &nbsp; &nbsp; &nbsp;try {<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;processedRequest = checkMultipart(request);<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;multipartRequestParsed = (processedRequest != request);<br>​<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// Determine handler for the current request.<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;/*<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;      mappedHandler：调用链<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;包含handler、interceptorList、interceptorIndex<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;      handler：浏览器发送的请求所匹配的控制器方法<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;      interceptorList：处理控制器方法的所有拦截器集合<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;      interceptorIndex：拦截器索引，控制拦截器afterCompletion()的执行<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;*/<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;mappedHandler = getHandler(processedRequest);<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (mappedHandler == null) {<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;noHandlerFound(processedRequest, response);<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return;<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  }<br>​<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// Determine handler adapter for the current request.<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  // 通过控制器方法创建相应的处理器适配器，调用所对应的控制器方法<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());<br>​<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// Process last-modified header, if supported by the handler.<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;String method = request.getMethod();<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;boolean isGet = "GET".equals(method);<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (isGet || "HEAD".equals(method)) {<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;long lastModified = ha.getLastModified(request, mappedHandler.getHandler());<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (new ServletWebRequest(request, response).checkNotModified(lastModified) &amp;&amp; isGet) {<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return;<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  }<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  }<br>            <br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// 调用拦截器的preHandle()<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (!mappedHandler.applyPreHandle(processedRequest, response)) {<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return;<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  }<br>​<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// Actually invoke the handler.<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// 由处理器适配器调用具体的控制器方法，最终获得ModelAndView对象<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;mv = ha.handle(processedRequest, response, mappedHandler.getHandler());<br>​<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (asyncManager.isConcurrentHandlingStarted()) {<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return;<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  }<br>​<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;applyDefaultViewName(processedRequest, mv);<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// 调用拦截器的postHandle()<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;mappedHandler.applyPostHandle(processedRequest, response, mv);<br> &nbsp; &nbsp; &nbsp;  }<br> &nbsp; &nbsp; &nbsp; &nbsp;catch (Exception ex) {<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;dispatchException = ex;<br> &nbsp; &nbsp; &nbsp;  }<br> &nbsp; &nbsp; &nbsp; &nbsp;catch (Throwable err) {<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// As of 4.3, we're processing Errors thrown from handler methods as well,<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// making them available for @ExceptionHandler methods and other scenarios.<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;dispatchException = new NestedServletException("Handler dispatch failed", err);<br> &nbsp; &nbsp; &nbsp;  }<br> &nbsp; &nbsp; &nbsp; &nbsp;// 后续处理：处理模型数据和渲染视图<br> &nbsp; &nbsp; &nbsp; &nbsp;processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);<br> &nbsp;  }<br> &nbsp; &nbsp;catch (Exception ex) {<br> &nbsp; &nbsp; &nbsp; &nbsp;triggerAfterCompletion(processedRequest, response, mappedHandler, ex);<br> &nbsp;  }<br> &nbsp; &nbsp;catch (Throwable err) {<br> &nbsp; &nbsp; &nbsp; &nbsp;triggerAfterCompletion(processedRequest, response, mappedHandler,<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; new NestedServletException("Handler processing failed", err));<br> &nbsp;  }<br> &nbsp; &nbsp;finally {<br> &nbsp; &nbsp; &nbsp; &nbsp;if (asyncManager.isConcurrentHandlingStarted()) {<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// Instead of postHandle and afterCompletion<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (mappedHandler != null) {<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  }<br> &nbsp; &nbsp; &nbsp;  }<br> &nbsp; &nbsp; &nbsp; &nbsp;else {<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// Clean up any resources used by a multipart request.<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (multipartRequestParsed) {<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;cleanupMultipart(processedRequest);<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  }<br> &nbsp; &nbsp; &nbsp;  }<br> &nbsp;  }<br>}</pre>
<!-- /wp:preformatted -->

<!-- wp:heading {"level":5} -->
<h5>d&gt;processDispatchResult()</h5>
<!-- /wp:heading -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">private void processDispatchResult(HttpServletRequest request, HttpServletResponse response,<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; @Nullable HandlerExecutionChain mappedHandler, @Nullable ModelAndView mv,<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; @Nullable Exception exception) throws Exception {<br>​<br> &nbsp; &nbsp;boolean errorView = false;<br>​<br> &nbsp; &nbsp;if (exception != null) {<br> &nbsp; &nbsp; &nbsp; &nbsp;if (exception instanceof ModelAndViewDefiningException) {<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;logger.debug("ModelAndViewDefiningException encountered", exception);<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;mv = ((ModelAndViewDefiningException) exception).getModelAndView();<br> &nbsp; &nbsp; &nbsp;  }<br> &nbsp; &nbsp; &nbsp; &nbsp;else {<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Object handler = (mappedHandler != null ? mappedHandler.getHandler() : null);<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;mv = processHandlerException(request, response, handler, exception);<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;errorView = (mv != null);<br> &nbsp; &nbsp; &nbsp;  }<br> &nbsp;  }<br>​<br> &nbsp; &nbsp;// Did the handler return a view to render?<br> &nbsp; &nbsp;if (mv != null &amp;&amp; !mv.wasCleared()) {<br> &nbsp; &nbsp; &nbsp; &nbsp;// 处理模型数据和渲染视图<br> &nbsp; &nbsp; &nbsp; &nbsp;render(mv, request, response);<br> &nbsp; &nbsp; &nbsp; &nbsp;if (errorView) {<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;WebUtils.clearErrorRequestAttributes(request);<br> &nbsp; &nbsp; &nbsp;  }<br> &nbsp;  }<br> &nbsp; &nbsp;else {<br> &nbsp; &nbsp; &nbsp; &nbsp;if (logger.isTraceEnabled()) {<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;logger.trace("No view rendering, null ModelAndView returned.");<br> &nbsp; &nbsp; &nbsp;  }<br> &nbsp;  }<br>​<br> &nbsp; &nbsp;if (WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) {<br> &nbsp; &nbsp; &nbsp; &nbsp;// Concurrent handling started during a forward<br> &nbsp; &nbsp; &nbsp; &nbsp;return;<br> &nbsp;  }<br>​<br> &nbsp; &nbsp;if (mappedHandler != null) {<br> &nbsp; &nbsp; &nbsp; &nbsp;// Exception (if any) is already handled..<br> &nbsp; &nbsp; &nbsp; &nbsp;// 调用拦截器的afterCompletion()<br> &nbsp; &nbsp; &nbsp; &nbsp;mappedHandler.triggerAfterCompletion(request, response, null);<br> &nbsp;  }<br>}</pre>
<!-- /wp:preformatted -->

<!-- wp:heading {"level":3} -->
<h3>4、SpringMVC的执行流程</h3>
<!-- /wp:heading -->

<!-- wp:list {"ordered":true} -->
<ol><li>用户向服务器发送请求，请求被SpringMVC 前端控制器 DispatcherServlet捕获。</li><li>DispatcherServlet对请求URL进行解析，得到请求资源标识符（URI），判断请求URI对应的映射：</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>a) 不存在</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>i. 再判断是否配置了mvc:default-servlet-handler</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>ii. 如果没配置，则控制台报映射查找不到，客户端展示404错误</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>iii. 如果有配置，则访问目标资源（一般为静态资源，如：JS,CSS,HTML），找不到客户端也会展示404错误</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>b) 存在则执行下面的流程</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>根据该URI，调用HandlerMapping获得该Handler配置的所有相关的对象（包括Handler对象以及Handler对象对应的拦截器），最后以HandlerExecutionChain执行链对象的形式返回。</li><li>DispatcherServlet 根据获得的Handler，选择一个合适的HandlerAdapter。</li><li>如果成功获得HandlerAdapter，此时将开始执行拦截器的preHandler(…)方法【正向】</li><li>提取Request中的模型数据，填充Handler入参，开始执行Handler（Controller)方法，处理请求。在填充Handler的入参过程中，根据你的配置，Spring将帮你做一些额外的工作：</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>a) HttpMessageConveter： 将请求消息（如Json、xml等数据）转换成一个对象，将对象转换为指定的响应信息</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>b) 数据转换：对请求消息进行数据转换。如String转换成Integer、Double等</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>c) 数据格式化：对请求消息进行数据格式化。 如将字符串转换成格式化数字或格式化日期等</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>d) 数据验证： 验证数据的有效性（长度、格式等），验证结果存储到BindingResult或Error中</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Handler执行完成后，向DispatcherServlet 返回一个ModelAndView对象。</li><li>此时将开始执行拦截器的postHandle(...)方法【逆向】。</li><li>根据返回的ModelAndView（此时会判断是否存在异常：如果存在异常，则执行HandlerExceptionResolver进行异常处理）选择一个适合的ViewResolver进行视图解析，根据Model和View，来渲染视图。</li><li>渲染视图完毕执行拦截器的afterCompletion(…)方法【逆向】。</li><li>将渲染结果返回给客户端。</li></ol>
<!-- /wp:list -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>222</wp:post_id>
		<wp:post_date><![CDATA[2021-09-14 23:52:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-09-14 15:52:49]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[222]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="unity"><![CDATA[unity]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021-09-13]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Spring(三) AOP概述</title>
		<link>http://blog.liobio.cn/?p=232</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[liobio]]></dc:creator>
		<guid isPermaLink="false">http://blog.liobio.cn/?p=232</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>232</wp:post_id>
		<wp:post_date><![CDATA[2021-09-27 13:32:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="unity"><![CDATA[unity]]></category>
						</item>
					<item>
		<title>html</title>
		<link>http://blog.liobio.cn/index.php/2021/06/18/%e6%9c%aa%e5%91%bd%e5%90%8d%e5%8f%af%e9%87%8d%e7%94%a8%e5%8c%ba%e5%9d%97-2/</link>
		<pubDate>Fri, 18 Jun 2021 09:47:14 +0000</pubDate>
		<dc:creator><![CDATA[liobio]]></dc:creator>
		<guid isPermaLink="false">http://blog.liobio.cn/index.php/2021/06/18/%e6%9c%aa%e5%91%bd%e5%90%8d%e5%8f%af%e9%87%8d%e7%94%a8%e5%8c%ba%e5%9d%97-2/</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:html -->
[cc lang="html"]

[/cc]
<!-- /wp:html -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>104</wp:post_id>
		<wp:post_date><![CDATA[2021-06-18 17:47:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-06-18 09:47:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%9c%aa%e5%91%bd%e5%90%8d%e5%8f%af%e9%87%8d%e7%94%a8%e5%8c%ba%e5%9d%97-2]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[wp_block]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title>未命名可重用区块</title>
		<link>http://blog.liobio.cn/index.php/2021/06/29/%e6%9c%aa%e5%91%bd%e5%90%8d%e5%8f%af%e9%87%8d%e7%94%a8%e5%8c%ba%e5%9d%97/</link>
		<pubDate>Tue, 29 Jun 2021 01:51:35 +0000</pubDate>
		<dc:creator><![CDATA[liobio]]></dc:creator>
		<guid isPermaLink="false">http://blog.liobio.cn/index.php/2021/06/29/%e6%9c%aa%e5%91%bd%e5%90%8d%e5%8f%af%e9%87%8d%e7%94%a8%e5%8c%ba%e5%9d%97/</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:html -->
[cc lang='html']

[/cc]
<!-- /wp:html -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>139</wp:post_id>
		<wp:post_date><![CDATA[2021-06-29 09:51:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-06-29 01:51:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%9c%aa%e5%91%bd%e5%90%8d%e5%8f%af%e9%87%8d%e7%94%a8%e5%8c%ba%e5%9d%97]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[wp_block]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title>html总结（三）</title>
		<link>http://blog.liobio.cn/index.php/2021/07/04/html%e6%80%bb%e7%bb%93%ef%bc%88%e4%b8%89%ef%bc%89/</link>
		<pubDate>Sat, 03 Jul 2021 18:03:56 +0000</pubDate>
		<dc:creator><![CDATA[liobio]]></dc:creator>
		<guid isPermaLink="false">http://blog.liobio.cn/?p=185</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading {"textColor":"accent"} -->
<h2 class="has-accent-color has-text-color">HTML 表单和输入</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {"fontSize":"normal"} -->
<p class="has-normal-font-size">HTML 表单用于搜集不同类型的用户输入。</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4,"textColor":"accent"} -->
<h4 class="has-accent-color has-text-color">表单</h4>
<!-- /wp:heading -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">表单是一个包含表单元素的区域。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">表单元素是允许用户在表单中（比如：文本域、下拉列表、单选框、复选框等等）输入信息的元素。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">表单使用表单标签（&lt;form&gt;）定义。</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="html"]
<form>
  <input>
  <input>
</form>
[/cc]
<!-- /wp:html -->

<!-- wp:html -->
<form>
  <input>
  <input>
</form>
<!-- /wp:html -->

<!-- wp:heading {"level":4,"textColor":"accent"} -->
<h4 class="has-accent-color has-text-color">输入</h4>
<!-- /wp:heading -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">多数情况下被用到的表单标签是输入标签（&lt;input&gt;）。输入类型是由类型属性（type）定义的。大多数经常被用到的输入类型如下：</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":6,"textColor":"accent"} -->
<h6 class="has-accent-color has-text-color"><strong>文本域（Text Fields</strong>）</h6>
<!-- /wp:heading -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">当用户要在表单中键入字母、数字等内容时，就会用到文本域。</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="html"]
<form>
First name: 
<input type="text" name="firstname">
<br>
Last name: 
<input type="text" name="lastname">
</form>
[/cc]
<!-- /wp:html -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">浏览器显示如下： </p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<form>
First name: 
<input type="text" name="firstname">
<br>
Last name: 
<input type="text" name="lastname">
</form>
<!-- /wp:html -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">注意，表单本身并不可见。同时，在大多数浏览器中，文本域的缺省宽度是20个字符。</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":6,"textColor":"accent"} -->
<h6 class="has-accent-color has-text-color"> 密码域<strong>（ </strong>password <strong>TEXT FIELDS）</strong> </h6>
<!-- /wp:heading -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">当你在密码域中键入字符时，浏览器将使用项目符号来代替这些字符</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="html"]
<form>
用户：
<input type="text" name="user">
<br>
密码：
<input type="password" name="password">
</form>
[/cc]
<!-- /wp:html -->

<!-- wp:html -->
<form>
用户：
<input type="text" name="user">
<br>
密码：
<input type="password" name="password">
</form>
<!-- /wp:html -->

<!-- wp:heading {"level":6,"textColor":"accent"} -->
<h6 class="has-accent-color has-text-color">单选按钮（Radio Buttons）</h6>
<!-- /wp:heading -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">当用户从若干给定的的选择中选取其一时，就会用到单选框。</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="html"]
<form>
<input type="radio" name="sex" value="male"> Male
<input type="radio" name="sex" value="female"> Female
</form>
[/cc]
<!-- /wp:html -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">浏览器显示如下：</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<form>
<input type="radio" name="sex" value="male"> Male
<input type="radio" name="sex" value="female"> Female
</form>
<!-- /wp:html -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">注意，只能从中选取其一。</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":6,"textColor":"accent"} -->
<h6 class="has-accent-color has-text-color">复选框（Checkboxes）</h6>
<!-- /wp:heading -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">当用户需要从若干给定的选择中选取一个或若干选项时，就会用到复选框。</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="html"]
<form>
<input type="checkbox" name="bike">
I have a bike
<br>
<input type="checkbox" name="car">
I have a car
</form>
[/cc]
<!-- /wp:html -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">浏览器显示如下：  </p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<form>
<input type="checkbox" name="bike">
I have a bike
<br>
<input type="checkbox" name="car">
I have a car
</form>
<!-- /wp:html -->

<!-- wp:heading {"level":6,"textColor":"accent"} -->
<h6 class="has-accent-color has-text-color">下拉列表（select ）</h6>
<!-- /wp:heading -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size"> select 标签是下拉列表框</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">option 标签是下拉列表框中的选项 </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">selected="selected"设置默认选中</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="html"]
<select>
   <option>--请选择国籍--</option>
   <option selected="selected">中国</option>
   <option>美国</option>
   <option>日本</option>
</select>
[/cc]
<!-- /wp:html -->

<!-- wp:group -->
<div class="wp-block-group"><div class="wp-block-group__inner-container"><!-- wp:html -->
<select>
   <option>--请选择国籍--</option>
   <option selected="selected">中国</option>
   <option>美国</option>
   <option>日本</option>
</select>
<!-- /wp:html --></div></div>
<!-- /wp:group -->

<!-- wp:heading {"level":6,"textColor":"accent"} -->
<h6 class="has-accent-color has-text-color"> 提交按钮 </h6>
<!-- /wp:heading -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">&lt;input type="submit"&gt;&nbsp;定义用于向<em>表单处理程序</em>（form-handler）<em>提交</em>表单的按钮。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">表单处理程序通常是包含用来处理输入数据的脚本的服务器页面。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">表单处理程序在表单的&nbsp;action&nbsp;属性中指定</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">当用户单击确认按钮时，表单的内容会被传送到另一个文件。表单的动作属性定义了目的文件的文件名。由动作属性定义的这个文件通常会对接收到的输入数据进行相关的处理。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"textColor":"accent","fontSize":"normal"} -->
<p class="has-text-color has-normal-font-size has-accent-color">表单提交的时候，数据没有发送给服务器的三种情况：</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>表单项没有name属性值</li><li>表单项不在提交的form标签中</li><li>单选、复选（下拉列表中的option标签）都需要添加value属性，以便发送给服务器</li></ol>
<!-- /wp:list -->

<!-- wp:html -->
[cc lang="html"]
<form name="input" action="http://localhost:8080" method="get">
Username: 
<input type="text" name="user">
<input type="submit" value="Submit">
</form>
[/cc]
<!-- /wp:html -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">浏览器显示如下：</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<form name="input" action="http://localhost:8080" method="get">
Username: 
<input type="text" name="user">
<input type="submit" value="Submit">
</form>
<!-- /wp:html -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">假如你再上面的文本框内键入几个字母，并且点击确认按钮，那么输入数据会被传送到名为"local host "的页面。那一页将显示出输入的结果。但是这样安全性不高</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4,"textColor":"accent"} -->
<h4 class="has-accent-color has-text-color">Action 属性</h4>
<!-- /wp:heading -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">action 属性定义在提交表单时执行的动作。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">向服务器提交表单的通常做法是使用提交按钮。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">通常，表单会被提交到 web 服务器上的网页。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">在上面的例子中，指定了某个服务器脚本来处理被提交表单</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">如果省略 action 属性，则 action 会被设置为当前页面。</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4,"textColor":"accent"} -->
<h4 class="has-accent-color has-text-color">Method 属性</h4>
<!-- /wp:heading -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">method 属性规定在提交表单时所用的 HTTP 方法（GET&nbsp;或&nbsp;POST），默认方法 是GET</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="html"]
<form action="http://localhost:8080" method="GET">
[/cc]
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>或：</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="html"]
<form action=http://localhost:8080" method="POST">
[/cc]
<!-- /wp:html -->

<!-- wp:paragraph -->
<p> GET请求的特点是： </p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>表单数据在页面地址栏中是可见的 </li><li>浏览器地址栏中的地址是：action属性[+?+请求参数]          </li><li>请求参数的格式是：name=value&amp;name=value      </li><li>不安全 </li><li>它有数据长度的限制 </li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>POST请求的特点是:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>浏览器地址栏中只有action属性值</li><li>理论上没有数据长度的限制</li><li> POST 的安全性更加，因为在页面地址栏中被提交的数据是不可见的 </li></ol>
<!-- /wp:list -->

<!-- wp:paragraph {"align":"left"} -->
<p class="has-text-align-left">提交表单示例代码：</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="html"]
<form action="http://localhost:8080" method="post">
        <input type="hidden" name="action" value="login" />
        <h1 class="has-text-align-center">用户注册</h1>
        <table >
            <tr>
                <td > 用户名称：</td>
                <td >
                    <input type="text" name="username" value="默认值"/>
                </td>
            </tr>
            <tr>
                <td > 用户密码：</td>
                <td ><input type="password" name="password" value="abc"/></td>
            </tr>
             <tr>
                <td >性别：</td>
                <td >
                    <input type="radio" name="sex" value="boy"/>男
                    <input type="radio" name="sex" checked="checked" value="girl" />女
                </td>
            </tr>
             <tr>
                <td > 兴趣爱好：</td>
                <td >
                    <input name="hobby" type="checkbox" checked="checked" value="java"/>Java
                    <input name="hobby" type="checkbox" value="js"/>JavaScript
                    <input name="hobby" type="checkbox" value="cpp"/>C++
                </td>
            </tr>
             <tr>
                <td >国籍：</td>
                <td >
                    <select name="country">
                        <option value="none">--请选择国籍--</option>
                        <option value="cn" selected="selected">中国</option>
                        <option value="usa">美国</option>
                        <option value="jp">日本</option>
                    </select>
                </td >
            </tr>
             <tr>
                <td>自我评价：</td>
                <td ><textarea name="desc" rows="10" cols="20">默认值</textarea></td>
            </tr>
             <tr>
                <td ><input type="reset" /></td>
                <td ><input type="submit"/></td>
            </tr>
        </table>
    </form>
[/cc]
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>演示如下：</p>
<!-- /wp:paragraph -->

<!-- wp:group -->
<div class="wp-block-group"><div class="wp-block-group__inner-container"><!-- wp:html -->
<form action="http://localhost:8080" method="post">
        <input type="hidden" name="action" value="login" />
        <h1 class="has-text-align-center">用户注册</h1>
        <table class="">
            <tr>
                <td class="has-text-align-center" data-align="center"> 用户名称：</td>
                <td class="has-text-align-center" data-align="center">
                    <input type="text" name="username" value="默认值"/>
                </td>
            </tr>
            <tr>
                <td class="has-text-align-center" data-align="center"> 用户密码：</td>
                <td class="has-text-align-center" data-align="center"><input type="password" name="password" value="abc"/></td>
            </tr>
             <tr>
                <td class="has-text-align-center" data-align="center">性别：</td>
                <td class="has-text-align-center" data-align="center">
                    <input type="radio" name="sex" value="boy"/>男
                    <input type="radio" name="sex" checked="checked" value="girl" />女
                </td>
            </tr>
             <tr>
                <td class="has-text-align-center" data-align="center"> 兴趣爱好：</td>
                <td class="has-text-align-center" data-align="center">
                    <input name="hobby" type="checkbox" checked="checked" value="java"/>Java
                    <input name="hobby" type="checkbox" value="js"/>JavaScript
                    <input name="hobby" type="checkbox" value="cpp"/>C++
                </td>
            </tr>
             <tr>
                <td class="has-text-align-center" data-align="center">国籍：</td>
                <td class="has-text-align-center" data-align="center">
                    <select name="country">
                        <option value="none">--请选择国籍--</option>
                        <option value="cn" selected="selected">中国</option>
                        <option value="usa">美国</option>
                        <option value="jp">日本</option>
                    </select>
                </td class="has-text-align-center" data-align="center">
            </tr>
             <tr>
                <td>自我评价：</td>
                <td class="has-text-align-center" data-align="center"><textarea name="desc" rows="10" cols="20">默认值</textarea></td>
            </tr>
             <tr>
                <td class="has-text-align-center" data-align="center"><input type="reset" /></td>
                <td class="has-text-align-center" data-align="center"><input type="submit"/></td>
            </tr>
        </table>
    </form>
<!-- /wp:html --></div></div>
<!-- /wp:group -->

<!-- wp:paragraph -->
<p>因为是post提交，页面地址栏中被提交的数据是不可见的  </p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4,"textColor":"accent"} -->
<h4 class="has-accent-color has-text-color">表单标签</h4>
<!-- /wp:heading -->

<!-- wp:table -->
<figure class="wp-block-table"><table class=""><tbody><tr><th>标签</th><th>描述</th></tr><tr><td>&lt;form&gt;</td><td>定义供用户输入的表单</td></tr><tr><td>&lt;input&gt;</td><td>定义输入域</td></tr><tr><td>&lt;textarea&gt;</td><td>定义文本域 (一个多行的输入控件)</td></tr><tr><td>&lt;label&gt;</td><td>定义一个控制的标签</td></tr><tr><td>&lt;fieldset&gt;</td><td>定义域</td></tr><tr><td>&lt;legend&gt;</td><td>定义域的标题</td></tr><tr><td>&lt;select&gt;</td><td>定义一个选择列表</td></tr><tr><td>&lt;optgroup&gt;</td><td>定义选项组</td></tr><tr><td>&lt;option&gt;</td><td>定义下拉列表中的选项</td></tr><tr><td>&lt;button&gt;</td><td>定义一个按钮</td></tr></tbody></table></figure>
<!-- /wp:table -->

<p><!--EndFragment--></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[学习如何使用 HTML 来创建站点。]]></excerpt:encoded>
		<wp:post_id>185</wp:post_id>
		<wp:post_date><![CDATA[2021-07-04 02:03:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-07-03 18:03:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[html%e6%80%bb%e7%bb%93%ef%bc%88%e4%b8%89%ef%bc%89]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="javaweb"><![CDATA[Javaweb]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[236]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Spring(一) 概述</title>
		<link>http://blog.liobio.cn/index.php/2021/07/23/spring%ef%bc%88%e4%b8%80%ef%bc%89/</link>
		<pubDate>Fri, 23 Jul 2021 09:38:59 +0000</pubDate>
		<dc:creator><![CDATA[liobio]]></dc:creator>
		<guid isPermaLink="false">http://blog.liobio.cn/?p=202</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading {"textColor":"accent"} -->
<h2 class="has-accent-color has-text-color">1、Spring概述</h2>
<!-- /wp:heading -->

<!-- wp:list {"ordered":true} -->
<ol><li> Spring是一个开源框架 </li><li> Spring为简化企业级开发而生，使用Spring，JavaBean就可以实现很多以前要靠EJB才能实现的功能。同样的功能，在EJB中要通过繁琐的配置和复杂的代码才能够实现，而在Spring中却非常的优雅和简洁。 </li><li> Spring是一个IOC(DI)和AOP容器框架。 </li><li> Spring的优良特性<ol><li>  非侵入式：基于Spring开发的应用中的对象可以不依赖于Spring的API </li><li> 依赖注入：DI——Dependency Injection，反转控制(IOC)最经典的实现。 </li><li> 面向切面编程：Aspect Oriented Programming——AOP </li><li> 容器：Spring是一个容器，因为它包含并且管理应用对象的生命周期 </li><li> 组件化：Spring实现了使用简单的组件配置组合成一个复杂的应用。在 Spring 中可以使用XML和Java注解组合这些对象。 </li><li> 一站式：在IOC和AOP的基础上可以整合各种企业应用的开源框架和优秀的第三方类库（实际上Spring 自身也提供了表述层的SpringMVC和持久层的Spring JDBC）。 </li></ol></li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>容器（可以管理所有的组件（类））框架；</p>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://img-blog.csdnimg.cn/20201204221435775.png" alt=""/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>核心关注：IOC和AOP；</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Spring（IOC和AOP）</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>3个一组：source是源码包、jar是炸包（发音）、javadoc是文档包</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"textColor":"accent"} -->
<h2 class="has-accent-color has-text-color">2、Spring的模块划分图 </h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Spring的模块划分图：</p>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://img-blog.csdnimg.cn/20201204221443317.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMjg0NDY5,size_16,color_FFFFFF,t_70" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-7FGm7EhN-1607091258077)(C:\Users\PePe\AppData\Roaming\Typora\typora-user-images\image-20201204193602475.png)]"/></figure>
<!-- /wp:image -->

<!-- wp:heading {"textColor":"accent"} -->
<h2 class="has-accent-color has-text-color">3、IOC 和 DI</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":5,"textColor":"accent"} -->
<h5 class="has-accent-color has-text-color"> IOC(Inversion(反转) Of Contol)：控制反转 </h5>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>控制：资源的获取方式</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size">    主动式：（每次要什么资源，就直接创建即可）</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="html"]
BookServlet{
	BookService bs = new BookService();
    AirPlane ap = new AirPlane();//复杂对象的创建是比较庞大的工程；
}
[/cc]
<!-- /wp:html -->

<!-- wp:paragraph {"textColor":"primary","fontSize":"small"} -->
<p class="has-text-color has-small-font-size has-primary-color">    被动式：资源的获取，不是我们自己创建，而是交给一个容器来创建和设置;</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="html"]
BookServlet{
	BookService bs;
	public void test1(){
        bs.checkout();//      
    }   
}
[/cc]
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>容器：管理所有的组件（有功能的类）；假设，BookServlet受容器管理，BookService也受容器管理；</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>容器可以自动的探查出哪些组件（类）需要用到另一些组件（类）；容器帮我们创建BookService对象，并把BookService对象赋值过去。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>从之前的主动的new资源变为被动的接受资源；</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>(容器）婚介所；从主动获取资源到被动接受</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>从之前的主动的new资源变为被动的接受资源；</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":5,"textColor":"accent"} -->
<h5 class="has-accent-color has-text-color">DI(Dependency Injection)：依赖注入</h5>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>如果IOC是一种思想，那DI就是一种思想实现的一种描述;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>容器能知道哪个组件（类）运行时，需要另一个组件(类)；</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>上列中，容器通过反射的形式，将容器中准备好的BookService对象注入（利用反射给属性赋值）到BookServlet中</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>只要是容器管理的组件（类），都能使用容器提供的强大功能；</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[Spring概述、IOC与DI -Spring]]></excerpt:encoded>
		<wp:post_id>202</wp:post_id>
		<wp:post_date><![CDATA[2021-07-23 17:38:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-07-23 09:38:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[spring%ef%bc%88%e4%b8%80%ef%bc%89]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="spring"><![CDATA[Spring]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[182]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>code</title>
		<link>http://blog.liobio.cn/index.php/2021/09/03/%e6%9c%aa%e5%91%bd%e5%90%8d%e5%8f%af%e9%87%8d%e7%94%a8%e5%8c%ba%e5%9d%97-3/</link>
		<pubDate>Fri, 03 Sep 2021 06:17:07 +0000</pubDate>
		<dc:creator><![CDATA[liobio]]></dc:creator>
		<guid isPermaLink="false">http://blog.liobio.cn/index.php/2021/09/03/%e6%9c%aa%e5%91%bd%e5%90%8d%e5%8f%af%e9%87%8d%e7%94%a8%e5%8c%ba%e5%9d%97-3/</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:html -->
[cc lang="xm"]


[/
<!-- /wp:html -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>218</wp:post_id>
		<wp:post_date><![CDATA[2021-09-03 14:17:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-09-03 06:17:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%9c%aa%e5%91%bd%e5%90%8d%e5%8f%af%e9%87%8d%e7%94%a8%e5%8c%ba%e5%9d%97-3]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[wp_block]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title>123</title>
		<link>http://blog.liobio.cn/index.php/2021/09/16/%e6%9c%aa%e5%91%bd%e5%90%8d%e5%8f%af%e9%87%8d%e7%94%a8%e5%8c%ba%e5%9d%97-4/</link>
		<pubDate>Thu, 16 Sep 2021 07:04:50 +0000</pubDate>
		<dc:creator><![CDATA[liobio]]></dc:creator>
		<guid isPermaLink="false">http://blog.liobio.cn/index.php/2021/09/16/%e6%9c%aa%e5%91%bd%e5%90%8d%e5%8f%af%e9%87%8d%e7%94%a8%e5%8c%ba%e5%9d%97-4/</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:group {"align":"wide"} -->
<div class="wp-block-group alignwide"><div class="wp-block-group__inner-container"><!-- wp:heading {"level":5,"textColor":"accent"} -->
<h5 class="has-accent-color has-text-color"></h5>
<!-- /wp:heading -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size"></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p> ioc.xml 配置   </p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="xml"]

[/cc]
<!-- /wp:html -->

<!-- wp:paragraph -->
<p> 运行测试test    </p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="java"]

[/cc]
<!-- /wp:html --></div></div>
<!-- /wp:group -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>236</wp:post_id>
		<wp:post_date><![CDATA[2021-09-16 15:04:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-09-16 07:04:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%9c%aa%e5%91%bd%e5%90%8d%e5%8f%af%e9%87%8d%e7%94%a8%e5%8c%ba%e5%9d%97-4]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[wp_block]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title>Java集合面试题</title>
		<link>http://blog.liobio.cn/index.php/2021/10/22/java%e9%9b%86%e5%90%88%e9%9d%a2%e8%af%95%e9%a2%98/</link>
		<pubDate>Thu, 21 Oct 2021 18:08:19 +0000</pubDate>
		<dc:creator><![CDATA[liobio]]></dc:creator>
		<guid isPermaLink="false">http://blog.liobio.cn/?p=245</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading {"level":5,"textColor":"accent"} -->
<h5 class="has-accent-color has-text-color">1.Arraylist与LinkedList区别</h5>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>ArrayList是数组的数据结构，LinkedList是链表的数据结构。</li><li>随机访问的时候，ArrayList的效率比较高，因为LinkedList要移动指针，而ArrayList是基于索引(index)的数据结构，可以直接映射到。</li><li>插入、删除数据时，LinkedList的效率比较高，因为ArrayList要移动数据。</li><li>LinkedList比ArrayList开销更大，因为LinkedList的节点除了存储数据，还需要存储引用</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":5,"textColor":"accent"} -->
<h5 class="has-accent-color has-text-color">2.Collections.sort和Arrays.sort的实现原理</h5>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Collection.sort是对list进行排序，Arrays.sort是对数组进行排序。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Collections.sort底层实现</strong></p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Collections.sort方法调用了list.sort方法</li><li>list.sort方法调用了Arrays.sort的方法</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>因此，Collections.sort方法底层就是调用的Array.sort方法</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Arrays.sort底层实现</strong></p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>legacyMergeSort(a)，归并排序</li><li>ComparableTimSort.sort()：即Timsort排序。</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p><strong>Timesort排序</strong></p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Timsort排序是结合了合并排序（merge.sort）和插入排序（insertion sort）而得出的排序方法；</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":5,"textColor":"accent"} -->
<h5 class="has-accent-color has-text-color">3.HashMap</h5>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>HashMap是以键值对存储数据的集合容器</li><li>HashMap是非线性安全的。</li><li>HashMap底层数据结构：数组+(链表、红黑树)，jdk8之前是用数组+链表的方式实现，jdk8引进了红黑树</li><li>HashMap数组的默认初始长度是16，key和value都允许null的存在</li><li>HashMap的内部实现数组是Node[]数组，上面存放的是key-value键值对的节点。HashMap通过put和get方法存储和获取。</li><li>HashMap的put方法，首先计算key的hashcode值，定位到对应的数组索引，然后再在该索引的单向链表上进行循环遍历，用equals比较key是否存在，如果存在则用新的value覆盖原值，如果没有则向后追加。</li><li>jdk8中put方法：先判断HashMap是否为空，为空就扩容，不为空计算出key的hash值i，然后看table[i]是否为空，为空就直接插入，不为空判断当前位置的key和table[i]是否相同，相同就覆盖，不相同就查看table[i]是否是红黑树节点，如果是的话就用红黑树直接插入键值对，如果不是开始遍历链表插入，如果遇到重复值就覆盖，否则直接插入，如果链表长度大于8，转为红黑树结构，执行完成后看size是否大于阈值threshold，大于就扩容，否则直接结束。</li><li>HashMap解决hash冲突，使用的是链地址法，即数组+链表的形式来解决。put执行首先判断table[i]位置，如果为空就直接插入，不为空判断和当前值是否相等，相等就覆盖，如果不相等的话，判断是否是红黑树节点，如果不是，就从table[i]位置开始遍历链表，相等覆盖，不相等插入。</li><li>HashMap的get方法就是计算出要获取元素的hash值，去对应位置获取即可。</li><li>HashMap的扩容机制，HashMap的扩容中主要进行两步，第一步把数组长度变为原来的两倍，第二步把旧数组的元素重新计算hash插入到新数组中，jdk8时，不用重新计算hash，只用看看原来的hash值新增的一位是零还是1，如果是1这个元素在新数组中的位置，是原数组的位置加原数组长度，如果是零就插入到原数组中。扩容过程第二步一个非常重要的方法是transfer方法，采用头插法，把旧数组的元素插入到新数组中。</li><li>HashMap大小为什么是2的幂次方？效率高+空间分布均匀List 和 Set，Map 的区别</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":5,"textColor":"accent"} -->
<h5 class="has-accent-color has-text-color">4.List 和 Set，Map 的区别</h5>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>List 以索引来存取元素，有序的，元素是允许重复的，可以插入多个null。</li><li>Set 不能存放重复元素，无序的，只允许一个null</li><li>Map 保存键值对映射，映射关系可以一对一、多对一</li><li>List 有基于数组、链表实现两种方式</li><li>Set、Map 容器有基于哈希存储和红黑树两种方式实现</li><li>Set 基于 Map 实现，Set 里的元素值就是 Map的键值</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":5,"textColor":"accent"} -->
<h5 class="has-accent-color has-text-color">5.poll()方法和 remove()方法的区别？</h5>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Queue队列中，poll() 和 remove() 都是从队列中取出一个元素，在队列元素为空的情况下，remove() 方法会抛出异常，poll() 方法只会返回 null </p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":5,"textColor":"accent"} -->
<h5 class="has-accent-color has-text-color">6.HashMap，HashTable，ConcurrentHash的共同点和区别</h5>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><strong>HashMap</strong></p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>底层由链表+数组+红黑树实现</li><li>可以存储null键和null值</li><li>线性不安全</li><li>初始容量为16，扩容每次都是2的n次幂</li><li>加载因子为0.75，当Map中元素总数超过Entry数组的0.75，触发扩容操作.</li><li>并发情况下，HashMap进行put操作会引起死循环，导致CPU利用率接近100%</li><li>HashMap是对Map接口的实现</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p><strong>HashTable</strong></p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>HashTable的底层也是由链表+数组+红黑树实现。</li><li>无论key还是value都不能为null</li><li>它是线性安全的，使用了synchronized关键字。</li><li>HashTable实现了Map接口和Dictionary抽象类</li><li>Hashtable初始容量为11</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p><strong>ConcurrentHashMap</strong></p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>ConcurrentHashMap的底层是数组+链表+红黑树</li><li>不能存储null键和值</li><li>ConcurrentHashMap是线程安全的</li><li>ConcurrentHashMap使用锁分段技术确保线性安全</li><li>JDK8为何又放弃分段锁，是因为多个分段锁浪费内存空间，竞争同一个锁的概率非常小，分段锁反而会造成效率低。</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":5,"textColor":"accent"} -->
<h5 class="has-accent-color has-text-color">8.Java中怎么打印数组？</h5>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>数组是不能直接打印的</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="java"]
 public class Test {
 ​
     public static void main(String[] args) {
         String[] jayArray = {"jay", "boy"};
         System.out.println(jayArray);
     }
 }
 //output
 [Ljava.lang.String;@1540e19d
[/cc]
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>打印数组可以用流的方式Strem.of().foreach()，如下:</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="java"]
 public class Test {
 ​
     public static void main(String[] args) {
         String[] jayArray = {"jay", "boy"};
         Stream.of(jayArray).forEach(System.out::println);
     }
 }
 //output
 jay
 boy
[/cc]
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>打印数组，最优雅的方式可以用这个APi,Arrays.toString()</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="java"]
 public class Test {
     public static void main(String[] args) {
         String[] jayArray = {"jay", "boy"};
         System.out.println(Arrays.toString(jayArray));
     }
 }
 //output
 [jay, boy]
[/cc]
<!-- /wp:html -->

<!-- wp:heading {"level":5,"textColor":"accent"} -->
<h5 class="has-accent-color has-text-color">9.TreeMap底层</h5>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>TreeMap实现了SotredMap接口，它是有序的集合。</li><li>TreeMap底层数据结构是一个红黑树，每个key-value都作为一个红黑树的节点。</li><li>如果在调用TreeMap的构造函数时没有指定比较器，则根据key执行自然排序。</li></ul>
<!-- /wp:list -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://img-blog.csdnimg.cn/20210522153542360.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"/></figure>
<!-- /wp:image -->

<!-- wp:heading {"level":5,"textColor":"accent"} -->
<h5 class="has-accent-color has-text-color">10.HashMap 的扩容过程</h5>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>第一步把数组长度变为原来的两倍</li><li>第二步把旧数组的元素重新计算hash插入到新数组中。</li><li>jdk8时，不用重新计算hash，只用看看原来的hash值新增的一位是零还是1，如果是1这个元素在新数组中的位置，是原数组的位置加原数组长度，如果是零就插入到原数组中。扩容过程第二步一个非常重要的方法是transfer方法，采用头插法，把旧数组的元素插入到新数组中。</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":5,"textColor":"accent"} -->
<h5 class="has-accent-color has-text-color">11.HashSet是如何保证不重复的</h5>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>可以看一下HashSet的add方法，元素E作为HashMap的key</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>我们都知道HashMap是不允许重复的</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="java"]
 public boolean add(E e) {
     return map.put(e, PRESENT)==null;
 }
[/cc]
<!-- /wp:html -->

<!-- wp:heading {"level":5,"textColor":"accent"} -->
<h5 class="has-accent-color has-text-color">12.HashMap 是线程安全的吗，为什么不是线程安全的？死循环问题？</h5>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>不是线性安全的。
并发的情况下，扩容可能导致死循环问题。</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":5,"textColor":"accent"} -->
<h5 class="has-accent-color has-text-color">13.LinkedHashMap的应用，底层，原理</h5>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>LinkedHashMap维护着一个运行于所有条目的双重链接列表。此链接列表定义了迭代顺序，该迭代顺序可以是插入顺序（insert-order）或者是访问顺序，其中默认的迭代访问顺序就是插入顺序，即可以按插入的顺序遍历元素，这点和HashMap有很大的不同。</li><li>LRU算法可以用LinkedHashMap实现</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":5,"textColor":"accent"} -->
<h5 class="has-accent-color has-text-color">14.哪些集合类是线程安全的？哪些不安全？</h5>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>线性安全的</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Vector：比Arraylist多了个同步化机制。</li><li>Hashtable：比Hashmap多了个线程安全。</li><li>ConcurrentHashMap:是一种高效但是线程安全的集合。</li><li>Stack：栈，也是线程安全的，继承于Vector。</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>线性不安全的</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Hashmap</li><li>TreeMap</li><li>Arraylist</li><li>LinkedList</li><li>HashSet</li><li>TreeSet</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":5,"textColor":"accent"} -->
<h5 class="has-accent-color has-text-color">15.ArrayList 和 Vector 的区别是什么？	</h5>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Vector是线程安全的，ArrayList不是线程安全的。</li><li>ArrayList在底层数组不够用时在原来的基础上扩展0.5倍，Vector是扩展1倍。</li><li>Vector只要是关键性的操作，方法前面都加了synchronized关键字，来保证线程的安全性。</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":5,"textColor":"accent"} -->
<h5 class="has-accent-color has-text-color">16.Collection与Collections的区别是什么？</h5>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Collection是Java集合框架中的基本接口，如List接口也是继承于它</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="java"]
 public interface List<E> extends Collection<E>
[/cc]
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>Collections是Java集合框架提供的一个工具类，其中包含了大量用于操作或返回集合的静态方法。如下</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="java"]
 public static <T extends Comparable<? super T>> void sort(List<T> list) {
     list.sort(null);
 }
[/cc]
<!-- /wp:html -->

<!-- wp:heading {"level":5,"textColor":"accent"} -->
<h5 class="has-accent-color has-text-color">17.如何决定使用 HashMap 还是TreeMap？</h5>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>TreeMap实现SortMap接口，能够把它保存的记录根据键排序，默认是按key的升序排序，也可以指定排序的比较器。当用Iterator遍历TreeMap时，得到的记录是排过序的。</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>对于在 Map 中插入、删除、定位一个元素这类操作，选HashMap</li><li>要对一个 key 集合进行有序的遍历，选TreeMap</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":5,"textColor":"accent"} -->
<h5 class="has-accent-color has-text-color">18.如何实现数组和 List之间的转换？</h5>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><strong>List 转 Array</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>List 转Array，必须使用集合的 toArray(T[] array)，如下：</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="java"]
 List<String> list = new ArrayList<String>();
 list.add("jay");
 list.add("tianluo");
 ​
 // 使用泛型，无需显式类型转换
 String[] array = list.toArray(new String[list.size()]);
 System.out.println(array[0]);
[/cc]
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>如果直接使用 toArray 无参方法，返回值只能是 Object[] 类，强转其他类型可能有问题</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="java"]
 List<String> list = new ArrayList<String>();
 list.add("jay");
 list.add("tianluo");
 ​
 String[] array = (String[]) list.toArray();
 System.out.println(array[0]);
 ​
[/cc]
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>运行结果：</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="java"]
 Exception in thread "main" java.lang.ClassCastException: [Ljava.lang.Object; cannot be cast to [Ljava.lang.String;
     at Test.main(Test.java:14)
[/cc]
<!-- /wp:html -->

<!-- wp:paragraph -->
<p><strong>Array 转List</strong> 使用Arrays.asList() 把数组转换成集合时，不能使用修改集合相关的方法，如下：</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="java"]
 String[] str = new String[] { "jay", "tianluo" };
 List list = Arrays.asList(str);
 list.add("boy");
 ​
 /*Exception in thread "main" java.lang.UnsupportedOperationException
     at java.util.AbstractList.add(AbstractList.java:148)
     at java.util.AbstractList.add(AbstractList.java:108)
     at Test.main(Test.java:13)
 */
[/cc]
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>因为 Arrays.asList不是返回java.util.ArrayList,而是一个内部类ArrayList</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>可以这样使用弥补这个缺点：</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="java"]
 //方式一：
 ArrayList< String> arrayList = new ArrayList<String>(strArray.length);
 Collections.addAll(arrayList, strArray);
 //方式二：
 ArrayList<String> list = new ArrayList<String>(Arrays.asList(strArray)) ;
[/cc]
<!-- /wp:html -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":5,"textColor":"accent"} -->
<h5 class="has-accent-color has-text-color">19.迭代器 Iterator 是什么？怎么用，有什么特点？</h5>
<!-- /wp:heading -->

<!-- wp:html -->
[cc lang="java"]
 public interface Collection<E> extends Iterable<E> {
 ​
 Iterator<E> iterator();
[/cc]
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>方法如下：</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="java"]
 next() 方法获得集合中的下一个元素
 hasNext() 检查集合中是否还有元素
 remove() 方法将迭代器新返回的元素删除
 forEachRemaining(Consumer<? super E> action) 方法，遍历所有元素
[/cc]
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>terator 主要是用来遍历集合用的，它的特点是更加安全，因为它可以确保，在当前遍历的集合元素被更改的时候，就会抛出 <strong>ConcurrentModificationException</strong> 异常</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="java"]
 List<String> list = new ArrayList<>();
 Iterator<String> it = list. iterator();
 while(it. hasNext()){
   String obj = it. next();
   System. out. println(obj);
 }
[/cc]
<!-- /wp:html -->

<!-- wp:heading {"level":5,"textColor":"accent"} -->
<h5 class="has-accent-color has-text-color">20.Iterator 和 ListIterator 有什么区别？</h5>
<!-- /wp:heading -->

<!-- wp:image {"id":247,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="http://blog.liobio.cn/wp-content/uploads/2021/10/image.png" alt="" class="wp-image-247"/></figure>
<!-- /wp:image -->

<!-- wp:image {"id":248,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="http://blog.liobio.cn/wp-content/uploads/2021/10/image-1.png" alt="" class="wp-image-248"/></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>ListIterator 比 Iterator有更多的方法。</li><li>ListIterator只能用于遍历List及其子类，Iterator可用来遍历所有集合，</li><li>ListIterator遍历可以是逆向的，因为有previous()和hasPrevious()方法，而Iterator不可以。</li><li>ListIterator有add()方法，可以向List添加对象，而Iterator却不能。</li><li>ListIterator可以定位当前的索引位置，因为有nextIndex()和previousIndex()方法，而Iterator不可以。</li><li>ListIterator可以实现对象的修改，set()方法可以实现。Iierator仅能遍历，不能修改。</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":5,"textColor":"accent"} -->
<h5 class="has-accent-color has-text-color">21.怎么确保一个集合不能被修改？</h5>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>unmodifiableMap</li><li>unmodifiableList</li><li>unmodifiableSet</li></ul>
<!-- /wp:list -->

<!-- wp:html -->
[cc lang="java"]
public class Test {
 ​
     private static  Map<Integer, String> map = new HashMap<Integer, String>();
     {
         map.put(1, "jay");
         map.put(2, "tianluo");
 ​
     }
 ​
     public static void main(String[] args) {
         map = Collections.unmodifiableMap(map);
         map.put(1, "boy");
         System.out.println(map.get(1));
     }
 }
[/cc]
<!-- /wp:html -->

<!-- wp:heading {"level":5,"textColor":"accent"} -->
<h5 class="has-accent-color has-text-color">22.快速失败(fail-fast)和安全失败(fail-safe)的区别是什么？</h5>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><strong>快速失败</strong> 在用迭代器遍历一个集合对象时，如果遍历过程中对集合对象的内容进行了修改（增加、删除、修改），则会抛出Concurrent Modification Exception。</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="java"]
 public class Test {
 ​
     public static void main(String[] args) {
         List<Integer> list = new ArrayList<>();
         list.add(1);
         list.add(2);
 ​
         Iterator iterator = list.iterator();
         while (iterator.hasNext()) {
             System.out.println(iterator.next());
             list.add(3);
             System.out.println(list.size());
         }
 ​
     }
 }
 ​
 /*
 1
 Exception in thread "main" java.util.ConcurrentModificationException
 3
     at java.util.ArrayList$Itr.checkForComodification(ArrayList.java:909)
     at java.util.ArrayList$Itr.next(ArrayList.java:859)
     at Test.main(Test.java:12)
 */
[/cc]
<!-- /wp:html -->

<!-- wp:paragraph -->
<p><strong>安全失败</strong> 采用安全失败机制的集合容器，在遍历时不是直接在集合内容上访问的，而是先复制原有集合内容，在拷贝的集合上进行遍历。</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="java"]
ublic class Test {
 ​
     public static void main(String[] args) {
         List<Integer> list = new CopyOnWriteArrayList<>();
         list.add(1);
         list.add(2);
 ​
         Iterator iterator = list.iterator();
         while (iterator.hasNext()) {
             System.out.println(iterator.next());
             list.add(3);
             System.out.println("list size:"+list.size());
         }
 ​
     }
 }
[/cc]
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>其实，在java.util.concurrent 并发包的集合，如 ConcurrentHashMap, CopyOnWriteArrayList等，默认为都是安全失败的。</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":5,"textColor":"accent"} -->
<h5 class="has-accent-color has-text-color">23.什么是Java优先级队列(Priority Queue)？</h5>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>优先队列PriorityQueue是Queue接口的实现，可以对其中元素进行排序</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>优先队列中元素默认排列顺序是升序排列</li><li>但对于自己定义的类来说，需要自己定义比较器</li></ul>
<!-- /wp:list -->

<!-- wp:html -->
[cc lang="java"]
 public class PriorityQueue<E> extends AbstractQueue<E>
     implements java.io.Serializable {
     ...
      private final Comparator<? super E> comparator;
[/cc]
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>方法：</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="java"]
 peek()//返回队首元素
 poll()//返回队首元素，队首元素出队列
 add()//添加元素
 size()//返回队列元素个数
 isEmpty()//判断队列是否为空，为空返回true,不空返回false
[/cc]
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>特点：</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>基于优先级堆</li><li>不允许null值</li><li>线程不安全</li><li>出入队时间复杂度O(log(n))</li><li>调用remove()返回堆内最小值</li></ol>
<!-- /wp:list -->

<!-- wp:heading {"level":5,"textColor":"accent"} -->
<h5 class="has-accent-color has-text-color">24.阻塞队列的实现，ArrayBlockingQueue的底层实现？</h5>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>ArrayBlockingQueue是数组实现的线程安全的有界的阻塞队列，继承自AbstractBlockingQueue,间接的实现了Queue接口和Collection接口。底层以数组的形式保存数据(实际上可看作一个循环数组)。常用的操作包括 add ,offer,put，remove,poll,take,peek。</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":5,"textColor":"accent"} -->
<h5 class="has-accent-color has-text-color">25.Java 中的 LinkedList是单向链表还是双向链表？</h5>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>是双向链表，看源码</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="java"]
private static class Node<E> {
     E item;
     Node<E> next;
     Node<E> prev;
 ​
     Node(Node<E> prev, E element, Node<E> next) {
         this.item = element;
         this.next = next;
         this.prev = prev;
     }
 }
[/cc]
<!-- /wp:html -->

<!-- wp:heading {"level":5,"textColor":"accent"} -->
<h5 class="has-accent-color has-text-color">26.ArrayList 的扩容机制</h5>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>ArrayList扩容的本质就是计算出新的扩容数组的size后实例化，并将原有数组内容复制到新数组中去。</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="java"]
public boolean add(E e) {
      //扩容
     ensureCapacityInternal(size + 1);  // Increments modCount!!
     elementData[size++] = e;
     return true;
     }
 private void ensureCapacityInternal(int minCapacity) {
       ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));
 }
 ​
 private static int calculateCapacity(Object[] elementData, int minCapacity) {
         //如果传入的是个空数组则最小容量取默认容量与minCapacity之间的最大值
         if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {
             return Math.max(DEFAULT_CAPACITY, minCapacity);
         }
         return minCapacity;
     }
     
   private void ensureExplicitCapacity(int minCapacity) {
         modCount++;
         // 如果最小需要空间比elementData的内存空间要大，则需要扩容
         // overflow-conscious code
         if (minCapacity - elementData.length > 0)
             grow(minCapacity);
     }
     
        private void grow(int minCapacity) {
         // 获取elementData数组的内存空间长度
         int oldCapacity = elementData.length;
         // 扩容至原来的1.5倍
         int newCapacity = oldCapacity + (oldCapacity >> 1);
         //校验容量是否够
         if (newCapacity - minCapacity < 0)
             newCapacity = minCapacity;
         //若预设值大于默认的最大值，检查是否溢出
         if (newCapacity - MAX_ARRAY_SIZE > 0)
             newCapacity = hugeCapacity(minCapacity);
         // 调用Arrays.copyOf方法将elementData数组指向新的内存空间
          //并将elementData的数据复制到新的内存空间
         elementData = Arrays.copyOf(elementData, newCapacity);
     }
[/cc]
<!-- /wp:html -->

<!-- wp:heading {"level":5,"textColor":"accent"} -->
<h5 class="has-accent-color has-text-color">27.HashMap 的长度为什么是2的幂次方，以及其他常量定义的含义</h5>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>为了能让HashMap存取高效，数据分配均匀。 以下等式相等，但是位移运算比取余效率高很多</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="java"]
 hash%length=hash&amp;(length-1)
[/cc]
<!-- /wp:html -->

<!-- wp:heading {"level":5,"textColor":"accent"} -->
<h5 class="has-accent-color has-text-color">28.ConcurrenHashMap 原理？1.8 中为什么要用红黑树？</h5>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>java8不是用红黑树来管理hashmap,而是在hash值相同的情况下(且重复数量大于8),用红黑树来管理数据。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>红黑树相当于排序数据。可以自动的使用二分法进行定位。性能较高。</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":5,"textColor":"accent"} -->
<h5 class="has-accent-color has-text-color">29.ArrayList的默认大小</h5>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>ArrayList 的默认大小是 10 个元素</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":5,"textColor":"accent"} -->
<h5 class="has-accent-color has-text-color">30.为何Collection不从Cloneable和Serializable接口继承？</h5>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Collection表示一个集合，包含了一组对象元素。如何维护它的元素对象是由具体实现来决定的。因为集合的具体形式多种多样，例如list允许重复，set则不允许。而克隆（clone）和序列化（serializable）只对于具体的实体，对象有意义，你不能说去把一个接口，抽象类克隆，序列化甚至反序列化。所以具体的collection实现类是否可以克隆，是否可以序列化应该由其自身决定，而不能由其超类强行赋予。</li><li>如果collection继承了clone和serializable，那么所有的集合实现都会实现这两个接口，而如果某个实现它不需要被克隆，甚至不允许它序列化（序列化有风险），那么就与collection矛盾了。</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":5,"textColor":"accent"} -->
<h5 class="has-accent-color has-text-color">31.Enumeration和Iterator接口的区别？</h5>
<!-- /wp:heading -->

<!-- wp:html -->
[cc lang="java"]
 public interface Enumeration<E> {
     boolean hasMoreElements();
     E nextElement();
 }
 public interface Iterator<E> {
     boolean hasNext();
     E next();
     void remove();
 }
 ​
[/cc]
<!-- /wp:html -->

<!-- wp:list -->
<ul><li>函数接口不同</li><li>Enumeration速度快，占用内存少，但是不是快速失败的，线程不安全。</li><li>Iterator允许删除底层数据，枚举不允许</li><li>Iterator安全性高，因为其他线程不能够修改正在被Iterator遍历的集合里面的对象。</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":5,"textColor":"accent"} -->
<h5 class="has-accent-color has-text-color">32.我们如何对一组对象进行排序？</h5>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>可以用 Collections.sort（）+ Comparator.comparing（），因为对对象排序，实际上是对对象的属性排序</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="java"]
 public class Student {
 ​
     private String name;
     private int score;
 ​
     public Student(String name, int score){
         this.name = name;
         this.score = score;
     }
 ​
     public String getName() {
         return name;
     }
 ​
     public void setName(String name) {
         this.name = name;
     }
 ​
     public int getScore() {
         return score;
     }
 ​
     public void setScore(int score) {
         this.score = score;
     }
 ​
     @Override
     public String toString() {
         return "Student: " + this.name + " 分数：" + Integer.toString( this.score );
     }
 }
 ​
 public class Test {
 ​
     public static void main(String[] args) {
 ​
         List<Student> studentList = new ArrayList<>();
         studentList.add(new Student("D", 90));
         studentList.add(new Student("C", 100));
         studentList.add(new Student("B", 95));
         studentList.add(new Student("A", 95));
 ​
         Collections.sort(studentList, Comparator.comparing(Student::getScore).reversed().thenComparing(Student::getName));
         studentList.stream().forEach(p -> System.out.println(p.toString()));
     }
 }
[/cc]
<!-- /wp:html -->

<!-- wp:heading {"level":5,"textColor":"accent"} -->
<h5 class="has-accent-color has-text-color">33.当一个集合被作为参数传递给一个函数时，如何才可以确保函数不能修改它？</h5>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>在作为参数传递之前，使用Collections.unmodifiableCollection(Collection c)方法创建一个只读集合，这将确保改变集合的任何操作都会抛出UnsupportedOperationException。</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":5,"textColor":"accent"} -->
<h5 class="has-accent-color has-text-color">34.HashSet的实现原理？</h5>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>不能保证元素的排列顺序，顺序有可能发生变化。</li><li>元素可以为null</li><li>hashset保证元素不重复</li><li>实际是基于HashMap实现的，HashSet 底层使用HashMap来保存所有元素的</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>它的add方法，元素E作为HashMap的key</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
[cc lang="java"]
 public boolean add(E e) {
     return map.put(e, PRESENT)==null;
 }
[/cc]
<!-- /wp:html -->

<!-- wp:heading {"level":5,"textColor":"accent"} -->
<h5 class="has-accent-color has-text-color">35.Array 和 ArrayList 有何区别？</h5>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>定义一个 Array 时，必须指定数组的数据类型及数组长度，即数组中存放的元素个数固定并且类型相同。</li><li>ArrayList 是动态数组，长度动态可变，会自动扩容。不使用泛型的时候，可以添加不同类型元素。</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":5,"textColor":"accent"} -->
<h5 class="has-accent-color has-text-color">36.为什么HashMap中String、Integer这样的包装类适合作为key？</h5>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>String、Integer等包装类的特性能够保证Hash值的不可更改性和计算准确性，能够有效的减少Hash碰撞的几率~</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>因为</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>它们都是final修饰的类，不可变性，保证key的不可更改性，不会存在获取hash值不同的情况~</li><li>它们内部已重写了equals()、hashCode()等方法，遵守了HashMap内部的规范</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":5,"textColor":"accent"} -->
<h5 class="has-accent-color has-text-color">37.如果想用Object作为hashMap的Key？</h5>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>重写hashCode()是因为需要计算存储数据的存储位置，需要注意不要试图从散列码计算中排除掉一个对象的关键部分来提高性能，这样虽然能更快但可能会导致更多的Hash碰撞；</li><li>重写equals()方法，需要遵守自反性、对称性、传递性、一致性以及对于任何非null的引用值x，x.equals(null)必须返回false的这几个特性，目的是为了保证key在哈希表中的唯一性；</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":5,"textColor":"accent"} -->
<h5 class="has-accent-color has-text-color">38.红黑树的特点？</h5>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>每个节点或者是黑色，或者是红色。</li><li>根节点是黑色。</li><li>每个叶子节点（NIL）是黑色。[注意：这里叶子节点，是指为空(NIL或NULL)的叶子节点！]</li><li>如果一个节点是红色的，则它的子节点必须是黑色的。</li><li>从一个节点到该节点的子孙节点的所有路径上包含相同数目的黑节点。</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":5,"textColor":"accent"} -->
<h5 class="has-accent-color has-text-color">39.Java集合类框架的最佳实践有哪些</h5>
<!-- /wp:heading -->

<!-- wp:list {"ordered":true} -->
<ol><li>根据应用需要正确选择要使用的集合类型对性能非常重要，比如：假如知道元素的大小是固定的，那么选用Array类型而不是ArrayList类型更为合适。</li><li>有些集合类型允许指定初始容量。因此，如果我们能估计出存储的元素的数目，我们可以指定初始容量来避免重新计算hash值或者扩容等。</li><li>为了类型安全、可读性和健壮性等原因总是要使用泛型。同时，使用泛型还可以避免运行时的ClassCastException。</li><li>使用JDK提供的不变类(immutable class)作为Map的键可以避免为我们自己的类实现hashCode()和equals()方法。</li><li>编程的时候接口优于实现</li><li>底层的集合实际上是空的情况下，返回为长度是0的集合或数组而不是null。</li></ol>
<!-- /wp:list -->

<!-- wp:heading {"level":5,"textColor":"accent"} -->
<h5 class="has-accent-color has-text-color">40.谈谈线程池阻塞队列吧~</h5>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>ArrayBlockingQueue</li><li>LinkedBlockingQueue</li><li>DelayQueue</li><li>PriorityBlockingQueue</li><li>SynchronousQueue</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p><strong>ArrayBlockingQueue：</strong> （有界队列）是一个用数组实现的有界阻塞队列，按FIFO排序量。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>LinkedBlockingQueue：</strong> （可设置容量队列）基于链表结构的阻塞队列，按FIFO排序任务，容量可以选择进行设置，不设置的话，将是一个无边界的阻塞队列，最大长度为Integer.MAX_VALUE，吞吐量通常要高于ArrayBlockingQuene；newFixedThreadPool线程池使用了这个队列</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>DelayQueue：</strong>（延迟队列）是一个任务定时周期的延迟执行的队列。根据指定的执行时间从小到大排序，否则根据插入到队列的先后排序。newScheduledThreadPool线程池使用了这个队列。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>PriorityBlockingQueue：</strong>（优先级队列）是具有优先级的无界阻塞队列；</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>SynchronousQueue：</strong>（同步队列）一个不存储元素的阻塞队列，每个插入操作必须等到另一个线程调用移除操作，否则插入操作一直处于阻塞状态，吞吐量通常要高于LinkedBlockingQuene，newCachedThreadPool线程池使用了这个队列。</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":5,"textColor":"accent"} -->
<h5 class="has-accent-color has-text-color">41.HashSet和TreeSet有什么区别？</h5>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Hashset 的底层是由哈希表实现的，Treeset 底层是由红黑树实现的。</li><li>HashSet中的元素没有顺序，TreeSet保存的元素有顺序性（实现Comparable接口）</li><li>HashSet的add()，remove()，contains()方法的时间复杂度是O(1);TreeSet中，add()，remove()，contains()方法的时间复杂度是O(logn)</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":5,"textColor":"accent"} -->
<h5 class="has-accent-color has-text-color">42.Set里的元素是不能重复的，那么用什么方法来区分重复与否呢? 是用==还是equals()?</h5>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>元素重复与否是使用equals()方法进行判断的，这个可以跟面试官说说==和equals()的区别，hashcode()和equals</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":5,"textColor":"accent"} -->
<h5 class="has-accent-color has-text-color">43.ArrayList,LinkedList的存储性能和特性</h5>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>ArrayList,使用数组方式存储数据，查询时，ArrayList是基于索引(index)的数据结构，可以直接映射到，速度较快；但是插入数据需要移动数据，效率就比LinkedList慢一点~</li><li>LinkedList,使用双向链表实现存储,按索引数据需要进行前向或后向遍历，查询相对ArrayList慢一点；但是插入数据速度较快。</li><li>LinkedList比ArrayList开销更大，因为LinkedList的节点除了存储数据，还需要存储引用。</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":5,"textColor":"accent"} -->
<h5 class="has-accent-color has-text-color">44.ArrayList集合加入1万条数据，应该怎么提高效率</h5>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>因为ArrayList的底层是数组实现,并且数组的默认值是10,如果插入10000条要不断的扩容,耗费时间,所以我们调用ArrayList的指定容量的构造器方法ArrayList(int size) 就可以实现不扩容,就提高了性能。</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":5,"textColor":"accent"} -->
<h5 class="has-accent-color has-text-color">45.如何对Object的list排序</h5>
<!-- /wp:heading -->

<!-- wp:html -->
[cc lang="java"]
 public class Person {
 ​
     private String name;
     private Integer age;
     public String getName() {
         return name;
     }
     public void setName(String name) {
         this.name = name;
     }
     public Integer getAge() {
         return age;
     }
     public void setAge(Integer age) {
         this.age = age;
     }
     public Person(String name, Integer age) {
         this.name = name;
         this.age = age;
     }
 }
 ​
 public class Test {
 ​
     public static void main(String[] args) {
 ​
         List<Person> list = new ArrayList<>();
         list.add(new Person("jay", 18));
         list.add(new Person("tianLuo", 10));
 ​
         list.stream().forEach(p -> System.out.println(p.getName()+" "+p.getAge()));
         // 用comparing比较对象属性
         list.sort(Comparator.comparing(Person::getAge));
 ​
         System.out.println("排序后");
 ​
         list.stream().forEach(p -> System.out.print(p.getName()+" "+p.getAge()+" "));
     }
 }
 ​
[/cc]
<!-- /wp:html -->

<!-- wp:heading {"level":5,"textColor":"accent"} -->
<h5 class="has-accent-color has-text-color">46.ArrayList 和 HashMap 的默认大小是多数？</h5>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>在 Java 7 中，ArrayList 的默认大小是 10 个元素，HashMap 的默认大小是16个元素（必须是2的幂）</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":5,"textColor":"accent"} -->
<h5 class="has-accent-color has-text-color">47.有没有有顺序的Map实现类，如果有，他们是怎么保证有序的</h5>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>HashMap和Hashtable 都不是有序的。</li><li>TreeMap和LinkedHashmap都是有序的。（TreeMap默认是key升序，LinkedHashmap默认是数据插入顺序）</li><li>TreeMap是基于比较器Comparator来实现有序的。</li><li>LinkedHashmap是基于链表来实现数据插入有序的。</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":5,"textColor":"accent"} -->
<h5 class="has-accent-color has-text-color">48.HashMap是怎么解决哈希冲突的</h5>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Hashmap解决hash冲突，使用的是链地址法，即数组+链表的形式来解决。put执行首先判断table[i]位置，如果为空就直接插入，不为空判断和当前值是否相等，相等就覆盖，如果不相等的话，判断是否是红黑树节点，如果不是，就从table[i]位置开始遍历链表，相等覆盖，不相等插入</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":5,"textColor":"accent"} -->
<h5 class="has-accent-color has-text-color">49.HashMap在JDK1.7和JDK1.8中有哪些不同？</h5>
<!-- /wp:heading -->

<!-- wp:image {"id":250,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="http://blog.liobio.cn/wp-content/uploads/2021/10/image-2.png" alt="" class="wp-image-250"/></figure>
<!-- /wp:image -->

<!-- wp:heading {"level":5,"textColor":"accent"} -->
<h5 class="has-accent-color has-text-color">50.JAVA8的ConcurrentHashMap为什么放弃了分段锁，有什么问题吗，如果你来设计，你如何设计。</h5>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>jdk8 放弃了分段锁而是用了Node锁，减低锁的粒度，提高性能，并使用CAS操作来确保Node的一些操作的原子性，取代了锁。<br></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[Java集合面试题]]></excerpt:encoded>
		<wp:post_id>245</wp:post_id>
		<wp:post_date><![CDATA[2021-10-22 02:08:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-10-21 18:08:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[java%e9%9b%86%e5%90%88%e9%9d%a2%e8%af%95%e9%a2%98]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>1</wp:is_sticky>
										<category domain="category" nicename="java"><![CDATA[Java]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[46]]></wp:meta_value>
		</wp:postmeta>
							</item>
				</channel>
</rss>
	